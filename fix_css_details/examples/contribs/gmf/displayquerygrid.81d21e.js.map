{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./contribs/gmf/src/query/gridComponent.html","webpack:///./contribs/gmf/src/query/gridComponent.js","webpack:///./contribs/gmf/examples/displayquerygrid.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","5","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","obj","__t","__p","gridComponent_exports","angular","Csv","service","grid_component","Config","FeatureOverlayMgr","MapQuerent","gmfDisplayquerygridTemplateUrl","$element","$attrs","templateUrl","undefined","run","$templateCache","put","component_","controller","bindings","active","featuresStyleFn","selectedFeatureStyleFn","getMapFn","removeEmptyColumnsFn","maxResultsFn","maxRecenterZoomFn","mergeTabs","component","Controller_","$injector","$scope","ngeoQueryResult","ngeoMapQuerent","ngeoFeatureOverlayMgr","$timeout","ngeoCsvDownload","_this","this","queryOptions","has","$scope_","$timeout_","ngeoMapQuerent_","ngeoCsvDownload_","$element_","maxResults","limit","pending","gridSources","loadedGridSources","selectedTab","removeEmptyColumns_","maxRecenterZoom","featuresForSources_","features_","Collection","ngeoFeatureOverlayMgr_","highlightFeatures_","filename_","map_","$watchCollection","newQueryResult","oldQueryResult","updateData_","unregisterSelectWatcher_","$onInit","featuresOverlay","getFeatureOverlay","setFeatures","featuresStyle","goog_asserts_prod","assertInstanceof","Style","setStyle","highlightFeaturesOverlay","highlightFeatureStyle","fill","Fill","color","stroke","Stroke","width","image","Circle","radius","zIndex","mapFn","map","Map","getGridSources","_this2","sourceLabel","_this3","total","hasOneWithTooManyResults_","oldActive","clear","sources","keys","getMergedSources_","forEach","source","tooManyResults","makeGrid_","id","escapeValue","features","collectData_","firstSourceId","selectTab","some","Number","isInteger","toEscape","match","replace","isSelected","gridSource","label","_this4","allSources","mergedSources","mergedSourceId","getMergedSource_","mergeSourceId","currentMergeSourceId","mergeSource","queried","totalFeatureCount","feature","allProperties","featureGeometriesNames","featuresForSource","properties","featureGeometryName","getProperties","getGeometryName","indexOf","getRowUid","cleanProperties_","removeEmptyColumnsFn_","keysToKeep","keyToRemove","gridConfig","getGridConfiguration_","configuration","assert","clone","assign","ol_uid","columnDefs","column","_this5","selectedRows","newSelected","oldSelectedRows","onSelectionChanged_","updateFeatures_","reflowGrid_","activePane","find","removeClass","addClass","rowId","getActiveGridSource","isOneSelected","getSelectedCount","getSelectedRowCount","selectAll","unselectAll","invertSelection","zoomToSelection","extent","ol_extent","getGeometry","getExtent","size","getSize","maxZoom","getView","fit","downloadCsv","getSelectedRows","startDownload","gridComponent","displayquerygrid_exports","Manager","map_component","Themes","grid_module","map_module","btnComponent","bboxQueryComponent","mapQueryComponent","constant","queryCountFirst","queryresultComponent","template","QueryresultController","MainController","gmfThemes","gmfDataSourcesManager","loadThemes","featureStyle","layers","Tile","OSM","view","View","projection","EPSG21781","resolutions","center","zoom","setDatasourceMap","themes","treeSource","queryActive","queryGridActive","getThemesObject","then","init","__webpack_exports__"],"mappings":"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","file":"displayquerygrid.81d21e.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t5: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([521,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","module.exports = function (obj) {\nobj || (obj = {});\nvar __t, __p = '';\nwith (obj) {\n__p += '<div class=\"gmf-displayquerygrid panel\" ng-show=\"ctrl.active\">\\n  <div\\n    class=\"close\"\\n    ng-click=\"ctrl.clear()\">\\n    &times;\\n  </div>\\n\\n  <ul\\n    class=\"nav nav-pills\"\\n    role=\"tablist\">\\n\\n    <li\\n      ng-repeat=\"gridSource in ctrl.getGridSources() track by gridSource.source.label\"\\n      role=\"presentation\"\\n      ng-class=\"{\\'active\\' : ctrl.isSelected(gridSource)}\"\\n      ng-click=\"ctrl.selectTab(gridSource)\">\\n\\n      <a\\n        href=\"#{{ctrl.escapeValue(gridSource.source.label)}}\"\\n        data-target=\"#{{ctrl.escapeValue(gridSource.source.label)}}\"\\n        aria-controls=\"{{ctrl.escapeValue(gridSource.source.label)}}\"\\n        role=\"tab\"\\n        data-toggle=\"tab\">\\n\\n        <span ng-if=\"gridSource.source.tooManyResults !== true\">\\n          {{gridSource.source.label | translate}} ({{gridSource.source.features.length}})\\n        </span>\\n        <span ng-if=\"gridSource.source.tooManyResults === true\">\\n          {{gridSource.source.label | translate}} ({{gridSource.source.totalFeatureCount}}*)\\n        </span>\\n      </a>\\n    </li>\\n  </ul>\\n\\n  <div class=\"tab-content\">\\n    <div\\n      ng-repeat=\"gridSource in ctrl.getGridSources() track by gridSource.source.label\"\\n      role=\"tabpanel\"\\n      class=\"tab-pane\"\\n      ng-class=\"{\\'active\\' : ctrl.isSelected(gridSource)}\"\\n      id=\"{{ctrl.escapeValue(gridSource.source.label)}}\">\\n\\n      <ngeo-grid\\n        ngeo-grid-configuration=\"gridSource.configuration\"\\n        ng-if=\"gridSource.source.tooManyResults !== true\">\\n      </ngeo-grid>\\n\\n      <div ng-if=\"gridSource.source.tooManyResults === true\">\\n        <div class=\"gmf-displayquerygrid-message alert alert-warning\">\\n          <p><span translate>The results can not be displayed because the maximum number has been reached</span> ({{gridSource.source.limit}}).</p>\\n          <p translate>Please refine your query.</p>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n\\n  <div ng-show=\"!ctrl.pending && ctrl.getActiveGridSource() && ctrl.getActiveGridSource().configuration !== null\">\\n\\n    <ul class=\"nav justify-content-end\">\\n\\n      <li\\n        class=\"ng-hide\"\\n        ng-show=\"ctrl.isOneSelected()\">\\n        <p class=\"navbar-text ng-binding\">\\n          {{ctrl.getSelectedRowCount()}} <span translate>selected element(s)</span>\\n        </p>\\n      </li>\\n\\n      <li\\n        ng-show=\"ctrl.isOneSelected()\"\\n        class=\"ng-hide\">\\n        <button\\n          class=\"btn btn-link btn-sm\"\\n          title=\"{{\\'Zoom to selection\\' | translate}}\"\\n          ng-click=\"ctrl.zoomToSelection()\">\\n          <i class=\"fa fa-search-plus\"></i> <span translate>Zoom to</span>\\n        </button>\\n      </li>\\n\\n      <li\\n        ng-show=\"ctrl.isOneSelected()\"\\n        class=\"ng-hide\">\\n        <button\\n          class=\"btn btn-link btn-sm\"\\n          title=\"{{\\'Export selection as CSV\\' | translate}}\"\\n          ng-click=\"ctrl.downloadCsv()\">\\n          <i class=\"fa fa-download\"></i> <span translate>Export as CSV</span>\\n        </button>\\n      </li>\\n\\n      <li class=\"navbar-link\">\\n        <button\\n          type=\"button\"\\n          class=\"dropup btn btn-default btn-sm dropdown-toggle\"\\n          data-toggle=\"dropdown\"\\n          aria-haspopup=\"true\"\\n          aria-expanded=\"false\">\\n          <span translate>Select</span>\\n        </button>\\n        <ul\\n          class=\"dropdown-menu\"\\n          aria-labelledby=\"dLabel\">\\n          <li>\\n            <a\\n              href=\"\"\\n              ng-click=\"ctrl.selectAll()\" translate>All</a>\\n          </li>\\n          <li>\\n            <a\\n              href=\"\"\\n              ng-click=\"ctrl.unselectAll()\" translate>None</a>\\n          </li>\\n          <li>\\n            <a\\n              href=\"\"\\n              ng-click=\"ctrl.invertSelection()\" translate>Reverse selection</a>\\n          </li>\\n        </ul>\\n      </li>\\n    </ul>\\n  </div>\\n\\n  <div\\n    ng-show=\"ctrl.pending\"\\n    class=\"gmf-displayquerygrid-pending\">\\n    <span class=\"fa fa-spinner fa-spin\"></span>\\n  </div>\\n</div>\\n';\n\n}\nreturn __p\n}","/**\n * @module gmf.query.gridComponent\n */\nimport googAsserts from 'goog/asserts.js';\n\n/** @suppress {extraRequire} */\nimport ngeoDownloadCsv from 'ngeo/download/Csv.js';\n\n/** @suppress {extraRequire} */\nimport ngeoDownloadService from 'ngeo/download/service.js';\n\n/** @suppress {extraRequire} */\nimport ngeoGridComponent from 'ngeo/grid/component.js';\n\nimport ngeoGridConfig from 'ngeo/grid/Config.js';\nimport ngeoMapFeatureOverlayMgr from 'ngeo/map/FeatureOverlayMgr.js';\n\n/** @suppress {extraRequire} - required for `ngeoQueryResult` */\nimport ngeoQueryMapQuerent from 'ngeo/query/MapQuerent.js';\n\nimport olCollection from 'ol/Collection.js';\nimport * as olExtent from 'ol/extent.js';\nimport olMap from 'ol/Map.js';\nimport olStyleCircle from 'ol/style/Circle.js';\nimport olStyleFill from 'ol/style/Fill.js';\nimport olStyleStroke from 'ol/style/Stroke.js';\nimport olStyleStyle from 'ol/style/Style.js';\n\nimport 'bootstrap/js/src/dropdown.js';\n\n\n/**\n * @type {!angular.Module}\n */\nconst exports = angular.module('gmfQueryGridComponent', [\n  ngeoDownloadCsv.module.name,\n  ngeoDownloadService.name,\n  ngeoGridComponent.name,\n  ngeoGridConfig.module.name,\n  ngeoMapFeatureOverlayMgr.module.name,\n  ngeoQueryMapQuerent.module.name,\n]);\n\n\nexports.value('gmfDisplayquerygridTemplateUrl',\n  /**\n   * @param {!angular.JQLite} $element Element.\n   * @param {!angular.Attributes} $attrs Attributes.\n   * @return {string} Template URL.\n   */\n  ($element, $attrs) => {\n    const templateUrl = $attrs['gmfDisplayquerygridTemplateurl'];\n    return templateUrl !== undefined ? templateUrl :\n      'gmf/query/gridComponent';\n  }\n);\n\nexports.run(/* @ngInject */ ($templateCache) => {\n  $templateCache.put('gmf/query/gridComponent', require('./gridComponent.html'));\n});\n\n\n/**\n * @param {!angular.JQLite} $element Element.\n * @param {!angular.Attributes} $attrs Attributes.\n * @param {!function(!angular.JQLite, !angular.Attributes): string} gmfDisplayquerygridTemplateUrl Template function.\n * @return {string} Template URL.\n * @ngInject\n */\nfunction gmfDisplayquerygridTemplateUrl($element, $attrs, gmfDisplayquerygridTemplateUrl) {\n  return gmfDisplayquerygridTemplateUrl($element, $attrs);\n}\n\n\n/**\n * Provides a component to display results of the {@link ngeo.queryResult} in a\n * grid and shows related features on the map using\n * the {@link ngeo.map.FeatureOverlayMgr}.\n *\n * You can override the default component's template by setting the\n * value `gmfDisplayquerygridTemplateUrl`.\n *\n * Features displayed on the map use a default style but you can override these\n * styles by passing ol.style.Style objects as attributes of this component.\n *\n * Note: the following ng-class need to be present in the interface <body> element to display the footer\n * when the grid is active (initially there should be the code for the profile tool):\n *      <body ng-class=\"{'gmf-profile-chart-active': !!profileChartActive, 'gmf-query-grid-active': !!queryGridActive}\">\n *\n * Example:\n *\n *      <gmf-displayquerygrid\n *        gmf-displayquerygrid-map=\"ctrl.map\"\n *        gmf-displayquerygrid-featuresstyle=\"ctrl.styleForAllFeatures\"\n *        gmf-displayquerygrid-selectedfeaturestyle=\"ctrl.styleForTheCurrentFeature\">\n *      </gmf-displayquerygrid>\n *\n * @htmlAttribute {boolean} gmf-displayquerygrid-active The active state of the component.\n * @htmlAttribute {ol.style.Style} gmf-displayquerygrid-featuresstyle A style\n *     object for all features from the result of the query.\n * @htmlAttribute {ol.style.Style} gmf-displayquerygrid-selectedfeaturestyle A style\n *     object for the currently selected features.\n * @htmlAttribute {ol.Map} gmf-displayquerygrid-map The map.\n * @htmlAttribute {boolean?} gmf-displayquerygrid-removeemptycolumns Optional. Should\n *     empty columns be hidden? Default: `false`.\n * @htmlAttribute {number?} gmf-displayquerygrid-maxrecenterzoom Optional. Maximum\n *     zoom-level to use when zooming to selected features.\n * @htmlAttribute {gmfx.GridMergeTabs?} gmf-displayquerygrid-gridmergetabs Optional.\n *     Configuration to merge grids with the same attributes into a single grid.\n *\n * @ngdoc component\n * @ngname gmfDisplayquerygrid\n */\nexports.component_ = {\n  controller: 'GmfDisplayquerygridController as ctrl',\n  bindings: {\n    'active': '=?gmfDisplayquerygridActive',\n    'featuresStyleFn': '&gmfDisplayquerygridFeaturesstyle',\n    'selectedFeatureStyleFn': '&gmfDisplayquerygridSelectedfeaturestyle',\n    'getMapFn': '&gmfDisplayquerygridMap',\n    'removeEmptyColumnsFn': '&?gmfDisplayquerygridRemoveemptycolumns',\n    'maxResultsFn': '&?gmfDisplayquerygridMaxresults',\n    'maxRecenterZoomFn': '&?gmfDisplayquerygridMaxrecenterzoom',\n    'mergeTabs': '<?gmfDisplayquerygridMergetabs'\n  },\n  templateUrl: gmfDisplayquerygridTemplateUrl\n};\n\n\nexports.component('gmfDisplayquerygrid', exports.component_);\n\n\n/**\n * Controller for the query grid.\n *\n * @param {!angular.$injector} $injector Main injector.\n * @param {!angular.Scope} $scope Angular scope.\n * @param {!ngeox.QueryResult} ngeoQueryResult ngeo query result.\n * @param {!ngeo.query.MapQuerent} ngeoMapQuerent ngeo map querent service.\n * @param {!ngeo.map.FeatureOverlayMgr} ngeoFeatureOverlayMgr The ngeo feature\n *     overlay manager service.\n * @param {!angular.$timeout} $timeout Angular timeout service.\n * @param {!ngeo.download.Csv} ngeoCsvDownload CSV download service.\n * @param {!angular.JQLite} $element Element.\n * @constructor\n * @private\n * @ngInject\n * @ngdoc controller\n * @ngname GmfDisplayquerygridController\n */\nexports.Controller_ = function($injector, $scope, ngeoQueryResult, ngeoMapQuerent,\n  ngeoFeatureOverlayMgr, $timeout, ngeoCsvDownload, $element) {\n\n  const queryOptions = /** @type {ngeox.QueryOptions} */ (\n    $injector.has('ngeoQueryOptions') ?\n      $injector.get('ngeoQueryOptions') : {});\n\n  /**\n   * @type {!angular.Scope}\n   * @private\n   */\n  this.$scope_ = $scope;\n\n  /**\n   * @type {!angular.$timeout}\n   * @private\n   */\n  this.$timeout_ = $timeout;\n\n  /**\n   * @type {!ngeox.QueryResult}\n   * @export\n   */\n  this.ngeoQueryResult = ngeoQueryResult;\n\n  /**\n   * @type {!ngeo.query.MapQuerent}\n   * @private\n   */\n  this.ngeoMapQuerent_ = ngeoMapQuerent;\n\n  /**\n   * @type {!ngeo.download.Csv}\n   * @private\n   */\n  this.ngeoCsvDownload_ = ngeoCsvDownload;\n\n  /**\n   * @type {!angular.JQLite}\n   * @private\n   */\n  this.$element_ = $element;\n\n  /**\n   * @type {number}\n   * @export\n   */\n  this.maxResults = queryOptions.limit !== undefined ? queryOptions.limit : 50;\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.active = false;\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.pending = false;\n\n  /**\n   * @type {!Object.<string, gmfx.GridSource>}\n   * @export\n   */\n  this.gridSources = {};\n\n  /**\n   * IDs of the grid sources in the order they were loaded.\n   * @type {!Array.<string>}\n   * @export\n   */\n  this.loadedGridSources = [];\n\n  /**\n   * The id of the currently shown query source.\n   * @type {string|number|null}\n   * @export\n   */\n  this.selectedTab = null;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.removeEmptyColumns_ = false;\n\n  /**\n   * @type {number|undefined}\n   * @export\n   */\n  this.maxRecenterZoom;\n\n  /**\n   * @type {!gmfx.GridMergeTabs}\n   * @export\n   */\n  this.mergeTabs = {};\n\n  /**\n   * A mapping between row uid and the corresponding feature for each\n   * source.\n   * @type {!Object.<string, Object.<string, ol.Feature>>}\n   * @private\n   */\n  this.featuresForSources_ = {};\n\n  // Styles for displayed features (features) and selected features\n  // (highlightFeatures_) (user can set both styles).\n  /**\n   * @type {!ol.Collection}\n   * @private\n   */\n  this.features_ = new olCollection();\n\n  /**\n   * @type {!ngeo.map.FeatureOverlayMgr}\n   * @private\n   */\n  this.ngeoFeatureOverlayMgr_ = ngeoFeatureOverlayMgr;\n\n  /**\n   * @type {!ol.Collection}\n   * @private\n   */\n  this.highlightFeatures_ = new olCollection();\n\n  /**\n   * Filename\n   * @type {string}\n   * @private\n   */\n  this.filename_ = $injector.has('gmfCsvFilename') ?\n    $injector.get('gmfCsvFilename') : 'query-results.csv';\n\n  /**\n   * @type {ol.Map}\n   * @private\n   */\n  this.map_ = null;\n\n  // Watch the ngeo query result service.\n  this.$scope_.$watchCollection(\n    () => ngeoQueryResult,\n    (newQueryResult, oldQueryResult) => {\n      if (newQueryResult !== oldQueryResult) {\n        this.updateData_();\n      }\n    });\n\n  /**\n   * An unregister function returned from `$scope.$watchCollection` for\n   * \"on-select\" changes (when rows are selected/unselected).\n   * @type {?function()}\n   * @private\n   */\n  this.unregisterSelectWatcher_ = null;\n};\n\n/**\n * Init the controller\n */\nexports.Controller_.prototype.$onInit = function() {\n  this.removeEmptyColumns_ = this['removeEmptyColumnsFn'] ? this['removeEmptyColumnsFn']() === true : false;\n  this.maxRecenterZoom = this['maxRecenterZoomFn'] ? this['maxRecenterZoomFn']() : undefined;\n\n  const featuresOverlay = this.ngeoFeatureOverlayMgr_.getFeatureOverlay();\n  featuresOverlay.setFeatures(this.features_);\n  const featuresStyle = this['featuresStyleFn']();\n  if (featuresStyle !== undefined) {\n    googAsserts.assertInstanceof(featuresStyle, olStyleStyle);\n    featuresOverlay.setStyle(featuresStyle);\n  }\n\n  const highlightFeaturesOverlay = this.ngeoFeatureOverlayMgr_.getFeatureOverlay();\n  highlightFeaturesOverlay.setFeatures(this.highlightFeatures_);\n  let highlightFeatureStyle = this['selectedFeatureStyleFn']();\n  if (highlightFeatureStyle !== undefined) {\n    googAsserts.assertInstanceof(highlightFeatureStyle, olStyleStyle);\n  } else {\n    const fill = new olStyleFill({color: [255, 0, 0, 0.6]});\n    const stroke = new olStyleStroke({color: [255, 0, 0, 1], width: 2});\n    highlightFeatureStyle = new olStyleStyle({\n      fill: fill,\n      image: new olStyleCircle({\n        fill: fill,\n        radius: 5,\n        stroke: stroke\n      }),\n      stroke: stroke,\n      zIndex: 10\n    });\n  }\n  highlightFeaturesOverlay.setStyle(highlightFeatureStyle);\n\n  const mapFn = this['getMapFn'];\n  if (mapFn) {\n    const map = mapFn();\n    googAsserts.assertInstanceof(map, olMap);\n    this.map_ = map;\n  }\n};\n\n/**\n * Returns a list of grid sources in the order they were loaded.\n * @export\n * @return {Array.<gmfx.GridSource>} Grid sources.\n */\nexports.Controller_.prototype.getGridSources = function() {\n  return this.loadedGridSources.map(sourceLabel => this.gridSources[sourceLabel]);\n};\n\n\n/**\n * @private\n */\nexports.Controller_.prototype.updateData_ = function() {\n  // close if there are no results\n  if (this.ngeoQueryResult.total === 0 && !this.hasOneWithTooManyResults_()) {\n    const oldActive = this.active;\n    this.clear();\n    if (oldActive) {\n      // don't close if there are pending queries\n      this.active = this.ngeoQueryResult.pending;\n      this.pending = this.ngeoQueryResult.pending;\n    }\n    return;\n  }\n\n  this.active = true;\n  this.pending = false;\n  let sources = this.ngeoQueryResult.sources;\n  // merge sources if requested\n  if (Object.keys(this.mergeTabs).length > 0) {\n    sources = this.getMergedSources_(sources);\n  }\n\n  // create grids (only for source with features or with too many results)\n  sources.forEach((source) => {\n    if (source.tooManyResults) {\n      this.makeGrid_(null, source);\n    } else {\n      source.id = this.escapeValue(source.id);\n      const features = source.features;\n      if (features.length > 0) {\n        this.collectData_(source);\n      }\n    }\n  });\n\n  if (this.loadedGridSources.length === 0) {\n    // if no grids were created, do not show\n    this.active = false;\n    return;\n  }\n\n  // keep the first existing navigation tab open\n  if (this.selectedTab === null || !((`${this.selectedTab}`) in this.gridSources)) {\n    // selecting the tab is done in a timeout, because otherwise in rare cases\n    // `ng-class` might set the `active` class on multiple tabs.\n    this.$timeout_(() => {\n      const firstSourceId = this.loadedGridSources[0];\n      this.selectTab(this.gridSources[firstSourceId]);\n    }, 0);\n  }\n};\n\n\n/**\n * @private\n * @return {boolean} If one of the source has too many results.\n */\nexports.Controller_.prototype.hasOneWithTooManyResults_ = function() {\n  return this.ngeoQueryResult.sources.some(source => source.tooManyResults);\n};\n\n/**\n * Returns the value with all symbols and spaces replaced by an underscore.\n * @param {string|number} value A value to escape.\n * @returns {string|number} value An escaped value.\n * @export\n */\nexports.Controller_.prototype.escapeValue = function(value) {\n  // Work-around for Number.isInteger() when not always getting a number ...\n  if (Number.isInteger(/** @type {number} */ (value))) {\n    return value;\n  } else {\n    const toEscape = /[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\ |]/g;\n    if (value.match(toEscape) !== null) {\n      return value.replace(toEscape, '_');\n    } else {\n      return value;\n    }\n  }\n};\n\n\n/**\n * Returns if the given grid source is selected?\n * @export\n * @param {gmfx.GridSource} gridSource Grid source.\n * @return {boolean} Is selected?\n */\nexports.Controller_.prototype.isSelected = function(gridSource) {\n  return this.selectedTab === gridSource.source.label;\n};\n\n\n/**\n * Try to merge the mergable sources.\n * @param {Array.<ngeox.QueryResultSource>} sources Sources.\n * @return {Array.<ngeox.QueryResultSource>} The merged sources.\n * @private\n */\nexports.Controller_.prototype.getMergedSources_ = function(sources) {\n  const allSources = [];\n  /** @type {Object.<string, ngeox.QueryResultSource>} */\n  const mergedSources = {};\n\n  sources.forEach((source) => {\n    // check if this source can be merged\n    const mergedSource = this.getMergedSource_(source, mergedSources);\n\n    if (mergedSource === null) {\n      // this source should not be merged, add as is\n      allSources.push(source);\n    }\n  });\n\n  for (const mergedSourceId in mergedSources) {\n    allSources.push(mergedSources[mergedSourceId]);\n  }\n\n  return allSources;\n};\n\n\n/**\n * Check if the given source should be merged. If so, an artificial source\n * that will contain the features of all mergable sources is returned. If not,\n * `null` is returned.\n * @param {ngeox.QueryResultSource} source Source.\n * @param {Object.<string, ngeox.QueryResultSource>} mergedSources Merged sources.\n * @return {?ngeox.QueryResultSource} A merged source of null if the source should\n *    not be merged.\n * @private\n */\nexports.Controller_.prototype.getMergedSource_ = function(source, mergedSources) {\n  let mergeSourceId = null;\n\n  for (const currentMergeSourceId in this.mergeTabs) {\n    const sourceLabels = this.mergeTabs[currentMergeSourceId];\n    const containsSource = sourceLabels.some(sourceLabel => sourceLabel == source.label);\n    if (containsSource) {\n      mergeSourceId = currentMergeSourceId;\n      break;\n    }\n  }\n\n  if (mergeSourceId === null) {\n    // this source should not be merged\n    return null;\n  }\n\n  /** @type {ngeox.QueryResultSource} */\n  let mergeSource;\n  if (mergeSourceId in mergedSources) {\n    mergeSource = mergedSources[mergeSourceId];\n  } else {\n    mergeSource = {\n      features: [],\n      id: mergeSourceId,\n      label: mergeSourceId,\n      limit: this.maxResults,\n      pending: false,\n      queried: true,\n      tooManyResults: false,\n      totalFeatureCount: undefined\n    };\n    mergedSources[mergeSourceId] = mergeSource;\n  }\n\n  // add features of source to merge source\n  source.features.forEach((feature) => {\n    mergeSource.features.push(feature);\n  });\n\n  // if one of the source has too many results, the resulting merged source will\n  // also be marked with `tooManyResults` and will not contain any features.\n  mergeSource.tooManyResults = mergeSource.tooManyResults || source.tooManyResults;\n  if (mergeSource.tooManyResults) {\n    mergeSource.totalFeatureCount = (mergeSource.totalFeatureCount !== undefined) ?\n      mergeSource.totalFeatureCount + mergeSource.features.length : mergeSource.features.length;\n    mergeSource.features = [];\n  }\n  if (source.totalFeatureCount !== undefined) {\n    mergeSource.totalFeatureCount = (mergeSource.totalFeatureCount !== undefined) ?\n      mergeSource.totalFeatureCount + source.totalFeatureCount : source.totalFeatureCount;\n  }\n\n  return mergeSource;\n};\n\n\n/**\n * Collect all features in the queryResult object.\n * @param {ngeox.QueryResultSource} source Result source.\n * @private\n */\nexports.Controller_.prototype.collectData_ = function(source) {\n  const features = source.features;\n  const allProperties = [];\n  const featureGeometriesNames = [];\n  const featuresForSource = {};\n  let properties, featureGeometryName;\n  features.forEach((feature) => {\n    properties = feature.getProperties();\n    if (properties !== undefined) {\n      // Keeps distinct geometry names to remove theme later.\n      featureGeometryName = feature.getGeometryName();\n      if (featureGeometriesNames.indexOf(featureGeometryName) === -1) {\n        featureGeometriesNames.push(featureGeometryName);\n      }\n\n      allProperties.push(properties);\n      featuresForSource[ngeoGridConfig.getRowUid(properties)] = feature;\n    }\n  });\n\n  this.cleanProperties_(allProperties, featureGeometriesNames);\n  if (allProperties.length > 0) {\n    const gridCreated = this.makeGrid_(allProperties, source);\n    if (gridCreated) {\n      this.featuresForSources_[`${source.label}`] = featuresForSource;\n    }\n  }\n};\n\n\n/**\n * Remove all unwanted columns.\n * @param {Array.<Object>} allProperties A row.\n * @param {Array.<string>} featureGeometriesNames Geometry names.\n * @private\n */\nexports.Controller_.prototype.cleanProperties_ = function(\n  allProperties, featureGeometriesNames) {\n  allProperties.forEach((properties) => {\n    featureGeometriesNames.forEach((featureGeometryName) => {\n      delete properties[featureGeometryName];\n    });\n    delete properties['boundedBy'];\n    delete properties['ngeo_feature_type_'];\n  });\n\n  if (this.removeEmptyColumns_ === true) {\n    this.removeEmptyColumnsFn_(allProperties);\n  }\n};\n\n\n/**\n * Remove columns that will be completely empty between each properties.\n * @param {Array.<Object>} allProperties A row.\n * @private\n */\nexports.Controller_.prototype.removeEmptyColumnsFn_ = function(\n  allProperties) {\n  // Keep all keys that correspond to at least one value in a properties object.\n  const keysToKeep = [];\n  let i, key;\n  for (key in allProperties[0]) {\n    for (i = 0; i < allProperties.length; i++) {\n      if (allProperties[i][key] !== undefined) {\n        keysToKeep.push(key);\n        break;\n      }\n    }\n  }\n  // Get all keys that previously always refers always to an empty value.\n  let keyToRemove;\n  allProperties.forEach((properties) => {\n    keyToRemove = [];\n    for (key in properties) {\n      if (keysToKeep.indexOf(key) === -1) {\n        keyToRemove.push(key);\n      }\n    }\n    // Remove these keys.\n    keyToRemove.forEach((key) => {\n      delete properties[key];\n    });\n  });\n};\n\n\n/**\n * @param {?Array.<Object>} data Grid rows.\n * @param {ngeox.QueryResultSource} source Query source.\n * @return {boolean} Returns true if a grid was created.\n * @private\n */\nexports.Controller_.prototype.makeGrid_ = function(data, source) {\n  const sourceLabel = `${source.label}`;\n  let gridConfig = null;\n  if (data !== null) {\n    gridConfig = this.getGridConfiguration_(data);\n    if (gridConfig === null) {\n      return false;\n    }\n  }\n  if (this.loadedGridSources.indexOf(sourceLabel) == -1) {\n    this.loadedGridSources.push(sourceLabel);\n  }\n  this.gridSources[sourceLabel] = {\n    configuration: gridConfig,\n    source: source\n  };\n  return true;\n};\n\n\n/**\n * @param {Array.<!Object>} data Grid rows.\n * @return {?ngeo.grid.Config} Grid config.\n * @private\n */\nexports.Controller_.prototype.getGridConfiguration_ = function(\n  data) {\n  googAsserts.assert(data.length > 0);\n  const clone = {};\n  Object.assign(clone, data[0]);\n  delete clone.ol_uid;\n  const columns = Object.keys(clone);\n\n  /** @type {Array.<ngeox.GridColumnDef>} */\n  const columnDefs = [];\n  columns.forEach((column) => {\n    columnDefs.push(/** @type {ngeox.GridColumnDef} */ ({\n      name: column\n    }));\n  });\n\n  if (columnDefs.length > 0) {\n    return new ngeoGridConfig(data, columnDefs);\n  } else {\n    // no columns, do not show grid\n    return null;\n  }\n};\n\n\n/**\n * Remove the current selected feature and source and remove all features\n * from the map.\n * @export\n */\nexports.Controller_.prototype.clear = function() {\n  this.active = false;\n  this.pending = false;\n  this.gridSources = {};\n  this.loadedGridSources = [];\n  this.selectedTab = null;\n  this.tooManyResults = false;\n  this.features_.clear();\n  this.highlightFeatures_.clear();\n  this.ngeoMapQuerent_.clear();\n  this.featuresForSources_ = {};\n  if (this.unregisterSelectWatcher_) {\n    this.unregisterSelectWatcher_();\n  }\n};\n\n\n/**\n * Select the tab for the given grid source.\n * @param {gmfx.GridSource} gridSource Grid source.\n * @export\n */\nexports.Controller_.prototype.selectTab = function(gridSource) {\n  const source = gridSource.source;\n  this.selectedTab = source.label;\n\n  if (this.unregisterSelectWatcher_) {\n    this.unregisterSelectWatcher_();\n    this.unregisterSelectWatcher_ = null;\n  }\n\n  if (gridSource.configuration !== null) {\n    this.unregisterSelectWatcher_ = this.$scope_.$watchCollection(\n      () => gridSource.configuration.selectedRows,\n      (newSelected, oldSelectedRows) => {\n        if (Object.keys(newSelected) !== Object.keys(oldSelectedRows)) {\n          this.onSelectionChanged_();\n        }\n      });\n  }\n  this.updateFeatures_(gridSource);\n\n  this.reflowGrid_();\n};\n\n\n/**\n * @private\n */\nexports.Controller_.prototype.reflowGrid_ = function() {\n  // This is a \"work-around\" to make sure that the grid is rendered correctly.\n  // When a pane is activated by setting `this.selectedTab`, the class `active`\n  // is not yet set on the pane. That's why the class is set manually, and\n  // after the pane is shown (in the next digest loop), the grid table can\n  // be refreshed.\n  const id = this.escapeValue(this.selectedTab || '');\n  const activePane = this.$element_.find(`div.tab-pane#${id}`);\n  activePane.removeClass('active').addClass('active');\n  this.$timeout_(() => {\n    activePane.find('div.ngeo-grid-table-container table')['trigger']('reflow');\n  });\n};\n\n\n/**\n * Called when the row selection has changed.\n * @private\n */\nexports.Controller_.prototype.onSelectionChanged_ = function() {\n  if (this.selectedTab === null) {\n    return;\n  }\n\n  const gridSource = this.gridSources[`${this.selectedTab}`];\n  this.updateFeatures_(gridSource);\n};\n\n\n/**\n * @param {gmfx.GridSource} gridSource Grid source\n * @private\n */\nexports.Controller_.prototype.updateFeatures_ = function(gridSource) {\n  this.features_.clear();\n  this.highlightFeatures_.clear();\n\n  if (gridSource.configuration === null) {\n    return;\n  }\n\n  const sourceLabel = `${gridSource.source.label}`;\n  const featuresForSource = this.featuresForSources_[sourceLabel];\n  const selectedRows = gridSource.configuration.selectedRows;\n\n  for (const rowId in featuresForSource) {\n    const feature = featuresForSource[rowId];\n    if (rowId in selectedRows) {\n      this.highlightFeatures_.push(feature);\n    } else {\n      this.features_.push(feature);\n    }\n  }\n};\n\n\n/**\n * Get the currently shown grid source.\n * @export\n * @return {gmfx.GridSource|null} Grid source.\n */\nexports.Controller_.prototype.getActiveGridSource = function() {\n  if (this.selectedTab === null) {\n    return null;\n  } else {\n    return this.gridSources[`${this.selectedTab}`];\n  }\n};\n\n\n/**\n * Returns if a row of the currently active grid is selected?\n * @export\n * @return {boolean} Is one selected?\n */\nexports.Controller_.prototype.isOneSelected = function() {\n  const source = this.getActiveGridSource();\n  if (source === null || source.configuration === null) {\n    return false;\n  } else {\n    return source.configuration.getSelectedCount() > 0;\n  }\n};\n\n\n/**\n * Returns the number of selected rows of the currently active grid.\n * @export\n * @return {number} The number of selected rows.\n */\nexports.Controller_.prototype.getSelectedRowCount = function() {\n  const source = this.getActiveGridSource();\n  if (source === null || source.configuration === null) {\n    return 0;\n  } else {\n    return source.configuration.getSelectedCount();\n  }\n};\n\n\n/**\n * Select all rows of the currently active grid.\n * @export\n */\nexports.Controller_.prototype.selectAll = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    source.configuration.selectAll();\n  }\n};\n\n\n/**\n * Deselect all rows of the currently active grid.\n * @export\n */\nexports.Controller_.prototype.unselectAll = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    source.configuration.unselectAll();\n  }\n};\n\n\n/**\n * Invert the selection of the currently active grid.\n * @export\n */\nexports.Controller_.prototype.invertSelection = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    source.configuration.invertSelection();\n  }\n};\n\n\n/**\n * Zoom to the selected features.\n * @export\n */\nexports.Controller_.prototype.zoomToSelection = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    const extent = olExtent.createEmpty();\n    this.highlightFeatures_.forEach((feature) => {\n      olExtent.extend(extent, feature.getGeometry().getExtent());\n    });\n    const size = this.map_.getSize();\n    googAsserts.assert(size !== undefined);\n    const maxZoom = this.maxRecenterZoom;\n    this.map_.getView().fit(extent, {size, maxZoom});\n  }\n};\n\n\n/**\n * Start a CSV download for the selected features.\n * @export\n */\nexports.Controller_.prototype.downloadCsv = function() {\n  const source = this.getActiveGridSource();\n  if (source !== null) {\n    const columnDefs = source.configuration.columnDefs;\n    googAsserts.assert(columnDefs !== undefined);\n    const selectedRows = source.configuration.getSelectedRows();\n\n    this.ngeoCsvDownload_.startDownload(\n      selectedRows, columnDefs, this.filename_);\n  }\n};\n\n\nexports.controller('GmfDisplayquerygridController',\n  exports.Controller_);\n\n\nexport default exports;\n","/**\n * @module gmfapp.displayquerygrid\n */\nconst exports = {};\n\nimport './displayquerygrid.css';\nimport gmfDatasourceManager from 'gmf/datasource/Manager.js';\n\nimport gmfLayertreeComponent from 'gmf/layertree/component.js';\n\n/** @suppress {extraRequire} */\nimport gmfMapComponent from 'gmf/map/component.js';\n\n/** @suppress {extraRequire} */\nimport gmfQueryGridComponent from 'gmf/query/gridComponent.js';\n\nimport gmfThemeThemes from 'gmf/theme/Themes.js';\nimport ngeoGridModule from 'ngeo/grid/module.js';\nimport ngeoMapModule from 'ngeo/map/module.js';\nimport ngeoMiscBtnComponent from 'ngeo/misc/btnComponent.js';\nimport EPSG21781 from 'ngeo/proj/EPSG21781.js';\nimport ngeoQueryBboxQueryComponent from 'ngeo/query/bboxQueryComponent.js';\nimport ngeoQueryMapQueryComponent from 'ngeo/query/mapQueryComponent.js';\nimport olMap from 'ol/Map.js';\nimport olView from 'ol/View.js';\nimport olLayerTile from 'ol/layer/Tile.js';\nimport olSourceOSM from 'ol/source/OSM.js';\nimport olStyleCircle from 'ol/style/Circle.js';\nimport olStyleFill from 'ol/style/Fill.js';\nimport olStyleStroke from 'ol/style/Stroke.js';\nimport olStyleStyle from 'ol/style/Style.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('gmfapp', [\n  'gettext',\n  gmfDatasourceManager.module.name,\n  gmfLayertreeComponent.name,\n  gmfMapComponent.name,\n  gmfQueryGridComponent.name,\n  gmfThemeThemes.module.name,\n  ngeoGridModule.name,\n  ngeoMapModule.name, // for ngeo.map.FeatureOverlay, perhaps remove me\n  ngeoMiscBtnComponent.name,\n  ngeoQueryBboxQueryComponent.name,\n  ngeoQueryMapQueryComponent.name,\n]);\n\n\nexports.module.constant('ngeoQueryOptions', {\n  'limit': 20,\n  'queryCountFirst': true\n});\n\n\nexports.module.constant(\n  'gmfTreeUrl',\n  'https://geomapfish-demo.camptocamp.com/2.3/wsgi/themes?' +\n        'version=2&background=background');\n\nexports.module.constant('defaultTheme', 'Demo');\nexports.module.constant('angularLocaleScript', '../build/angular-locale_{{locale}}.js');\n\n\n/**\n * Demo, NOT USED.\n * A sample component to display the result.\n *\n * @type {!angular.Component}\n */\nexports.queryresultComponent = {\n  controller: 'gmfappQueryresultController',\n  template: require('./partials/queryresult.html')\n};\n\nexports.module.component('gmfappQueryresult', exports.queryresultComponent);\n\n\n/**\n * Demo, NOT USED.\n * @param {ngeox.QueryResult} ngeoQueryResult Query service.\n * @constructor\n * @ngInject\n */\nexports.QueryresultController = function(ngeoQueryResult) {\n\n  /**\n   * @type {ngeox.QueryResult}\n   * @export\n   */\n  this.result = ngeoQueryResult;\n\n};\n\n\nexports.module.controller('gmfappQueryresultController', exports.QueryresultController);\n\n\n/**\n * @constructor\n * @param {gmf.theme.Themes} gmfThemes The gmf themes service.\n * @param {gmf.datasource.Manager} gmfDataSourcesManager The gmf\n *     data sources manager service.\n * @param {ngeo.map.FeatureOverlayMgr} ngeoFeatureOverlayMgr The ngeo feature\n *   overlay manager service.\n * @ngInject\n */\nexports.MainController = function(gmfThemes, gmfDataSourcesManager,\n  ngeoFeatureOverlayMgr) {\n\n  gmfThemes.loadThemes();\n\n  const fill = new olStyleFill({color: [255, 170, 0, 0.6]});\n  const stroke = new olStyleStroke({color: [255, 170, 0, 1], width: 2});\n\n  /**\n   * FeatureStyle used by the displayquerygrid directive\n   * @type {ol.style.Style}\n   * @export\n   */\n  this.featureStyle = new olStyleStyle({\n    fill: fill,\n    image: new olStyleCircle({\n      fill: fill,\n      radius: 5,\n      stroke: stroke\n    }),\n    stroke: stroke\n  });\n\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map = new olMap({\n    layers: [\n      new olLayerTile({\n        source: new olSourceOSM()\n      })\n    ],\n    view: new olView({\n      projection: EPSG21781,\n      resolutions: [200, 100, 50, 20, 10, 5, 2.5, 2, 1, 0.5],\n      center: [537635, 152640],\n      zoom: 3\n    })\n  });\n\n  // Init the datasources with our map.\n  gmfDataSourcesManager.setDatasourceMap(this.map);\n\n  /**\n   * @type {Array.<Object>|undefined}\n   * export\n   */\n  this.themes = undefined;\n\n  /**\n   * @type {Object|undefined}\n   * @export\n   */\n  this.treeSource = undefined;\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.queryActive = true;\n\n  /**\n   * @type {boolean}\n   * @export\n   */\n  this.queryGridActive = true;\n\n  gmfThemes.getThemesObject().then((themes) => {\n    if (themes) {\n      this.themes = themes;\n      this.treeSource = themes[3];\n    }\n  });\n\n  ngeoFeatureOverlayMgr.init(this.map);\n};\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n"],"sourceRoot":""}