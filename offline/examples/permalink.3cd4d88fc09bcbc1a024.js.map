{"version":3,"sources":["webpack:///./node_modules/openlayers/src/ol/source/OSM.js","webpack:///./examples/permalink.js","webpack:///./src/format/FeatureHash.js","webpack:///./src/format/FeatureHashStyleType.js","webpack:///./node_modules/openlayers/src/ol/source/XYZ.js"],"names":["__WEBPACK_IMPORTED_MODULE_1__source_XYZ_js__","__webpack_require__","OSM","opt_options","options","attributions","undefined","ATTRIBUTION","crossOrigin","url","call","this","cacheSize","opaque","maxZoom","reprojectionErrorThreshold","tileLoadFunction","wrapX","Object","__WEBPACK_IMPORTED_MODULE_0__index_js__","__webpack_exports__","exports","module","angular","ngeoBase","name","ngeoMapModule","ngeoMiscDebounce","ngeoStatemanagerModule","mapComponent","controller","bindings","map","template","component","MapComponentController","ngeoLocation","ngeoDebounce","ngeoLocation_","ngeoDebounce_","prototype","$onInit","_this","view","getView","zoom","getParam","x","y","center","setCenter","setZoom","updateParams","z","Math","round","on","e","getCenter","params","getZoom","drawComponent","layer","DrawComponentController","$scope","scope_","featureSeq_","interaction","_this2","vectorSource","getSource","olInteractionDraw","type","source","setActive","addInteraction","ngeoMiscDecorate","feature","set","fhFormat","ngeoFormatFeatureHash","setStyle","olStyleStyle","stroke","olStyleStroke","color","width","features","getFeatures","encodedFeatures","writeFeatures","$applyAsync","readFeatures","length","addFeatures","clearLayer","clear","deleteParam","MainController","olMap","layers","olLayerTile","olSourceOSM","olSourceVector","vectorLayer","olLayerVector","setMap","olBase","olColor","olArray","olFormatTextFeature","accuracy_","accuracy","ACCURACY_","encodeStyles_","encodeStyles","propertiesFunction_","properties","defaultPropertiesFunction_","setStyle_","prevX_","prevY_","LegacyProperties_","propertiesType","inherits","StyleTypes_","LineString","ngeoFormatFeatureHashStyleType","LINE_STRING","Point","POINT","Polygon","POLYGON","MultiLineString","MultiPoint","MultiPolygon","readFeature","readGeometry","writeFeature","writeGeometry","CHAR64_","getProperties","encodeSignedNumber_","num","signedNum","encodeNumber_","encodedNumber","charAt","styles","geometryType","encodedStyles","styleType","googAsserts","assert","i","style","fillStyle","getFill","imageStyle","getImage","strokeStyle","getStroke","textStyle","getText","encodeStylePolygon_","encodeStyleLine_","encodeStylePoint_","encodeStyleText_","encodeStyleStroke_","olStyleCircle","radius","getRadius","push","encodeURIComponent","encodeStyleFill_","opt_propertyName","propertyName","fillColor","getColor","Array","isArray","fillColorRgba","asArray","fillColorHex","ngeoUtils","rgbArrayToHex","strokeColor","strokeColorRgba","strokeColorHex","strokeWidth","getWidth","fontStyle","getFont","font","split","readLineStringGeometry_","text","substring","flatCoordinates","decodeCoordinates_","lineString","olGeomLineString","setFlatCoordinates","olGeomGeometryLayout","XY","readMultiLineStringGeometry_","ends","lineStrings","ii","multiLineString","olGeomMultiLineString","readPointGeometry_","point","olGeomPoint","readMultiPointGeometry_","multiPoint","olGeomMultiPoint","readPolygonGeometry_","rings","end","polygon","olGeomPolygon","readMultiPolygonGeometry_","endss","polygons","j","jj","multipolygon","olGeomMultiPolygon","setStyleInFeature_","getStyleProperties_","fontSize","fontColor","pointRadius","olStyleFill","fill","olStyleText","image","setStyleProperties_","geometry","getGeometry","ngeoFormatFeatureProperties","IS_TEXT","parseFloat","indexOf","clone","key","value","setProperties","castValue_","numProperties","ANGLE","OPACITY","SIZE","STROKE","boolProperties","IS_CIRCLE","IS_RECTANGLE","SHOW_MEASURE","SHOW_LABEL","includes","parts","keyVal","decodeURIComponent","val","writeLineStringGeometry_","assertInstanceof","getFlatCoordinates","stride","getStride","encodeCoordinates_","writeMultiLineStringGeometry_","getEnds","lineStringCount","offset","textArray","join","writePointGeometry_","writeMultiPointGeometry_","encodeRings_","linearRingCount","writePolygonGeometry_","writeMultiPolygonGeometry_","getEndss","polygonCount","GEOMETRY_READERS_","P","L","A","l","p","a","GEOMETRY_WRITERS_","opt_flatCoordinates","len","index","b","shift","result","dx","dy","encodedCoordinates","floor","readFeatureFromText","splitIndex","geometryText","readGeometryFromText","olFeature","attributesAndStylesText","attributesText","stylesText","readFeaturesFromText","geometryReader","writeFeatureText","encodedParts","encodedGeometry","writeGeometryText","encodedProperties","propFunction","getGeometryName","encoded","replace","toString","apply","styleFunction","getStyleFunction","getType","writeFeaturesText","geometryWriter","transformedGeometry","olFormatFeature","transformWithOptions","__WEBPACK_IMPORTED_MODULE_2__tilegrid_js__","XYZ","projection","tileGrid","createXYZ","extent","extentFromProjection","minZoom","tileSize","__WEBPACK_IMPORTED_MODULE_1__source_TileImage_js__","tilePixelRatio","tileUrlFunction","urls","transition"],"mappings":"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","file":"permalink.3cd4d88fc09bcbc1a024.js","sourcesContent":["/**\n * @module ol/source/OSM\n */\nimport {inherits} from '../index.js';\nimport XYZ from '../source/XYZ.js';\n\n/**\n * @classdesc\n * Layer source for the OpenStreetMap tile server.\n *\n * @constructor\n * @extends {ol.source.XYZ}\n * @param {olx.source.OSMOptions=} opt_options Open Street Map options.\n * @api\n */\nconst OSM = function(opt_options) {\n\n  const options = opt_options || {};\n\n  let attributions;\n  if (options.attributions !== undefined) {\n    attributions = options.attributions;\n  } else {\n    attributions = [OSM.ATTRIBUTION];\n  }\n\n  const crossOrigin = options.crossOrigin !== undefined ?\n    options.crossOrigin : 'anonymous';\n\n  const url = options.url !== undefined ?\n    options.url : 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n  XYZ.call(this, {\n    attributions: attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: crossOrigin,\n    opaque: options.opaque !== undefined ? options.opaque : true,\n    maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileLoadFunction: options.tileLoadFunction,\n    url: url,\n    wrapX: options.wrapX\n  });\n\n};\n\ninherits(OSM, XYZ);\n\n\n/**\n * The attribution containing a link to the OpenStreetMap Copyright and License\n * page.\n * @const\n * @type {string}\n * @api\n */\nOSM.ATTRIBUTION = '&copy; ' +\n      '<a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> ' +\n      'contributors.';\nexport default OSM;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/OSM.js\n// module id = 5\n// module chunks = 0 1 2 3 4 5 6 8 9 10 11 12 13 14 15 17 18 19 20 22 23 24 25 26 27 28","/**\n * @module app.permalink\n */\nconst exports = {};\n\nimport './permalink.css';\nimport './common_dependencies.js';\nimport ngeoBase from 'ngeo/index.js';\n\nimport ngeoFormatFeatureHash from 'ngeo/format/FeatureHash.js';\nimport ngeoMapModule from 'ngeo/map/module.js';\nimport ngeoMiscDebounce from 'ngeo/misc/debounce.js';\nimport ngeoMiscDecorate from 'ngeo/misc/decorate.js';\nimport ngeoStatemanagerModule from 'ngeo/statemanager/module.js';\nimport olMap from 'ol/Map.js';\nimport olGeomGeometryType from 'ol/geom/GeometryType.js';\nimport olInteractionDraw from 'ol/interaction/Draw.js';\nimport olLayerTile from 'ol/layer/Tile.js';\nimport olLayerVector from 'ol/layer/Vector.js';\nimport olSourceOSM from 'ol/source/OSM.js';\nimport olSourceVector from 'ol/source/Vector.js';\nimport olStyleStroke from 'ol/style/Stroke.js';\nimport olStyleStyle from 'ol/style/Style.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('app', [\n  ngeoBase.module.name,\n  ngeoMapModule.name,\n  ngeoMiscDebounce.name,\n  ngeoStatemanagerModule.name,\n]);\n\n/**\n * An application-specific map component that updates the URL in the browser\n * address bar when the map view changes. It also sets the initial view based\n * on the URL query params at init time.\n *\n * This component gets a reference to the map instance through the \"app-map\"\n * attribute.\n *\n * @type {!angular.Component}\n */\nexports.mapComponent = {\n  controller: 'AppMapController as ctrl',\n  bindings: {\n    'map': '=appMap'\n  },\n  template: '<div ngeo-map=ctrl.map></div>'\n};\n\n\nexports.module.component('appMap', exports.mapComponent);\n\n\n/**\n * @param {ngeo.statemanager.Location} ngeoLocation ngeo Location service.\n * @param {ngeox.miscDebounce} ngeoDebounce ngeo Debounce factory.\n * @constructor\n * @ngInject\n */\nexports.MapComponentController = function(ngeoLocation, ngeoDebounce) {\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map;\n\n  /**\n   * @type {ngeo.statemanager.Location}\n   * @private\n   */\n  this.ngeoLocation_ = ngeoLocation;\n\n  /**\n   * @type {ngeox.miscDebounce}\n   * @private\n   */\n  this.ngeoDebounce_ = ngeoDebounce;\n};\n\nexports.module.controller('AppMapController', exports.MapComponentController);\n\nexports.MapComponentController.prototype.$onInit = function() {\n  const view = this.map.getView();\n\n  let zoom = this.ngeoLocation_.getParam('z');\n  zoom = zoom !== undefined ? +zoom : 4;\n\n  const x = this.ngeoLocation_.getParam('x');\n  const y = this.ngeoLocation_.getParam('y');\n  const center = (x !== undefined) && (y !== undefined) ?\n    [+x, +y] : [0, 0];\n\n  view.setCenter(center);\n  view.setZoom(zoom);\n\n  this.ngeoLocation_.updateParams({\n    'z': zoom,\n    'x': Math.round(center[0]),\n    'y': Math.round(center[1])\n  });\n\n  view.on('propertychange',\n    this.ngeoDebounce_(\n      /**\n       * @param {ol.Object.Event} e Object event.\n       */\n      (e) => {\n        const center = view.getCenter();\n        const params = {\n          'z': view.getZoom(),\n          'x': Math.round(center[0]),\n          'y': Math.round(center[1])\n        };\n        this.ngeoLocation_.updateParams(params);\n      }, 300, /* invokeApply */ true));\n};\n\n/**\n * A draw component that adds a simple draw tool.\n *\n * @type {!angular.Component}\n */\nexports.drawComponent = {\n  controller: 'AppDrawController as ctrl',\n  bindings: {\n    'map': '=appDrawMap',\n    'layer': '=appDrawLayer'\n  },\n  template:\n      '<label>Enable drawing:' +\n      '<input type=\"checkbox\" ng-model=\"ctrl.interaction.active\" />' +\n      '</label><br>' +\n      '<button ng-click=\"ctrl.clearLayer()\">Clear layer</button>'\n};\n\n\nexports.module.component('appDraw', exports.drawComponent);\n\n\n/**\n * @param {!angular.Scope} $scope Scope.\n * @param {!ngeo.statemanager.Location} ngeoLocation ngeo Location service.\n * @constructor\n * @export\n * @ngInject\n */\nexports.DrawComponentController = function($scope, ngeoLocation) {\n\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map;\n\n  /**\n   * @type {ol.layer.Vector}\n   */\n  this.layer;\n\n  /**\n   * @type {!ngeo.statemanager.Location}\n   * @private\n   */\n  this.ngeoLocation_ = ngeoLocation;\n\n  /**\n   * @type {!angular.Scope}\n   * @private\n   */\n  this.scope_ = $scope;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.featureSeq_ = 0;\n\n  /**\n   * @type {ol.interaction.Draw}\n   * @export\n   */\n  this.interaction;\n};\n\nexports.DrawComponentController.prototype.$onInit = function() {\n  const vectorSource = this.layer.getSource();\n\n  this.interaction = new olInteractionDraw({\n    type: /** @type {ol.geom.GeometryType} */ ('LineString'),\n    source: vectorSource\n  });\n\n  this.interaction.setActive(false);\n  this.map.addInteraction(this.interaction);\n  ngeoMiscDecorate.interaction(this.interaction);\n\n  this.interaction.on('drawend', function(e) {\n    e.feature.set('id', ++this.featureSeq_);\n  }, this);\n\n  // Deal with the encoding and decoding of features in the URL.\n\n  const fhFormat = new ngeoFormatFeatureHash();\n\n  vectorSource.on('addfeature', (e) => {\n    const feature = e.feature;\n    feature.setStyle(new olStyleStyle({\n      stroke: new olStyleStroke({\n        color: [255, 0, 0, 1],\n        width: 2\n      })\n    }));\n    const features = vectorSource.getFeatures();\n    const encodedFeatures = fhFormat.writeFeatures(features);\n    this.scope_.$applyAsync(() => {\n      this.ngeoLocation_.updateParams({'features': encodedFeatures});\n    });\n  });\n\n  const encodedFeatures = this.ngeoLocation_.getParam('features');\n  if (encodedFeatures !== undefined) {\n    const features = fhFormat.readFeatures(encodedFeatures);\n    this.featureSeq_ = features.length;\n    vectorSource.addFeatures(features);\n  }\n};\n\n\n/**\n * Clear the vector layer.\n * @export\n */\nexports.DrawComponentController.prototype.clearLayer = function() {\n  this.layer.getSource().clear(true);\n  this.featureSeq_ = 0;\n  this.ngeoLocation_.deleteParam('features');\n};\n\nexports.module.controller('AppDrawController', exports.DrawComponentController);\n\n\n/**\n * @constructor\n */\nexports.MainController = function() {\n\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map = new olMap({\n    layers: [\n      new olLayerTile({\n        source: new olSourceOSM()\n      })\n    ]\n  });\n\n\n  const vectorSource = new olSourceVector();\n\n  /**\n   * @type {ol.layer.Vector}\n   * @export\n   */\n  this.vectorLayer = new olLayerVector({\n    source: vectorSource\n  });\n\n  // Use vectorLayer.setMap(map) rather than map.addLayer(vectorLayer). This\n  // makes the vector layer \"unmanaged\", meaning that it is always on top.\n  this.vectorLayer.setMap(this.map);\n\n};\n\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./examples/permalink.js","/**\n * @module ngeo.format.FeatureHash\n */\nimport googAsserts from 'goog/asserts.js';\nimport ngeoFormatFeatureProperties from 'ngeo/format/FeatureProperties.js';\nimport ngeoFormatFeatureHashStyleType from 'ngeo/format/FeatureHashStyleType.js';\nimport ngeoUtils from 'ngeo/utils.js';\nimport * as olBase from 'ol/index.js';\nimport olFeature from 'ol/Feature.js';\nimport * as olColor from 'ol/color.js';\nimport * as olArray from 'ol/array.js';\nimport olFormatFeature from 'ol/format/Feature.js';\nimport olFormatTextFeature from 'ol/format/TextFeature.js';\nimport olGeomGeometryLayout from 'ol/geom/GeometryLayout.js';\nimport olGeomGeometryType from 'ol/geom/GeometryType.js';\nimport olGeomLineString from 'ol/geom/LineString.js';\nimport olGeomMultiLineString from 'ol/geom/MultiLineString.js';\nimport olGeomMultiPoint from 'ol/geom/MultiPoint.js';\nimport olGeomMultiPolygon from 'ol/geom/MultiPolygon.js';\nimport olGeomPoint from 'ol/geom/Point.js';\nimport olGeomPolygon from 'ol/geom/Polygon.js';\nimport olStyleCircle from 'ol/style/Circle.js';\nimport olStyleFill from 'ol/style/Fill.js';\nimport olStyleStroke from 'ol/style/Stroke.js';\nimport olStyleStyle from 'ol/style/Style.js';\nimport olStyleText from 'ol/style/Text.js';\n\n/**\n * @classdesc\n * Provide an OpenLayers format for encoding and decoding features for use\n * in permalinks.\n *\n * The code is based on Stéphane Brunner's URLCompressed format.\n *\n * TODOs:\n *\n * - The OpenLayers-URLCompressed format has options where the user\n *   can define attribute and style transformers. This is currently\n *   not supported by this format.\n * - The OpenLayers-URLCompressed format has a \"simplify\" option.\n *   This format does not have it.\n * - ol.style.Icon styles are not supported.\n * - Transformation of coordinates during encoding and decoding is\n *   not supported.\n *\n * @see https://github.com/sbrunner/OpenLayers-URLCompressed\n * @constructor\n * @struct\n * @extends {ol.format.TextFeature}\n * @param {ngeox.format.FeatureHashOptions=} opt_options Options.\n */\nconst exports = function(opt_options) {\n\n  olFormatTextFeature.call(this);\n\n  const options = opt_options !== undefined ? opt_options : {};\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.accuracy_ = options.accuracy !== undefined ?\n    options.accuracy : exports.ACCURACY_;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.encodeStyles_ = options.encodeStyles !== undefined ?\n    options.encodeStyles : true;\n\n  /**\n   * @type {function(ol.Feature):Object.<string, (string|number)>}\n   * @private\n   */\n  this.propertiesFunction_ = options.properties !== undefined ?\n    options.properties : exports.defaultPropertiesFunction_;\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.setStyle_ = options.setStyle !== undefined ? options.setStyle : true;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.prevX_ = 0;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.prevY_ = 0;\n\n  /**\n   * @type {Object.<string, string>}\n   * @private\n   */\n  exports.LegacyProperties_ = (options.propertiesType !== undefined) &&  options.propertiesType;\n\n};\n\nolBase.inherits(exports, olFormatTextFeature);\n\n\n/**\n * @type {Object.<ol.geom.GeometryType, ngeo.format.FeatureHashStyleType>}\n * @private\n */\nexports.StyleTypes_ = {\n  'LineString': ngeoFormatFeatureHashStyleType.LINE_STRING,\n  'Point': ngeoFormatFeatureHashStyleType.POINT,\n  'Polygon': ngeoFormatFeatureHashStyleType.POLYGON,\n  'MultiLineString': ngeoFormatFeatureHashStyleType.LINE_STRING,\n  'MultiPoint': ngeoFormatFeatureHashStyleType.POINT,\n  'MultiPolygon': ngeoFormatFeatureHashStyleType.POLYGON\n};\n\n/**\n * @type {Object.<string, string>}\n * @private\n */\nexports.LegacyProperties_ = {};\n\n\n/**\n * @inheritDoc\n */\nexports.prototype.readFeature;\n\n\n/**\n * @inheritDoc\n */\nexports.prototype.readFeatures;\n\n\n/**\n * @inheritDoc\n */\nexports.prototype.readGeometry;\n\n\n/**\n * @inheritDoc\n */\nexports.prototype.writeFeature;\n\n\n/**\n * @inheritDoc\n */\nexports.prototype.writeFeatures;\n\n\n/**\n * @inheritDoc\n */\nexports.prototype.writeGeometry;\n\n\n/**\n * Characters used to encode the coordinates. The characters \"~\", \"'\", \"(\"\n * and \")\" are not part of this character set, and used as separators (for\n * example to separate the coordinates from the feature properties).\n * @const\n * @private\n */\nexports.CHAR64_ =\n    '.-_!*ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghjkmnpqrstuvwxyz';\n\n\n/**\n * @const\n * @private\n */\nexports.ACCURACY_ = 0.1;\n\n\n/**\n * Get features's properties.\n * @param {ol.Feature} feature Feature.\n * @return {Object.<string, (string|number)>} The feature properties to\n * serialize.\n * @private\n */\nexports.defaultPropertiesFunction_ = function(feature) {\n  return feature.getProperties();\n};\n\n\n/**\n * Sign then encode a number.\n * @param {number} num Number.\n * @return {string} String.\n * @private\n */\nexports.encodeSignedNumber_ = function(num) {\n  let signedNum = num << 1;\n  if (num < 0) {\n    signedNum = ~(signedNum);\n  }\n  return exports.encodeNumber_(signedNum);\n};\n\n\n/**\n * Transform a number into a logical sequence of characters.\n * @param {number} num Number.\n * @return {string} String.\n * @private\n */\nexports.encodeNumber_ = function(num) {\n  let encodedNumber = '';\n  while (num >= 0x20) {\n    encodedNumber += exports.CHAR64_.charAt(\n      0x20 | (num & 0x1f));\n    num >>= 5;\n  }\n  encodedNumber += exports.CHAR64_.charAt(num);\n  return encodedNumber;\n};\n\n\n/**\n * For a type of geometry, transforms an array of {@link ol.style.Style} into\n * a logical sequence of characters and put the result into the given encoded\n * styles's array.\n * @param {Array.<ol.style.Style>} styles Styles.\n * @param {ol.geom.GeometryType} geometryType Geometry type.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @private\n */\nexports.encodeStyles_ = function(styles, geometryType, encodedStyles) {\n  const styleType = exports.StyleTypes_[geometryType];\n  googAsserts.assert(styleType !== undefined);\n  for (let i = 0; i < styles.length; ++i) {\n    const style = styles[i];\n    const fillStyle = style.getFill();\n    const imageStyle = style.getImage();\n    const strokeStyle = style.getStroke();\n    const textStyle = style.getText();\n    if (styleType == ngeoFormatFeatureHashStyleType.POLYGON) {\n      if (fillStyle !== null) {\n        exports.encodeStylePolygon_(\n          fillStyle, strokeStyle, encodedStyles);\n      }\n    } else if (styleType == ngeoFormatFeatureHashStyleType.LINE_STRING) {\n      if (strokeStyle !== null) {\n        exports.encodeStyleLine_(strokeStyle, encodedStyles);\n      }\n    } else if (styleType == ngeoFormatFeatureHashStyleType.POINT) {\n      if (imageStyle !== null) {\n        exports.encodeStylePoint_(imageStyle, encodedStyles);\n      }\n    }\n    if (textStyle !== null) {\n      exports.encodeStyleText_(textStyle, encodedStyles);\n    }\n  }\n};\n\n\n/**\n * Transform an {@link ol.style.Stroke} into a logical sequence of\n * characters and put the result into the given encoded styles's array.\n * @param {ol.style.Stroke} strokeStyle Stroke style.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @private\n */\nexports.encodeStyleLine_ = function(strokeStyle, encodedStyles) {\n  exports.encodeStyleStroke_(strokeStyle, encodedStyles);\n};\n\n\n/**\n * Transform an {@link ol.style.Circle} into a logical sequence of\n * characters and put the result into the given encoded styles's array.\n * @param {ol.style.Image} imageStyle Image style.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @private\n */\nexports.encodeStylePoint_ = function(imageStyle, encodedStyles) {\n  if (imageStyle instanceof olStyleCircle) {\n    const radius = imageStyle.getRadius();\n    if (encodedStyles.length > 0) {\n      encodedStyles.push('\\'');\n    }\n    encodedStyles.push(encodeURIComponent(`pointRadius*${radius}`));\n    const fillStyle = imageStyle.getFill();\n    if (fillStyle !== null) {\n      exports.encodeStyleFill_(fillStyle, encodedStyles);\n    }\n    const strokeStyle = imageStyle.getStroke();\n    if (strokeStyle !== null) {\n      exports.encodeStyleStroke_(strokeStyle, encodedStyles);\n    }\n  }\n};\n\n\n/**\n * Transform an {@link ol.style.Fill} and an {@link ol.style.Stroke} into\n * a logical sequence of characters and put the result into the given\n * encoded styles's array.\n * @param {ol.style.Fill} fillStyle Fill style.\n * @param {ol.style.Stroke} strokeStyle Stroke style.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @private\n */\nexports.encodeStylePolygon_ = function(fillStyle, strokeStyle, encodedStyles) {\n  exports.encodeStyleFill_(fillStyle, encodedStyles);\n  if (strokeStyle !== null) {\n    exports.encodeStyleStroke_(strokeStyle, encodedStyles);\n  }\n};\n\n\n/**\n * Transform an {@link ol.style.Fill} and optionally its properties into\n * a logical sequence of characters and put the result into the given encoded\n * styles's array.\n * @param {ol.style.Fill} fillStyle Fill style.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @param {string=} opt_propertyName Property name.\n * @private\n */\nexports.encodeStyleFill_ = function(fillStyle, encodedStyles, opt_propertyName) {\n  const propertyName = opt_propertyName !== undefined ?\n    opt_propertyName : 'fillColor';\n  const fillColor = fillStyle.getColor();\n  if (fillColor !== null) {\n    googAsserts.assert(Array.isArray(fillColor), 'only supporting fill colors');\n    const fillColorRgba = olColor.asArray(fillColor);\n    googAsserts.assert(Array.isArray(fillColorRgba), 'fill color must be an array');\n    const fillColorHex = ngeoUtils.rgbArrayToHex(fillColorRgba);\n    if (encodedStyles.length > 0) {\n      encodedStyles.push('\\'');\n    }\n    encodedStyles.push(\n      encodeURIComponent(`${propertyName}*${fillColorHex}`));\n  }\n};\n\n\n/**\n * Transform an {@link ol.style.Stroke} into a logical sequence of\n * characters and put the result into the given encoded styles's array.\n * @param {ol.style.Stroke} strokeStyle Stroke style.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @private\n */\nexports.encodeStyleStroke_ = function(strokeStyle, encodedStyles) {\n  const strokeColor = strokeStyle.getColor();\n  if (strokeColor !== null) {\n    googAsserts.assert(Array.isArray(strokeColor));\n    const strokeColorRgba = olColor.asArray(strokeColor);\n    googAsserts.assert(Array.isArray(strokeColorRgba), 'only supporting stroke colors');\n    const strokeColorHex = ngeoUtils.rgbArrayToHex(strokeColorRgba);\n    if (encodedStyles.length > 0) {\n      encodedStyles.push('\\'');\n    }\n    encodedStyles.push(encodeURIComponent(`strokeColor*${strokeColorHex}`));\n  }\n  const strokeWidth = strokeStyle.getWidth();\n  if (strokeWidth !== undefined) {\n    if (encodedStyles.length > 0) {\n      encodedStyles.push('\\'');\n    }\n    encodedStyles.push(encodeURIComponent(`strokeWidth*${strokeWidth}`));\n  }\n};\n\n\n/**\n * Transform an {@link ol.style.Text} into a logical sequence of characters and\n * put the result into the given encoded styles's array.\n * @param {ol.style.Text} textStyle Text style.\n * @param {Array.<string>} encodedStyles Encoded styles array.\n * @private\n */\nexports.encodeStyleText_ = function(textStyle, encodedStyles) {\n  const fontStyle = textStyle.getFont();\n  if (fontStyle !== undefined) {\n    const font = fontStyle.split(' ');\n    if (font.length >= 3) {\n      if (encodedStyles.length > 0) {\n        encodedStyles.push('\\'');\n      }\n      encodedStyles.push(encodeURIComponent(`fontSize*${font[1]}`));\n    }\n  }\n  const fillStyle = textStyle.getFill();\n  if (fillStyle !== null) {\n    exports.encodeStyleFill_(\n      fillStyle, encodedStyles, 'fontColor');\n  }\n};\n\n\n/**\n * Read a logical sequence of characters and return a corresponding\n * {@link ol.geom.LineString}.\n * @param {string} text Text.\n * @return {ol.geom.LineString} Line string.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.readLineStringGeometry_ = function(text) {\n  googAsserts.assert(text.substring(0, 2) === 'l(');\n  googAsserts.assert(text[text.length - 1] == ')');\n  text = text.substring(2, text.length - 1);\n  const flatCoordinates = this.decodeCoordinates_(text);\n  const lineString = new olGeomLineString(null);\n  lineString.setFlatCoordinates(olGeomGeometryLayout.XY, flatCoordinates);\n  return lineString;\n};\n\n\n/**\n * Read a logical sequence of characters and return a corresponding\n * {@link ol.geom.MultiLineString}.\n * @param {string} text Text.\n * @return {ol.geom.MultiLineString} Line string.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.readMultiLineStringGeometry_ = function(text) {\n  googAsserts.assert(text.substring(0, 2) === 'L(');\n  googAsserts.assert(text[text.length - 1] == ')');\n  text = text.substring(2, text.length - 1);\n  let flatCoordinates = [];\n  const ends = [];\n  const lineStrings = text.split('\\'');\n  for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n    flatCoordinates = this.decodeCoordinates_(lineStrings[i], flatCoordinates);\n    ends[i] = flatCoordinates.length;\n  }\n  const multiLineString = new olGeomMultiLineString(null);\n  multiLineString.setFlatCoordinates(\n    olGeomGeometryLayout.XY, flatCoordinates, ends);\n  return multiLineString;\n};\n\n\n/**\n * Read a logical sequence of characters and return a corresponding\n * {@link ol.geom.Point}.\n * @param {string} text Text.\n * @return {ol.geom.Point} Point.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.readPointGeometry_ = function(text) {\n  googAsserts.assert(text.substring(0, 2) === 'p(');\n  googAsserts.assert(text[text.length - 1] == ')');\n  text = text.substring(2, text.length - 1);\n  const flatCoordinates = this.decodeCoordinates_(text);\n  googAsserts.assert(flatCoordinates.length === 2);\n  const point = new olGeomPoint(null);\n  point.setFlatCoordinates(olGeomGeometryLayout.XY, flatCoordinates);\n  return point;\n};\n\n\n/**\n * Read a logical sequence of characters and return a corresponding\n * {@link ol.geom.MultiPoint}.\n * @param {string} text Text.\n * @return {ol.geom.MultiPoint} MultiPoint.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.readMultiPointGeometry_ = function(text) {\n  googAsserts.assert(text.substring(0, 2) === 'P(');\n  googAsserts.assert(text[text.length - 1] == ')');\n  text = text.substring(2, text.length - 1);\n  const flatCoordinates = this.decodeCoordinates_(text);\n  const multiPoint = new olGeomMultiPoint(null);\n  multiPoint.setFlatCoordinates(olGeomGeometryLayout.XY, flatCoordinates);\n  return multiPoint;\n};\n\n\n/**\n * Read a logical sequence of characters and return a corresponding\n * {@link ol.geom.Polygon}.\n * @param {string} text Text.\n * @return {ol.geom.Polygon} Polygon.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.readPolygonGeometry_ = function(text) {\n  googAsserts.assert(text.substring(0, 2) === 'a(');\n  googAsserts.assert(text[text.length - 1] == ')');\n  text = text.substring(2, text.length - 1);\n  let flatCoordinates = [];\n  const ends = [];\n  const rings = text.split('\\'');\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\n    flatCoordinates = this.decodeCoordinates_(rings[i], flatCoordinates);\n    let end = flatCoordinates.length;\n    if (i === 0) {\n      flatCoordinates[end++] = flatCoordinates[0];\n      flatCoordinates[end++] = flatCoordinates[1];\n    } else {\n      flatCoordinates[end++] = flatCoordinates[ends[i - 1]];\n      flatCoordinates[end++] = flatCoordinates[ends[i - 1] + 1];\n    }\n    ends[i] = end;\n  }\n  const polygon = new olGeomPolygon(null);\n  polygon.setFlatCoordinates(olGeomGeometryLayout.XY, flatCoordinates, ends);\n  return polygon;\n};\n\n\n/**\n * Read a logical sequence of characters and return a corresponding\n * {@link ol.geom.MultiPolygon}.\n * @param {string} text Text.\n * @return {ol.geom.MultiPolygon} MultiPolygon.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.readMultiPolygonGeometry_ = function(text) {\n  googAsserts.assert(text.substring(0, 2) === 'A(');\n  googAsserts.assert(text[text.length - 1] == ')');\n  text = text.substring(2, text.length - 1);\n  let flatCoordinates = [];\n  const endss = [];\n  const polygons = text.split(')(');\n  for (let i = 0, ii = polygons.length; i < ii; ++i) {\n    const rings = polygons[i].split('\\'');\n    const ends = endss[i] = [];\n    for (let j = 0, jj = rings.length; j < jj; ++j) {\n      flatCoordinates = this.decodeCoordinates_(rings[j], flatCoordinates);\n      let end = flatCoordinates.length;\n      if (j === 0) {\n        flatCoordinates[end++] = flatCoordinates[0];\n        flatCoordinates[end++] = flatCoordinates[1];\n      } else {\n        flatCoordinates[end++] = flatCoordinates[ends[j - 1]];\n        flatCoordinates[end++] = flatCoordinates[ends[j - 1] + 1];\n      }\n      ends[j] = end;\n    }\n  }\n  const multipolygon = new olGeomMultiPolygon(null);\n  multipolygon.setFlatCoordinates(\n    olGeomGeometryLayout.XY, flatCoordinates, endss);\n  return multipolygon;\n};\n\n\n/**\n * DEPRECATED - Use the `ngeo.misc.FeatureHelper` instead in combination with the\n * `setStyle: false` option.\n *\n * Read a logical sequence of characters and apply the decoded style on the\n * given feature.\n * @param {string} text Text.\n * @param {ol.Feature} feature Feature.\n * @private\n */\nexports.setStyleInFeature_ = function(text, feature) {\n  if (text == '') {\n    return;\n  }\n  const properties = exports.getStyleProperties_(text, feature);\n  const fillColor = properties['fillColor'];\n  const fontSize = properties['fontSize'];\n  const fontColor = properties['fontColor'];\n  const pointRadius = properties['pointRadius'];\n  const strokeColor = properties['strokeColor'];\n  const strokeWidth = properties['strokeWidth'];\n\n  let fillStyle = null;\n  if (fillColor !== undefined) {\n    fillStyle = new olStyleFill({\n      color: /** @type {Array<number>|string} */ (fillColor)\n    });\n  }\n  let strokeStyle = null;\n  if (strokeColor !== undefined && strokeWidth !== undefined) {\n    strokeStyle = new olStyleStroke({\n      color: /** @type {Array<number>|string} */ (strokeColor),\n      width: /** @type {number} */ (strokeWidth)\n    });\n  }\n  let imageStyle = null;\n  if (pointRadius !== undefined) {\n    imageStyle = new olStyleCircle({\n      radius: /** @type {number} */ (pointRadius),\n      fill: fillStyle,\n      stroke: strokeStyle\n    });\n    fillStyle = strokeStyle = null;\n  }\n  let textStyle = null;\n  if (fontSize !== undefined && fontColor !== undefined) {\n    textStyle = new olStyleText({\n      font: `${fontSize} sans-serif`,\n      fill: new olStyleFill({\n        color: /** @type {Array<number>|string} */ (fontColor)\n      })\n    });\n  }\n  const style = new olStyleStyle({\n    fill: fillStyle,\n    image: imageStyle,\n    stroke: strokeStyle,\n    text: textStyle\n  });\n  feature.setStyle(style);\n};\n\n\n/**\n * Read a logical sequence of characters and apply the decoded result as\n * style properties for the feature. Legacy keys are converted to the new ones\n * for compatibility.\n * @param {string} text Text.\n * @param {ol.Feature} feature Feature.\n * @private\n */\nexports.setStyleProperties_ = function(text, feature) {\n\n  const properties = exports.getStyleProperties_(text, feature);\n  const geometry = feature.getGeometry();\n\n  // Deal with legacy properties\n  if (geometry instanceof olGeomPoint) {\n    if (properties['isLabel'] ||\n        properties[ngeoFormatFeatureProperties.IS_TEXT]) {\n      delete properties['strokeColor'];\n      delete properties['fillColor'];\n    } else {\n      delete properties['fontColor'];\n      delete properties['fontSize'];\n    }\n  } else {\n    delete properties['fontColor'];\n\n    if (geometry instanceof olGeomLineString) {\n      delete properties['fillColor'];\n      delete properties['fillOpacity'];\n    }\n  }\n\n  // Convert font size from px to pt\n  if (properties['fontSize']) {\n    let fontSize = parseFloat(properties['fontSize']);\n    if (properties['fontSize'].indexOf('px') !== -1) {\n      fontSize = Math.round(fontSize / 1.333333);\n    }\n    properties['fontSize'] = fontSize;\n  }\n\n  // Convert legacy properties\n  const clone = {};\n  for (const key in properties) {\n    const value = properties[key];\n    if (exports.LegacyProperties_[key]) {\n      clone[exports.LegacyProperties_[key]] = value;\n    } else {\n      clone[key] = value;\n    }\n  }\n\n  feature.setProperties(clone);\n};\n\n\n/**\n * Cast values in the correct type depending on the property.\n * @param {string} key Key.\n * @param {string} value Value.\n * @return {number|boolean|string} The casted value corresponding to the key.\n * @private\n */\nexports.castValue_ = function(key, value) {\n  const numProperties = [\n    ngeoFormatFeatureProperties.ANGLE,\n    ngeoFormatFeatureProperties.OPACITY,\n    ngeoFormatFeatureProperties.SIZE,\n    ngeoFormatFeatureProperties.STROKE,\n    'pointRadius',\n    'strokeWidth'\n  ];\n  const boolProperties = [\n    ngeoFormatFeatureProperties.IS_CIRCLE,\n    ngeoFormatFeatureProperties.IS_RECTANGLE,\n    ngeoFormatFeatureProperties.IS_TEXT,\n    ngeoFormatFeatureProperties.SHOW_MEASURE,\n    ngeoFormatFeatureProperties.SHOW_LABEL,\n    'isCircle',\n    'isRectangle',\n    'isLabel',\n    'showMeasure',\n    'showLabel'\n  ];\n\n  if (olArray.includes(numProperties, key)) {\n    return +value;\n  } else if (olArray.includes(boolProperties, key)) {\n    return (value === 'true') ? true : false;\n  } else {\n    return value;\n  }\n};\n\n\n/**\n * From a logical sequence of characters, create and return an object of\n * style properties for a feature. The values are cast in the correct type\n * depending on the property. Some properties are also deleted when they don't\n * match the geometry of the feature.\n * @param {string} text Text.\n * @param {ol.Feature} feature Feature.\n * @return {Object.<string, boolean|number|string>} The style properties for\n *     the feature.\n * @private\n */\nexports.getStyleProperties_ = function(text, feature) {\n  const parts = text.split('\\'');\n  const properties = {};\n\n  for (let i = 0; i < parts.length; ++i) {\n    const part = decodeURIComponent(parts[i]);\n    const keyVal = part.split('*');\n    googAsserts.assert(keyVal.length === 2);\n    const key = keyVal[0];\n    const val = keyVal[1];\n\n    properties[key] = exports.castValue_(key, val);\n  }\n\n  return properties;\n};\n\n\n/**\n * Encode a {@link ol.geom.LineString} geometry into a logical sequence of\n * characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {string} Encoded geometry.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.writeLineStringGeometry_ = function(geometry) {\n  googAsserts.assertInstanceof(geometry, olGeomLineString);\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n  const end = flatCoordinates.length;\n  return `l(${this.encodeCoordinates_(flatCoordinates, stride, 0, end)})`;\n};\n\n\n/**\n * Encode a {@link ol.geom.MultiLineString} geometry into a logical sequence\n * of characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {string} Encoded geometry.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.writeMultiLineStringGeometry_ = function(geometry) {\n  googAsserts.assertInstanceof(geometry, olGeomMultiLineString);\n  const ends = geometry.getEnds();\n  const lineStringCount = ends.length;\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n  let offset = 0;\n  const textArray = ['L('];\n  for (let i = 0; i < lineStringCount; ++i) {\n    const end = ends[i];\n    const text = this.encodeCoordinates_(flatCoordinates, stride, offset, end);\n    if (i !== 0) {\n      textArray.push('\\'');\n    }\n    textArray.push(text);\n    offset = end;\n  }\n  textArray.push(')');\n  return textArray.join('');\n};\n\n\n/**\n * Encode a {@link ol.geom.Point} geometry into a logical sequence of\n * characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {string} Encoded geometry.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.writePointGeometry_ = function(geometry) {\n  googAsserts.assertInstanceof(geometry, olGeomPoint);\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n  const end = flatCoordinates.length;\n  return `p(${this.encodeCoordinates_(flatCoordinates, stride, 0, end)})`;\n};\n\n\n/**\n * Encode an {@link ol.geom.MultiPoint} geometry into a logical sequence\n * of characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {string} Encoded geometry.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.writeMultiPointGeometry_ = function(geometry) {\n  googAsserts.assertInstanceof(geometry, olGeomMultiPoint);\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n  const end = flatCoordinates.length;\n  return `P(${this.encodeCoordinates_(flatCoordinates, stride, 0, end)})`;\n};\n\n\n/**\n * Helper to encode an {@link ol.geom.Polygon} geometry.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} stride Stride.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {Array.<string>} textArray Text array.\n * @return {number} The new offset.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.encodeRings_ = function(flatCoordinates, stride, offset, ends, textArray) {\n  const linearRingCount = ends.length;\n  for (let i = 0; i < linearRingCount; ++i) {\n    // skip the \"closing\" point\n    const end = ends[i] - stride;\n    const text = this.encodeCoordinates_(flatCoordinates, stride, offset, end);\n    if (i !== 0) {\n      textArray.push('\\'');\n    }\n    textArray.push(text);\n    offset = ends[i];\n  }\n  return offset;\n};\n\n\n/**\n * Encode an {@link ol.geom.Polygon} geometry into a logical sequence\n * of characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {string} Encoded geometry.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.writePolygonGeometry_ = function(geometry) {\n  googAsserts.assertInstanceof(geometry, olGeomPolygon);\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n  const ends = geometry.getEnds();\n  const offset = 0;\n  const textArray = ['a('];\n  exports.encodeRings_.call(this,\n    flatCoordinates, stride, offset, ends, textArray);\n  textArray.push(')');\n  return textArray.join('');\n};\n\n\n/**\n * Encode an {@link ol.geom.MultiPoligon} geometry into a logical sequence of\n * characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {string} Encoded geometry.\n * @this {ngeo.format.FeatureHash}\n * @private\n */\nexports.writeMultiPolygonGeometry_ = function(geometry) {\n  googAsserts.assertInstanceof(geometry, olGeomMultiPolygon);\n  const flatCoordinates = geometry.getFlatCoordinates();\n  const stride = geometry.getStride();\n  const endss = geometry.getEndss();\n  const polygonCount = endss.length;\n  let offset = 0;\n  const textArray = ['A'];\n  for (let i = 0; i < polygonCount; ++i) {\n    const ends = endss[i];\n    textArray.push('(');\n    offset = exports.encodeRings_.call(this,\n      flatCoordinates, stride, offset, ends, textArray);\n    textArray.push(')');\n  }\n  return textArray.join('');\n};\n\n\n/**\n * @const\n * @private\n * @type {Object.<string, function(string):ol.geom.Geometry>}\n */\nexports.GEOMETRY_READERS_ = {\n  'P': exports.readMultiPointGeometry_,\n  'L': exports.readMultiLineStringGeometry_,\n  'A': exports.readMultiPolygonGeometry_,\n  'l': exports.readLineStringGeometry_,\n  'p': exports.readPointGeometry_,\n  'a': exports.readPolygonGeometry_\n};\n\n\n/**\n * @const\n * @private\n * @type {Object.<string, function(ol.geom.Geometry):string>}\n */\nexports.GEOMETRY_WRITERS_ = {\n  'MultiLineString': exports.writeMultiLineStringGeometry_,\n  'MultiPoint': exports.writeMultiPointGeometry_,\n  'MultiPolygon': exports.writeMultiPolygonGeometry_,\n  'LineString': exports.writeLineStringGeometry_,\n  'Point': exports.writePointGeometry_,\n  'Polygon': exports.writePolygonGeometry_\n};\n\n\n/**\n * Read a logical sequence of characters and return (or complet then return)\n * an array of numbers. The coordinates are assumed to be in\n * two dimensions and in latitude, longitude order.\n * corresponding to a geometry's coordinates.\n * @param {string} text Text.\n * @param {Array.<number>=} opt_flatCoordinates Flat coordinates array.\n * @return {Array.<number>} Flat coordinates.\n * @private\n */\nexports.prototype.decodeCoordinates_ = function(text, opt_flatCoordinates) {\n  const len = text.length;\n  let index = 0;\n  const flatCoordinates = opt_flatCoordinates !== undefined ?\n    opt_flatCoordinates : [];\n  let i = flatCoordinates.length;\n  while (index < len) {\n    let b;\n    let shift = 0;\n    let result = 0;\n    do {\n      b = exports.CHAR64_.indexOf(text.charAt(index++));\n      result |= (b & 0x1f) << shift;\n      shift += 5;\n    } while (b >= 32);\n    const dx = ((result & 1) ? ~(result >> 1) : (result >> 1));\n    this.prevX_ += dx;\n    shift = 0;\n    result = 0;\n    do {\n      b = exports.CHAR64_.indexOf(text.charAt(index++));\n      result |= (b & 0x1f) << shift;\n      shift += 5;\n    } while (b >= 32);\n    const dy = ((result & 1) ? ~(result >> 1) : (result >> 1));\n    this.prevY_ += dy;\n    flatCoordinates[i++] = this.prevX_ * this.accuracy_;\n    flatCoordinates[i++] = this.prevY_ * this.accuracy_;\n  }\n  return flatCoordinates;\n};\n\n\n/**\n * Encode an array of number (corresponding to some coordinates) into a\n * logical sequence of characters. The coordinates are assumed to be in\n * two dimensions and in latitude, longitude order.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} stride Stride.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @return {string} String.\n * @private\n */\nexports.prototype.encodeCoordinates_ = function(flatCoordinates, stride, offset, end) {\n  let encodedCoordinates = '';\n  for (let i = offset; i < end; i += stride) {\n    let x = flatCoordinates[i];\n    let y = flatCoordinates[i + 1];\n    x = Math.floor(x / this.accuracy_);\n    y = Math.floor(y / this.accuracy_);\n    const dx = x - this.prevX_;\n    const dy = y - this.prevY_;\n    this.prevX_ = x;\n    this.prevY_ = y;\n    encodedCoordinates += exports.encodeSignedNumber_(dx) +\n        exports.encodeSignedNumber_(dy);\n  }\n  return encodedCoordinates;\n};\n\n\n/**\n * Read a feature from a logical sequence of characters.\n * @param {string} text Text.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.Feature} Feature.\n * @protected\n * @override\n */\nexports.prototype.readFeatureFromText = function(text, opt_options) {\n  googAsserts.assert(text.length > 2);\n  googAsserts.assert(text[1] === '(');\n  googAsserts.assert(text[text.length - 1] === ')');\n  let splitIndex = text.indexOf('~');\n  const geometryText = splitIndex >= 0 ?\n    `${text.substring(0, splitIndex)})` : text;\n  const geometry = this.readGeometryFromText(geometryText, opt_options);\n  const feature = new olFeature(geometry);\n  if (splitIndex >= 0) {\n    const attributesAndStylesText = text.substring(\n      splitIndex + 1, text.length - 1);\n    splitIndex = attributesAndStylesText.indexOf('~');\n    const attributesText = splitIndex >= 0 ?\n      attributesAndStylesText.substring(0, splitIndex) :\n      attributesAndStylesText;\n    if (attributesText != '') {\n      const parts = attributesText.split('\\'');\n      for (let i = 0; i < parts.length; ++i) {\n        const part = decodeURIComponent(parts[i]);\n        const keyVal = part.split('*');\n        googAsserts.assert(keyVal.length === 2);\n        let key = keyVal[0];\n        const value = keyVal[1];\n        if (!this.setStyle_ && exports.LegacyProperties_[key]) {\n          key = exports.LegacyProperties_[key];\n        }\n        feature.set(key, exports.castValue_(key, value));\n      }\n    }\n    if (splitIndex >= 0) {\n      const stylesText = attributesAndStylesText.substring(splitIndex + 1);\n      if (this.setStyle_) {\n        exports.setStyleInFeature_(stylesText, feature);\n      } else {\n        exports.setStyleProperties_(stylesText, feature);\n      }\n    }\n  }\n  return feature;\n};\n\n\n/**\n * Read multiple features from a logical sequence of characters.\n * @param {string} text Text.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {Array.<ol.Feature>} Features.\n * @protected\n * @override\n */\nexports.prototype.readFeaturesFromText = function(text, opt_options) {\n  googAsserts.assert(text[0] === 'F');\n  /** @type {Array.<ol.Feature>} */\n  const features = [];\n  text = text.substring(1);\n  while (text.length > 0) {\n    const index = text.indexOf(')');\n    googAsserts.assert(index >= 0);\n    const feature = this.readFeatureFromText(\n      text.substring(0, index + 1), opt_options);\n    features.push(feature);\n    text = text.substring(index + 1);\n  }\n  return features;\n};\n\n\n/**\n * Read a geometry from a logical sequence of characters.\n * @param {string} text Text.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.geom.Geometry} Geometry.\n * @protected\n * @override\n */\nexports.prototype.readGeometryFromText = function(text, opt_options) {\n  const geometryReader = exports.GEOMETRY_READERS_[text[0]];\n  googAsserts.assert(geometryReader !== undefined);\n  this.prevX_ = 0;\n  this.prevY_ = 0;\n  return geometryReader.call(this, text);\n};\n\n\n/**\n * Encode a feature into a logical sequence of characters.\n * @param {ol.Feature} feature Feature.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {string} Encoded feature.\n * @protected\n * @override\n */\nexports.prototype.writeFeatureText = function(feature, opt_options) {\n  const /** @type {Array.<string>} */ encodedParts = [];\n\n  // encode geometry\n\n  let encodedGeometry = '';\n  const geometry = feature.getGeometry();\n  if (geometry) {\n    encodedGeometry = this.writeGeometryText(geometry, opt_options);\n  }\n\n  if (encodedGeometry.length > 0) {\n    // remove the final bracket\n    googAsserts.assert(encodedGeometry[encodedGeometry.length - 1] === ')');\n    encodedGeometry = encodedGeometry.substring(0, encodedGeometry.length - 1);\n    encodedParts.push(encodedGeometry);\n  }\n\n  // encode properties\n\n  const /** @type {Array.<string>} */ encodedProperties = [];\n  const propFunction = this.propertiesFunction_(feature);\n  for (const key in propFunction) {\n    const value = propFunction[key];\n    if (value !== undefined && value !== null && key !== feature.getGeometryName()) {\n      if (encodedProperties.length !== 0) {\n        encodedProperties.push('\\'');\n      }\n      const encoded = encodeURIComponent(\n        `${key.replace(/[()'*]/g, '_')}*${\n          value.toString().replace(/[()'*]/g, '_')}`);\n      encodedProperties.push(encoded);\n    }\n  }\n\n  if (encodedProperties.length > 0) {\n    encodedParts.push('~');\n    Array.prototype.push.apply(encodedParts, encodedProperties);\n  }\n\n  // encode styles\n\n  if (this.encodeStyles_) {\n    const styleFunction = feature.getStyleFunction();\n    if (styleFunction !== undefined) {\n      let styles = styleFunction.call(feature, 0);\n      if (styles !== null) {\n        const encodedStyles = [];\n        styles = Array.isArray(styles) ? styles : [styles];\n        exports.encodeStyles_(\n          styles, geometry.getType(), encodedStyles);\n        if (encodedStyles.length > 0) {\n          encodedParts.push('~');\n          Array.prototype.push.apply(encodedParts, encodedStyles);\n        }\n      }\n    }\n  }\n\n  // append the closing bracket and return the encoded feature\n\n  encodedParts.push(')');\n  return encodedParts.join('');\n};\n\n\n/**\n * Encode an array of features into a logical sequence of characters.\n * @param {Array.<ol.Feature>} features Feature.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {string} Encoded features.\n * @protected\n * @override\n */\nexports.prototype.writeFeaturesText = function(features, opt_options) {\n  const textArray = [];\n  if (features.length > 0) {\n    textArray.push('F');\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      textArray.push(this.writeFeatureText(features[i], opt_options));\n    }\n  }\n  return textArray.join('');\n};\n\n\n/**\n * Encode a geometry into a logical sequence of characters.\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {string} Encoded geometry.\n * @protected\n * @override\n */\nexports.prototype.writeGeometryText = function(geometry, opt_options) {\n  const geometryWriter = exports.GEOMETRY_WRITERS_[\n    geometry.getType()];\n  googAsserts.assert(geometryWriter !== undefined);\n  const transformedGeometry = /** @type {ol.geom.Geometry} */\n      (olFormatFeature.transformWithOptions(geometry, true, opt_options));\n  this.prevX_ = 0;\n  this.prevY_ = 0;\n  return geometryWriter.call(this, transformedGeometry);\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/FeatureHash.js","/**\n * @module ngeo.format.FeatureHashStyleType\n */\n/**\n * @enum {string}\n * @export\n */\nconst exports = {\n  LINE_STRING: 'LineString',\n  POINT: 'Point',\n  POLYGON: 'Polygon'\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/FeatureHashStyleType.js","/**\n * @module ol/source/XYZ\n */\nimport {inherits} from '../index.js';\nimport TileImage from '../source/TileImage.js';\nimport _ol_tilegrid_ from '../tilegrid.js';\n\n/**\n * @classdesc\n * Layer source for tile data with URLs in a set XYZ format that are\n * defined in a URL template. By default, this follows the widely-used\n * Google grid where `x` 0 and `y` 0 are in the top left. Grids like\n * TMS where `x` 0 and `y` 0 are in the bottom left can be used by\n * using the `{-y}` placeholder in the URL template, so long as the\n * source does not have a custom tile grid. In this case,\n * {@link ol.source.TileImage} can be used with a `tileUrlFunction`\n * such as:\n *\n *  tileUrlFunction: function(coordinate) {\n *    return 'http://mapserver.com/' + coordinate[0] + '/' +\n *        coordinate[1] + '/' + coordinate[2] + '.png';\n *    }\n *\n *\n * @constructor\n * @extends {ol.source.TileImage}\n * @param {olx.source.XYZOptions=} opt_options XYZ options.\n * @api\n */\nconst XYZ = function(opt_options) {\n  const options = opt_options || {};\n  const projection = options.projection !== undefined ?\n    options.projection : 'EPSG:3857';\n\n  const tileGrid = options.tileGrid !== undefined ? options.tileGrid :\n    _ol_tilegrid_.createXYZ({\n      extent: _ol_tilegrid_.extentFromProjection(projection),\n      maxZoom: options.maxZoom,\n      minZoom: options.minZoom,\n      tileSize: options.tileSize\n    });\n\n  TileImage.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: options.crossOrigin,\n    opaque: options.opaque,\n    projection: projection,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileGrid: tileGrid,\n    tileLoadFunction: options.tileLoadFunction,\n    tilePixelRatio: options.tilePixelRatio,\n    tileUrlFunction: options.tileUrlFunction,\n    url: options.url,\n    urls: options.urls,\n    wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    transition: options.transition\n  });\n\n};\n\ninherits(XYZ, TileImage);\nexport default XYZ;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/XYZ.js\n// module id = 6\n// module chunks = 0 1 2 3 4 5 6 8 9 10 11 12 13 14 15 17 18 19 20 22 23 24 25 26 27 28"],"sourceRoot":""}