{"version":3,"sources":["webpack:///./node_modules/angular-sanitize/index.js","webpack:///./node_modules/angular-sanitize/angular-sanitize.js","webpack:///./src/message/Popup.js","webpack:///./src/message/popupComponent.js","webpack:///./examples/popupservice.js"],"names":["__webpack_require__","module","exports","window","angular","bind","extend","forEach","isDefined","lowercase","noop","nodeContains","htmlParser","htmlSanitizeWriter","$sanitizeMinErr","$$minErr","provider","svgEnabled","this","$get","$$sanitizeUri","validElements","svgElements","html","buf","uri","isImage","test","join","enableSvg","handler","undefined","inertBodyElement","getInertBodyElement","mXSSAttempts","innerHTML","node","firstChild","nodeType","start","nodeName","toLowerCase","attrToMap","attributes","chars","textContent","nextNode","end","getNonDescendant","removeChild","uriValidator","ignoreCurrentElement","out","push","tag","attrs","blockedElements","value","key","lkey","validAttrs","uriAttrs","encodeEntities","voidElements","Node","prototype","contains","arg","compareDocumentPosition","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","toMap","optionalEndTagBlockElements","optionalEndTagInlineElements","optionalEndTagElements","blockElements","inlineElements","htmlAttrs","svgAttrs","str","lowercaseKeys","i","obj","items","split","length","document","inertDocument","implementation","createHTMLDocument","documentElement","getDocumentElement","querySelector","body","DOMParser","parseFromString","remove","e","documentMode","stripCustomNsAttrs","encodeURI","xhr","XMLHttpRequest","responseType","open","send","response","map","ii","attr","name","replace","charCodeAt","ELEMENT_NODE","l","attrNode","attrName","lastIndexOf","removeAttributeNode","propName","call","outerHTML","outerText","info","angularVersion","filter","$sanitize","LINKY_URL_REGEXP","MAILTO_REGEXP","linkyMinErr","isFunction","isObject","isString","text","target","match","url","attributesFn","raw","index","addText","substr","addLink","substring","linkAttributes","$compile","$rootScope","$sce","$timeout","_this","scope","$new","$watch","autoDestroy_","timeout_","destroy","sce_","element_","element","append","getOpen","setOpen","$destroy","setTitle","title","trustedTitle","trustAsHtml","setContent","content","opt_trusted","setUrl","setWidth","width","setHeight","height","setSize","setAutoDestroy","autoDestroy","addClass","cls","options","googAsserts","fail","Factory","ngeoMessagePopupComponent","factory","ngeoBase","requires","_index","templateUrl","baseModuleTemplateUrl","directive_","ngeoPopupTemplateUrl","restrict","link","close","evt","stopPropagation","preventDefault","newVal","oldVal","css","directive","ngeoMessagePopup","MainController","ngeoCreatePopup","createPopup_","$","tooltip","container","trigger","simplePopup","popup","iframePopup","heavyPopup","openPopupWithContent","openPopupWithUrl","controller"],"mappings":"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","file":"popupservice.00cc4da3f045dfd95324.js","sourcesContent":["require('./angular-sanitize');\nmodule.exports = 'ngSanitize';\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-sanitize/index.js\n// module id = 109\n// module chunks = 2 3 7 8","/**\n * @license AngularJS v1.6.9\n * (c) 2010-2018 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular) {'use strict';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *     Any commits to this file should be reviewed with security in mind.  *\n *   Changes to this file can potentially create security vulnerabilities. *\n *          An approval from 2 Core members with history of modifying      *\n *                         this file is required.                          *\n *                                                                         *\n *  Does the change somehow allow for arbitrary javascript to be executed? *\n *    Or allows for someone to change the prototype of built-in objects?   *\n *     Or gives undesired access to variables likes document or window?    *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\nvar $sanitizeMinErr = angular.$$minErr('$sanitize');\nvar bind;\nvar extend;\nvar forEach;\nvar isDefined;\nvar lowercase;\nvar noop;\nvar nodeContains;\nvar htmlParser;\nvar htmlSanitizeWriter;\n\n/**\n * @ngdoc module\n * @name ngSanitize\n * @description\n *\n * The `ngSanitize` module provides functionality to sanitize HTML.\n *\n * See {@link ngSanitize.$sanitize `$sanitize`} for usage.\n */\n\n/**\n * @ngdoc service\n * @name $sanitize\n * @kind function\n *\n * @description\n *   Sanitizes an html string by stripping all potentially dangerous tokens.\n *\n *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are\n *   then serialized back to properly escaped html string. This means that no unsafe input can make\n *   it into the returned string.\n *\n *   The whitelist for URL sanitization of attribute values is configured using the functions\n *   `aHrefSanitizationWhitelist` and `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider\n *   `$compileProvider`}.\n *\n *   The input may also contain SVG markup if this is enabled via {@link $sanitizeProvider}.\n *\n * @param {string} html HTML input.\n * @returns {string} Sanitized HTML.\n *\n * @example\n   <example module=\"sanitizeExample\" deps=\"angular-sanitize.js\" name=\"sanitize-service\">\n   <file name=\"index.html\">\n     <script>\n         angular.module('sanitizeExample', ['ngSanitize'])\n           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {\n             $scope.snippet =\n               '<p style=\"color:blue\">an html\\n' +\n               '<em onmouseover=\"this.textContent=\\'PWN3D!\\'\">click here</em>\\n' +\n               'snippet</p>';\n             $scope.deliberatelyTrustDangerousSnippet = function() {\n               return $sce.trustAsHtml($scope.snippet);\n             };\n           }]);\n     </script>\n     <div ng-controller=\"ExampleController\">\n        Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <td>Directive</td>\n           <td>How</td>\n           <td>Source</td>\n           <td>Rendered</td>\n         </tr>\n         <tr id=\"bind-html-with-sanitize\">\n           <td>ng-bind-html</td>\n           <td>Automatically uses $sanitize</td>\n           <td><pre>&lt;div ng-bind-html=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind-html=\"snippet\"></div></td>\n         </tr>\n         <tr id=\"bind-html-with-trust\">\n           <td>ng-bind-html</td>\n           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>\n           <td>\n           <pre>&lt;div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"&gt;\n&lt;/div&gt;</pre>\n           </td>\n           <td><div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"></div></td>\n         </tr>\n         <tr id=\"bind-default\">\n           <td>ng-bind</td>\n           <td>Automatically escapes</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n       </div>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     it('should sanitize the html snippet by default', function() {\n       expect(element(by.css('#bind-html-with-sanitize div')).getAttribute('innerHTML')).\n         toBe('<p>an html\\n<em>click here</em>\\nsnippet</p>');\n     });\n\n     it('should inline raw snippet if bound to a trusted value', function() {\n       expect(element(by.css('#bind-html-with-trust div')).getAttribute('innerHTML')).\n         toBe(\"<p style=\\\"color:blue\\\">an html\\n\" +\n              \"<em onmouseover=\\\"this.textContent='PWN3D!'\\\">click here</em>\\n\" +\n              \"snippet</p>\");\n     });\n\n     it('should escape snippet without any filter', function() {\n       expect(element(by.css('#bind-default div')).getAttribute('innerHTML')).\n         toBe(\"&lt;p style=\\\"color:blue\\\"&gt;an html\\n\" +\n              \"&lt;em onmouseover=\\\"this.textContent='PWN3D!'\\\"&gt;click here&lt;/em&gt;\\n\" +\n              \"snippet&lt;/p&gt;\");\n     });\n\n     it('should update', function() {\n       element(by.model('snippet')).clear();\n       element(by.model('snippet')).sendKeys('new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-html-with-sanitize div')).getAttribute('innerHTML')).\n         toBe('new <b>text</b>');\n       expect(element(by.css('#bind-html-with-trust div')).getAttribute('innerHTML')).toBe(\n         'new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-default div')).getAttribute('innerHTML')).toBe(\n         \"new &lt;b onclick=\\\"alert(1)\\\"&gt;text&lt;/b&gt;\");\n     });\n   </file>\n   </example>\n */\n\n\n/**\n * @ngdoc provider\n * @name $sanitizeProvider\n * @this\n *\n * @description\n * Creates and configures {@link $sanitize} instance.\n */\nfunction $SanitizeProvider() {\n  var svgEnabled = false;\n\n  this.$get = ['$$sanitizeUri', function($$sanitizeUri) {\n    if (svgEnabled) {\n      extend(validElements, svgElements);\n    }\n    return function(html) {\n      var buf = [];\n      htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {\n        return !/^unsafe:/.test($$sanitizeUri(uri, isImage));\n      }));\n      return buf.join('');\n    };\n  }];\n\n\n  /**\n   * @ngdoc method\n   * @name $sanitizeProvider#enableSvg\n   * @kind function\n   *\n   * @description\n   * Enables a subset of svg to be supported by the sanitizer.\n   *\n   * <div class=\"alert alert-warning\">\n   *   <p>By enabling this setting without taking other precautions, you might expose your\n   *   application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned\n   *   outside of the containing element and be rendered over other elements on the page (e.g. a login\n   *   link). Such behavior can then result in phishing incidents.</p>\n   *\n   *   <p>To protect against these, explicitly setup `overflow: hidden` css rule for all potential svg\n   *   tags within the sanitized content:</p>\n   *\n   *   <br>\n   *\n   *   <pre><code>\n   *   .rootOfTheIncludedContent svg {\n   *     overflow: hidden !important;\n   *   }\n   *   </code></pre>\n   * </div>\n   *\n   * @param {boolean=} flag Enable or disable SVG support in the sanitizer.\n   * @returns {boolean|ng.$sanitizeProvider} Returns the currently configured value if called\n   *    without an argument or self for chaining otherwise.\n   */\n  this.enableSvg = function(enableSvg) {\n    if (isDefined(enableSvg)) {\n      svgEnabled = enableSvg;\n      return this;\n    } else {\n      return svgEnabled;\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n  // Private stuff\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n\n  bind = angular.bind;\n  extend = angular.extend;\n  forEach = angular.forEach;\n  isDefined = angular.isDefined;\n  lowercase = angular.lowercase;\n  noop = angular.noop;\n\n  htmlParser = htmlParserImpl;\n  htmlSanitizeWriter = htmlSanitizeWriterImpl;\n\n  nodeContains = window.Node.prototype.contains || /** @this */ function(arg) {\n    // eslint-disable-next-line no-bitwise\n    return !!(this.compareDocumentPosition(arg) & 16);\n  };\n\n  // Regular Expressions for parsing tags and attributes\n  var SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\n    // Match everything outside of normal chars and \" (quote character)\n    NON_ALPHANUMERIC_REGEXP = /([^#-~ |!])/g;\n\n\n  // Good source of info about elements and attributes\n  // http://dev.w3.org/html5/spec/Overview.html#semantics\n  // http://simon.html5.org/html-elements\n\n  // Safe Void Elements - HTML5\n  // http://dev.w3.org/html5/spec/Overview.html#void-elements\n  var voidElements = toMap('area,br,col,hr,img,wbr');\n\n  // Elements that you can, intentionally, leave open (and which close themselves)\n  // http://dev.w3.org/html5/spec/Overview.html#optional-tags\n  var optionalEndTagBlockElements = toMap('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr'),\n      optionalEndTagInlineElements = toMap('rp,rt'),\n      optionalEndTagElements = extend({},\n                                              optionalEndTagInlineElements,\n                                              optionalEndTagBlockElements);\n\n  // Safe Block Elements - HTML5\n  var blockElements = extend({}, optionalEndTagBlockElements, toMap('address,article,' +\n          'aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n          'h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul'));\n\n  // Inline Elements - HTML5\n  var inlineElements = extend({}, optionalEndTagInlineElements, toMap('a,abbr,acronym,b,' +\n          'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,' +\n          'samp,small,span,strike,strong,sub,sup,time,tt,u,var'));\n\n  // SVG Elements\n  // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements\n  // Note: the elements animate,animateColor,animateMotion,animateTransform,set are intentionally omitted.\n  // They can potentially allow for arbitrary javascript to be executed. See #11290\n  var svgElements = toMap('circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,' +\n          'hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,' +\n          'radialGradient,rect,stop,svg,switch,text,title,tspan');\n\n  // Blocked Elements (will be stripped)\n  var blockedElements = toMap('script,style');\n\n  var validElements = extend({},\n                                     voidElements,\n                                     blockElements,\n                                     inlineElements,\n                                     optionalEndTagElements);\n\n  //Attributes that have href and hence need to be sanitized\n  var uriAttrs = toMap('background,cite,href,longdesc,src,xlink:href,xml:base');\n\n  var htmlAttrs = toMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' +\n      'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' +\n      'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' +\n      'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' +\n      'valign,value,vspace,width');\n\n  // SVG attributes (without \"id\" and \"name\" attributes)\n  // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes\n  var svgAttrs = toMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' +\n      'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' +\n      'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' +\n      'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' +\n      'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' +\n      'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' +\n      'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' +\n      'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' +\n      'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' +\n      'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' +\n      'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' +\n      'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' +\n      'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' +\n      'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' +\n      'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan', true);\n\n  var validAttrs = extend({},\n                                  uriAttrs,\n                                  svgAttrs,\n                                  htmlAttrs);\n\n  function toMap(str, lowercaseKeys) {\n    var obj = {}, items = str.split(','), i;\n    for (i = 0; i < items.length; i++) {\n      obj[lowercaseKeys ? lowercase(items[i]) : items[i]] = true;\n    }\n    return obj;\n  }\n\n  /**\n   * Create an inert document that contains the dirty HTML that needs sanitizing\n   * Depending upon browser support we use one of three strategies for doing this.\n   * Support: Safari 10.x -> XHR strategy\n   * Support: Firefox -> DomParser strategy\n   */\n  var getInertBodyElement /* function(html: string): HTMLBodyElement */ = (function(window, document) {\n    var inertDocument;\n    if (document && document.implementation) {\n      inertDocument = document.implementation.createHTMLDocument('inert');\n    } else {\n      throw $sanitizeMinErr('noinert', 'Can\\'t create an inert html document');\n    }\n    var inertBodyElement = (inertDocument.documentElement || inertDocument.getDocumentElement()).querySelector('body');\n\n    // Check for the Safari 10.1 bug - which allows JS to run inside the SVG G element\n    inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n    if (!inertBodyElement.querySelector('svg')) {\n      return getInertBodyElement_XHR;\n    } else {\n      // Check for the Firefox bug - which prevents the inner img JS from being sanitized\n      inertBodyElement.innerHTML = '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n      if (inertBodyElement.querySelector('svg img')) {\n        return getInertBodyElement_DOMParser;\n      } else {\n        return getInertBodyElement_InertDocument;\n      }\n    }\n\n    function getInertBodyElement_XHR(html) {\n      // We add this dummy element to ensure that the rest of the content is parsed as expected\n      // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the `<head>` tag.\n      html = '<remove></remove>' + html;\n      try {\n        html = encodeURI(html);\n      } catch (e) {\n        return undefined;\n      }\n      var xhr = new window.XMLHttpRequest();\n      xhr.responseType = 'document';\n      xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n      xhr.send(null);\n      var body = xhr.response.body;\n      body.firstChild.remove();\n      return body;\n    }\n\n    function getInertBodyElement_DOMParser(html) {\n      // We add this dummy element to ensure that the rest of the content is parsed as expected\n      // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the `<head>` tag.\n      html = '<remove></remove>' + html;\n      try {\n        var body = new window.DOMParser().parseFromString(html, 'text/html').body;\n        body.firstChild.remove();\n        return body;\n      } catch (e) {\n        return undefined;\n      }\n    }\n\n    function getInertBodyElement_InertDocument(html) {\n      inertBodyElement.innerHTML = html;\n\n      // Support: IE 9-11 only\n      // strip custom-namespaced attributes on IE<=11\n      if (document.documentMode) {\n        stripCustomNsAttrs(inertBodyElement);\n      }\n\n      return inertBodyElement;\n    }\n  })(window, window.document);\n\n  /**\n   * @example\n   * htmlParser(htmlString, {\n   *     start: function(tag, attrs) {},\n   *     end: function(tag) {},\n   *     chars: function(text) {},\n   *     comment: function(text) {}\n   * });\n   *\n   * @param {string} html string\n   * @param {object} handler\n   */\n  function htmlParserImpl(html, handler) {\n    if (html === null || html === undefined) {\n      html = '';\n    } else if (typeof html !== 'string') {\n      html = '' + html;\n    }\n\n    var inertBodyElement = getInertBodyElement(html);\n    if (!inertBodyElement) return '';\n\n    //mXSS protection\n    var mXSSAttempts = 5;\n    do {\n      if (mXSSAttempts === 0) {\n        throw $sanitizeMinErr('uinput', 'Failed to sanitize html because the input is unstable');\n      }\n      mXSSAttempts--;\n\n      // trigger mXSS if it is going to happen by reading and writing the innerHTML\n      html = inertBodyElement.innerHTML;\n      inertBodyElement = getInertBodyElement(html);\n    } while (html !== inertBodyElement.innerHTML);\n\n    var node = inertBodyElement.firstChild;\n    while (node) {\n      switch (node.nodeType) {\n        case 1: // ELEMENT_NODE\n          handler.start(node.nodeName.toLowerCase(), attrToMap(node.attributes));\n          break;\n        case 3: // TEXT NODE\n          handler.chars(node.textContent);\n          break;\n      }\n\n      var nextNode;\n      if (!(nextNode = node.firstChild)) {\n        if (node.nodeType === 1) {\n          handler.end(node.nodeName.toLowerCase());\n        }\n        nextNode = getNonDescendant('nextSibling', node);\n        if (!nextNode) {\n          while (nextNode == null) {\n            node = getNonDescendant('parentNode', node);\n            if (node === inertBodyElement) break;\n            nextNode = getNonDescendant('nextSibling', node);\n            if (node.nodeType === 1) {\n              handler.end(node.nodeName.toLowerCase());\n            }\n          }\n        }\n      }\n      node = nextNode;\n    }\n\n    while ((node = inertBodyElement.firstChild)) {\n      inertBodyElement.removeChild(node);\n    }\n  }\n\n  function attrToMap(attrs) {\n    var map = {};\n    for (var i = 0, ii = attrs.length; i < ii; i++) {\n      var attr = attrs[i];\n      map[attr.name] = attr.value;\n    }\n    return map;\n  }\n\n\n  /**\n   * Escapes all potentially dangerous characters, so that the\n   * resulting string can be safely inserted into attribute or\n   * element text.\n   * @param value\n   * @returns {string} escaped text\n   */\n  function encodeEntities(value) {\n    return value.\n      replace(/&/g, '&amp;').\n      replace(SURROGATE_PAIR_REGEXP, function(value) {\n        var hi = value.charCodeAt(0);\n        var low = value.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n      }).\n      replace(NON_ALPHANUMERIC_REGEXP, function(value) {\n        return '&#' + value.charCodeAt(0) + ';';\n      }).\n      replace(/</g, '&lt;').\n      replace(/>/g, '&gt;');\n  }\n\n  /**\n   * create an HTML/XML writer which writes to buffer\n   * @param {Array} buf use buf.join('') to get out sanitized html string\n   * @returns {object} in the form of {\n   *     start: function(tag, attrs) {},\n   *     end: function(tag) {},\n   *     chars: function(text) {},\n   *     comment: function(text) {}\n   * }\n   */\n  function htmlSanitizeWriterImpl(buf, uriValidator) {\n    var ignoreCurrentElement = false;\n    var out = bind(buf, buf.push);\n    return {\n      start: function(tag, attrs) {\n        tag = lowercase(tag);\n        if (!ignoreCurrentElement && blockedElements[tag]) {\n          ignoreCurrentElement = tag;\n        }\n        if (!ignoreCurrentElement && validElements[tag] === true) {\n          out('<');\n          out(tag);\n          forEach(attrs, function(value, key) {\n            var lkey = lowercase(key);\n            var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');\n            if (validAttrs[lkey] === true &&\n              (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {\n              out(' ');\n              out(key);\n              out('=\"');\n              out(encodeEntities(value));\n              out('\"');\n            }\n          });\n          out('>');\n        }\n      },\n      end: function(tag) {\n        tag = lowercase(tag);\n        if (!ignoreCurrentElement && validElements[tag] === true && voidElements[tag] !== true) {\n          out('</');\n          out(tag);\n          out('>');\n        }\n        // eslint-disable-next-line eqeqeq\n        if (tag == ignoreCurrentElement) {\n          ignoreCurrentElement = false;\n        }\n      },\n      chars: function(chars) {\n        if (!ignoreCurrentElement) {\n          out(encodeEntities(chars));\n        }\n      }\n    };\n  }\n\n\n  /**\n   * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1' attribute to declare\n   * ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo'). This is undesirable since we don't want\n   * to allow any of these custom attributes. This method strips them all.\n   *\n   * @param node Root element to process\n   */\n  function stripCustomNsAttrs(node) {\n    while (node) {\n      if (node.nodeType === window.Node.ELEMENT_NODE) {\n        var attrs = node.attributes;\n        for (var i = 0, l = attrs.length; i < l; i++) {\n          var attrNode = attrs[i];\n          var attrName = attrNode.name.toLowerCase();\n          if (attrName === 'xmlns:ns1' || attrName.lastIndexOf('ns1:', 0) === 0) {\n            node.removeAttributeNode(attrNode);\n            i--;\n            l--;\n          }\n        }\n      }\n\n      var nextNode = node.firstChild;\n      if (nextNode) {\n        stripCustomNsAttrs(nextNode);\n      }\n\n      node = getNonDescendant('nextSibling', node);\n    }\n  }\n\n  function getNonDescendant(propName, node) {\n    // An element is clobbered if its `propName` property points to one of its descendants\n    var nextNode = node[propName];\n    if (nextNode && nodeContains.call(node, nextNode)) {\n      throw $sanitizeMinErr('elclob', 'Failed to sanitize html because the element is clobbered: {0}', node.outerHTML || node.outerText);\n    }\n    return nextNode;\n  }\n}\n\nfunction sanitizeText(chars) {\n  var buf = [];\n  var writer = htmlSanitizeWriter(buf, noop);\n  writer.chars(chars);\n  return buf.join('');\n}\n\n\n// define ngSanitize module and register $sanitize service\nangular.module('ngSanitize', [])\n  .provider('$sanitize', $SanitizeProvider)\n  .info({ angularVersion: '1.6.9' });\n\n/**\n * @ngdoc filter\n * @name linky\n * @kind function\n *\n * @description\n * Finds links in text input and turns them into html links. Supports `http/https/ftp/sftp/mailto` and\n * plain email address links.\n *\n * Requires the {@link ngSanitize `ngSanitize`} module to be installed.\n *\n * @param {string} text Input text.\n * @param {string} [target] Window (`_blank|_self|_parent|_top`) or named frame to open links in.\n * @param {object|function(url)} [attributes] Add custom attributes to the link element.\n *\n *    Can be one of:\n *\n *    - `object`: A map of attributes\n *    - `function`: Takes the url as a parameter and returns a map of attributes\n *\n *    If the map of attributes contains a value for `target`, it overrides the value of\n *    the target parameter.\n *\n *\n * @returns {string} Html-linkified and {@link $sanitize sanitized} text.\n *\n * @usage\n   <span ng-bind-html=\"linky_expression | linky\"></span>\n *\n * @example\n   <example module=\"linkyExample\" deps=\"angular-sanitize.js\" name=\"linky-filter\">\n     <file name=\"index.html\">\n       <div ng-controller=\"ExampleController\">\n       Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <th>Filter</th>\n           <th>Source</th>\n           <th>Rendered</th>\n         </tr>\n         <tr id=\"linky-filter\">\n           <td>linky filter</td>\n           <td>\n             <pre>&lt;div ng-bind-html=\"snippet | linky\"&gt;<br>&lt;/div&gt;</pre>\n           </td>\n           <td>\n             <div ng-bind-html=\"snippet | linky\"></div>\n           </td>\n         </tr>\n         <tr id=\"linky-target\">\n          <td>linky target</td>\n          <td>\n            <pre>&lt;div ng-bind-html=\"snippetWithSingleURL | linky:'_blank'\"&gt;<br>&lt;/div&gt;</pre>\n          </td>\n          <td>\n            <div ng-bind-html=\"snippetWithSingleURL | linky:'_blank'\"></div>\n          </td>\n         </tr>\n         <tr id=\"linky-custom-attributes\">\n          <td>linky custom attributes</td>\n          <td>\n            <pre>&lt;div ng-bind-html=\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\"&gt;<br>&lt;/div&gt;</pre>\n          </td>\n          <td>\n            <div ng-bind-html=\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\"></div>\n          </td>\n         </tr>\n         <tr id=\"escaped-html\">\n           <td>no filter</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n     </file>\n     <file name=\"script.js\">\n       angular.module('linkyExample', ['ngSanitize'])\n         .controller('ExampleController', ['$scope', function($scope) {\n           $scope.snippet =\n             'Pretty text with some links:\\n' +\n             'http://angularjs.org/,\\n' +\n             'mailto:us@somewhere.org,\\n' +\n             'another@somewhere.org,\\n' +\n             'and one more: ftp://127.0.0.1/.';\n           $scope.snippetWithSingleURL = 'http://angularjs.org/';\n         }]);\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should linkify the snippet with urls', function() {\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);\n       });\n\n       it('should not linkify snippet without the linky filter', function() {\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);\n       });\n\n       it('should update', function() {\n         element(by.model('snippet')).clear();\n         element(by.model('snippet')).sendKeys('new http://link.');\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('new http://link.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())\n             .toBe('new http://link.');\n       });\n\n       it('should work with the target property', function() {\n        expect(element(by.id('linky-target')).\n            element(by.binding(\"snippetWithSingleURL | linky:'_blank'\")).getText()).\n            toBe('http://angularjs.org/');\n        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');\n       });\n\n       it('should optionally add custom attributes', function() {\n        expect(element(by.id('linky-custom-attributes')).\n            element(by.binding(\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\")).getText()).\n            toBe('http://angularjs.org/');\n        expect(element(by.css('#linky-custom-attributes a')).getAttribute('rel')).toEqual('nofollow');\n       });\n     </file>\n   </example>\n */\nangular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {\n  var LINKY_URL_REGEXP =\n        /((s?ftp|https?):\\/\\/|(www\\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\\S*[^\\s.;,(){}<>\"\\u201d\\u2019]/i,\n      MAILTO_REGEXP = /^mailto:/i;\n\n  var linkyMinErr = angular.$$minErr('linky');\n  var isDefined = angular.isDefined;\n  var isFunction = angular.isFunction;\n  var isObject = angular.isObject;\n  var isString = angular.isString;\n\n  return function(text, target, attributes) {\n    if (text == null || text === '') return text;\n    if (!isString(text)) throw linkyMinErr('notstring', 'Expected string but received: {0}', text);\n\n    var attributesFn =\n      isFunction(attributes) ? attributes :\n      isObject(attributes) ? function getAttributesObject() {return attributes;} :\n      function getEmptyAttributesObject() {return {};};\n\n    var match;\n    var raw = text;\n    var html = [];\n    var url;\n    var i;\n    while ((match = raw.match(LINKY_URL_REGEXP))) {\n      // We can not end in these as they are sometimes found at the end of the sentence\n      url = match[0];\n      // if we did not match ftp/http/www/mailto then assume mailto\n      if (!match[2] && !match[4]) {\n        url = (match[3] ? 'http://' : 'mailto:') + url;\n      }\n      i = match.index;\n      addText(raw.substr(0, i));\n      addLink(url, match[0].replace(MAILTO_REGEXP, ''));\n      raw = raw.substring(i + match[0].length);\n    }\n    addText(raw);\n    return $sanitize(html.join(''));\n\n    function addText(text) {\n      if (!text) {\n        return;\n      }\n      html.push(sanitizeText(text));\n    }\n\n    function addLink(url, text) {\n      var key, linkAttributes = attributesFn(url);\n      html.push('<a ');\n\n      for (key in linkAttributes) {\n        html.push(key + '=\"' + linkAttributes[key] + '\" ');\n      }\n\n      if (isDefined(target) && !('target' in linkAttributes)) {\n        html.push('target=\"',\n                  target,\n                  '\" ');\n      }\n      html.push('href=\"',\n                url.replace(/\"/g, '&quot;'),\n                '\">');\n      addText(text);\n      html.push('</a>');\n    }\n  };\n}]);\n\n\n})(window, window.angular);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-sanitize/angular-sanitize.js\n// module id = 110\n// module chunks = 2 3 7 8","/**\n * @module ngeo.message.Popup\n */\nimport googAsserts from 'goog/asserts.js';\nimport ngeoBase from 'ngeo/index.js';\n\n/**\n * This goog.require is needed because of 'ngeo-popup' used in\n * the template.\n * @suppress {extraRequire}\n */\nimport ngeoMessagePopupComponent from 'ngeo/message/popupComponent.js';\n\n/**\n * Provides a factory to create a popup in the page.\n * The factory returns a ngeo.message.Popup object.\n *\n * Example:\n *\n *     let popup = ngeoCreatePopup();\n *     popup.setTitle(\"A title\");\n *     popup.setContent(\"Some content\");\n *     popup.setOpen(true);\n *\n * @constructor\n * @struct\n * @param {angular.$compile} $compile The compile provider.\n * @param {angular.Scope} $rootScope The rootScope provider.\n * @param {angular.$sce} $sce Angular sce service.\n * @param {angular.$timeout} $timeout Angular timeout service.\n * @ngdoc service\n * @ngname ngeoCreatePopup\n */\nconst exports = function($compile, $rootScope, $sce, $timeout) {\n\n  /**\n   * The scope the compiled element is link to.\n   * @type {angular.Scope}\n   * @export\n   */\n  this.scope = $rootScope.$new(true);\n\n  // manage the auto destruction of the popup\n  this.scope.$watch(\n    () => this.scope['open'],\n    (open) => {\n      if (!open && this.autoDestroy_) {\n        this.timeout_(() => {\n          this.destroy();\n        });\n      }\n    }\n  );\n\n  /**\n   * @private\n   * @type {angular.$sce}\n   */\n  this.sce_ = $sce;\n\n  /**\n   * @type {angular.$timeout}\n   * @private\n   */\n  this.timeout_ = $timeout;\n\n  /**\n   * The element.\n   * @type {angular.JQLite}\n   * @private\n   */\n  this.element_ = angular.element('<div ngeo-popup></div>');\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.autoDestroy_ = false;\n\n\n  // Compile the element, link it to the scope and add it to the document.\n  $compile(this.element_)(this.scope);\n  angular.element(document.body).append(this.element_);\n};\n\n\n/**\n * Get the current popup state.\n * @return {boolean} `true` if the popup is currently, otherwise `false`.\n * @export\n */\nexports.prototype.getOpen = function() {\n  return this.scope['open'];\n};\n\n\n/**\n * Show/hide the popup.\n * @param {boolean} open `true` to show the popup, `false` to hide it.\n * @export\n */\nexports.prototype.setOpen = function(open) {\n  this.scope['open'] = open;\n};\n\n\n/**\n * Destroy the popup.\n * @export\n */\nexports.prototype.destroy = function() {\n  this.scope.$destroy();\n  this.element_.remove();\n};\n\n\n/**\n * Set the popup's title.\n * @param {string} title The title.\n * @export\n */\nexports.prototype.setTitle = function(title) {\n  const trustedTitle = this.sce_.trustAsHtml(title);\n  this.scope['title'] = trustedTitle;\n};\n\n\n/**\n * Set the popup's content.\n * Note: the type of the `content` param is `*` instead of `string`, this\n * is because the content may be trusted using `$sce.trustAsHtml`.\n * @param {*} content The content.\n * @param {boolean=} opt_trusted Whether the content can be trusted.\n *     Default is false.\n * @export\n */\nexports.prototype.setContent = function(content, opt_trusted) {\n  this.scope['content'] = opt_trusted ? this.sce_.trustAsHtml(/** @type {string} */ (content)) : content;\n};\n\n\n/**\n * Set the popup's content with an iframe using the given url.\n * @param {string} url The url of the page.\n * @export\n */\nexports.prototype.setUrl = function(url) {\n  const content = this.sce_.trustAsHtml(\n    `<iframe src=\"${url}\" width=\"100%\" height=\"100%\"></iframe>`\n  );\n  this.setContent(content);\n};\n\n\n/**\n * Set the popup's width.\n * @param {string} width Width the popup should have.\n * @export\n */\nexports.prototype.setWidth = function(width) {\n  this.element_.width(width);\n};\n\n\n/**\n * Set the popup's height.\n * @param {string} height Height the popup should have.\n * @export\n */\nexports.prototype.setHeight = function(height) {\n  this.element_.height(height);\n};\n\n\n/**\n * Set the popup's width and height.\n * @param {string} width Width the popup should have.\n * @param {string} height Height the popup should have.\n * @export\n */\nexports.prototype.setSize = function(width, height) {\n  this.setWidth(width);\n  this.setHeight(height);\n};\n\n\n/**\n * Set the popup's autoDestroy property.\n * @param {boolean} autoDestroy Whether to automatically destroy the popup when\n *     being closed or not.\n * @export\n */\nexports.prototype.setAutoDestroy = function(autoDestroy) {\n  this.autoDestroy_ = autoDestroy;\n};\n\n\n/**\n * Add an extra CSS class name to the popup.\n * @param {string} cls Class name to add to the popup element.\n * @export\n */\nexports.prototype.addClass = function(cls) {\n  this.element_.addClass(cls);\n};\n\n\n/**\n * Open a popup with the given properties.\n * @param {ngeox.PopupOptions} options Options.\n * @export\n */\nexports.prototype.open = function(options) {\n\n  if (options.url) {\n    this.setUrl(options.url);\n  } else if (options.content) {\n    this.setContent(options.content);\n  } else {\n    googAsserts.fail('ngeo.message.Popup options requirest \"url\" or \"content\".');\n  }\n\n  if (options.autoDestroy !== undefined) {\n    this.setAutoDestroy(options.autoDestroy);\n  }\n\n  if (options.cls !== undefined) {\n    this.addClass(options.cls);\n  }\n\n  if (options.height !== undefined) {\n    this.setHeight(options.height);\n  }\n\n  if (options.title !== undefined) {\n    this.setTitle(options.title);\n  }\n\n  if (options.width !== undefined) {\n    this.setWidth(options.width);\n  }\n\n  this.setOpen(true);\n};\n\n\n/**\n * @param {angular.$compile} $compile Angular compile service.\n * @param {angular.Scope} $rootScope Angular rootScope service.\n * @param {angular.$sce} $sce Angular sce service.\n * @param {angular.$timeout} $timeout Angular timeout service.\n * @return {ngeox.PopupFactory} The function to create a popup.\n * @ngInject\n */\nexports.Factory = function($compile, $rootScope, $sce, $timeout) {\n  return (\n    /**\n     * @return {!ngeo.message.Popup} The popup instance.\n     */\n    function() {\n      return new exports($compile, $rootScope, $sce, $timeout);\n    }\n  );\n};\n\n/**\n * @type {angular.Module}\n */\nexports.module = angular.module('ngeoCreatePopup', [\n  ngeoMessagePopupComponent.name,\n]);\nexports.module.factory('ngeoCreatePopup', exports.Factory);\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/message/Popup.js","/**\n * @module ngeo.message.popupComponent\n */\nimport ngeoBase from 'ngeo/index.js';\n\nimport 'angular-sanitize';\n\n\nconst exports = angular.module('ngeoPopup', [\n  'ngSanitize',\n]);\n\nngeoBase.module.requires.push(exports.name);\n\n\nexports.value('ngeoPopupTemplateUrl',\n  /**\n     * @param {angular.JQLite} element Element.\n     * @param {angular.Attributes} attrs Attributes.\n     * @return {string} Template URL.\n     */\n  (element, attrs) => {\n    const templateUrl = attrs['ngeoPopupTemplateurl'];\n    return templateUrl !== undefined ? templateUrl :\n      `${ngeoBase.baseModuleTemplateUrl}/message/popupcomponent.html`;\n  });\n\n\n/**\n * Provides a directive used to show a popup over the page with\n * a title and content.\n *\n *\n * Things to know about this directive:\n *\n * - This directive is intented to be used along with the popup service.\n *\n * - By default the directive uses \"popup.html\" as its templateUrl. This can be\n *   changed by redefining the \"ngeoPopupTemplateUrl\" value.\n *\n * - The directive doesn't create any scope but relies on its parent scope.\n *   Properties like 'content', 'title' or 'open' come from the parent scope.\n *\n * @private\n * @param {string} ngeoPopupTemplateUrl URL to popup template.\n * @return {angular.Directive} Directive Definition Object.\n * @ngInject\n * @ngdoc directive\n * @ngname ngeoPopup\n */\nexports.directive_ = function(ngeoPopupTemplateUrl) {\n  return {\n    restrict: 'A',\n    templateUrl: ngeoPopupTemplateUrl,\n    /**\n     * @param {angular.Scope} scope Scope.\n     * @param {angular.JQLite} element Element.\n     * @param {angular.Attributes} attrs Atttributes.\n     */\n    link: (scope, element, attrs) => {\n      element.addClass('popover');\n\n      /**\n       * @param {jQuery.Event} evt Event.\n       */\n      scope.close = function(evt) {\n        if (evt) {\n          evt.stopPropagation();\n          evt.preventDefault();\n        }\n        element.addClass('hidden');\n      };\n\n      // Watch the open property\n      scope.$watch('open', (newVal, oldVal) => {\n        element.css('display', newVal ? 'block' : 'none');\n      });\n    }\n  };\n};\n\nexports.directive('ngeoPopup', exports.directive_);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/message/popupComponent.js","/**\n * @module app.popupservice\n */\nconst exports = {};\n\nimport './popupservice.css';\nimport './common_dependencies.js';\nimport ngeoBase from 'ngeo/index.js';\n\nimport ngeoMessagePopup from 'ngeo/message/Popup.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('app', [\n  ngeoBase.module.name,\n  ngeoMessagePopup.module.name,\n]);\n\n\n/**\n * @param {angular.$sce} $sce Angular sce service.\n * @param {ngeox.PopupFactory} ngeoCreatePopup Popup service.\n * @ngInject\n * @constructor\n */\nexports.MainController = function($sce, ngeoCreatePopup) {\n\n  /**\n   * @private\n   * @type {angular.$sce}\n   */\n  this.sce_ = $sce;\n\n  /**\n   * @private\n   * @type {ngeox.PopupFactory}\n   */\n  this.createPopup_ = ngeoCreatePopup;\n\n  // initialize tooltips\n  $('[data-toggle=\"tooltip\"]').tooltip({\n    container: 'body',\n    trigger: 'hover'\n  });\n\n};\n\n\n/**\n * @export\n */\nexports.MainController.prototype.simplePopup = function() {\n  const popup = this.createPopup_();\n  popup.setAutoDestroy(true);\n  popup.setTitle('Simple popup');\n  const content = this.sce_.trustAsHtml('This is a simple 400x300 px popup.');\n  popup.setContent(content);\n  popup.setWidth('400px');\n  popup.setHeight('300px');\n  popup.setOpen(true);\n};\n\n\n/**\n * @export\n */\nexports.MainController.prototype.iframePopup = function() {\n  const popup = this.createPopup_();\n  popup.setAutoDestroy(true);\n  popup.addClass('popup-with-iframe');\n  popup.setTitle('Iframe popup');\n  popup.setUrl('http://geomapfish.org/');\n  popup.setSize('400px', '300px');\n  popup.setOpen(true);\n};\n\n\n/**\n * @export\n */\nexports.MainController.prototype.heavyPopup = function() {\n  const popup = this.createPopup_();\n  popup.setAutoDestroy(true);\n  popup.setTitle(\n    'This is a popup with lots and lots of content and a very long title');\n  const content = this.sce_.trustAsHtml(\n    'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla eget' +\n    'quam at ex euismod bibendum et eget enim. Nulla sodales tortor ac' +\n    'sagittis aliquet. Ut malesuada quam vitae pulvinar porta. Nunc id' +\n    'magna id risus malesuada elementum eget id purus. Curabitur vel augue' +\n    'blandit, faucibus nulla quis, consequat tellus. Phasellus commodo,' +\n    'tellus et vulputate ultricies, nulla libero ornare arcu, quis' +\n    'fermentum sem diam quis tellus. Aliquam ut sapien tristique, lacinia' +\n    'ante et, lacinia arcu. Quisque sagittis eros at quam blandit' +\n    'gravida. Nulla sit amet enim semper, efficitur eros sit amet,' +\n    'porttitor libero. Fusce quis tellus est. Quisque ornare, ex eget' +\n    'luctus pharetra, nisl leo lobortis purus, sed tristique neque leo eget' +\n    'odio. Maecenas lobortis nisl ac magna mollis, ac pulvinar risus' +\n    'convallis. Donec ullamcorper sollicitudin maximus. Quisque bibendum' +\n    'elit sit amet ultrices ornare. Donec aliquam felis id urna ultrices' +\n    'scelerisque.'\n  );\n  popup.setContent(content);\n  popup.setOpen(true);\n};\n\n\n/**\n * @export\n */\nexports.MainController.prototype.openPopupWithContent = function() {\n  const popup = this.createPopup_();\n  const content = this.sce_.trustAsHtml(\n    'This popup was opened using the <code>open</code> method.');\n  popup.open({\n    autoDestroy: true,\n    content: content,\n    height: '200px',\n    title: 'Opened with \"open\"',\n    width: '300px'\n  });\n};\n\n\n/**\n * @export\n */\nexports.MainController.prototype.openPopupWithUrl = function() {\n  const popup = this.createPopup_();\n  popup.open({\n    autoDestroy: true,\n    cls: 'popup-with-iframe',\n    height: '300px',\n    title: 'Opened with \"open\" and \"iframe\"',\n    url: 'http://geomapfish.org/',\n    width: '400px'\n  });\n};\n\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./examples/popupservice.js"],"sourceRoot":""}