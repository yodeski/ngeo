{"version":3,"sources":["webpack:///./examples/elevationProfile.js"],"names":["__webpack_require__","exports","module","angular","ngeoBase","name","ngeoMapModule","ngeoProfileElevationComponent","MainController","$http","$scope","_this","this","scope_","source","olSourceVector","map","olMap","layers","olLayerImage","olSourceImageWMS","url","crossOrigin","attributions","params","LAYERS","FORMAT","serverType","olLayerVector","view","olView","projection","extent","zoom","center","vectorLayer","snappedPoint_","olFeature","getSource","addFeature","setMap","profilePoisData","sort","dist","title","id","profileData","undefined","get","then","resp","data","i","len","length","lineString","olGeomLineString","p","appendCoordinate","x","y","size","getSize","getView","fit","getExtent","on","evt","dragging","coordinate","getEventCoordinate","originalEvent","snapToGeometry","getFeatures","getGeometry","typedFunctionsFactory","type","key","opt_childKey","item","distanceExtractor","types","linesConfiguration","line1","style","zExtractor","poiExtractor","z","opt_z","hoverCallback","point","setGeometry","olGeomPoint","bind","outCallback","profileOptions","profileHighlight","prototype","geometry","closestPoint","getClosestPoint","dx","dy","pixelDist","Math","sqrt","getResolution","$apply","controller"],"mappings":"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","file":"elevationProfile.52827c0790b7f2cec3c5.js","sourcesContent":["/**\n * @module app.elevationProfile\n */\nconst exports = {};\n\nimport './elevationProfile.css';\nimport './common_dependencies.js';\n/** @suppress {extraRequire} */\nimport ngeoProjEPSG21781 from 'ngeo/proj/EPSG21781.js';\n\nimport olFeature from 'ol/Feature.js';\nimport olMap from 'ol/Map.js';\nimport olView from 'ol/View.js';\nimport olGeomGeometryLayout from 'ol/geom/GeometryLayout.js';\nimport olGeomLineString from 'ol/geom/LineString.js';\nimport olGeomPoint from 'ol/geom/Point.js';\nimport olLayerImage from 'ol/layer/Image.js';\nimport olLayerVector from 'ol/layer/Vector.js';\nimport olSourceImageWMS from 'ol/source/ImageWMS.js';\nimport olSourceVector from 'ol/source/Vector.js';\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoMapModule from 'ngeo/map/module.js';\nimport ngeoProfileElevationComponent from 'ngeo/profile/elevationComponent.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('app', [\n  ngeoBase.module.name,\n  ngeoMapModule.name,\n  ngeoProfileElevationComponent.name,\n]);\n\n\n/**\n * @constructor\n * @param {angular.$http} $http The $http angular service.\n * @param {angular.Scope} $scope The $scope angular service.\n * @ngInject\n */\nexports.MainController = function($http, $scope) {\n\n  /**\n   * @type {angular.Scope}\n   * @private\n   */\n  this.scope_ = $scope;\n\n  const source = new olSourceVector();\n\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map = new olMap({\n    layers: [\n      new olLayerImage({\n        source: new olSourceImageWMS({\n          url: 'http://wms.geo.admin.ch/',\n          crossOrigin: 'anonymous',\n          attributions: '&copy; ' +\n            '<a href=\"http://www.geo.admin.ch/internet/geoportal/' +\n            'en/home.html\">Pixelmap 1:500000 / geo.admin.ch</a>',\n          params: {\n            'LAYERS': 'ch.swisstopo.pixelkarte-farbe-pk1000.noscale',\n            'FORMAT': 'image/jpeg'\n          },\n          serverType: /** @type {ol.source.WMSServerType} */ ('mapserver')\n        })\n      }),\n      new olLayerVector({\n        source\n      })\n    ],\n    view: new olView({\n      projection: 'EPSG:21781',\n      extent: [420000, 30000, 900000, 350000],\n      zoom: 0,\n      center: [0, 0]\n    })\n  });\n\n  const map = this.map;\n\n  const vectorLayer = new olLayerVector({\n    source: new olSourceVector()\n  });\n\n  this.snappedPoint_ = new olFeature();\n  vectorLayer.getSource().addFeature(this.snappedPoint_);\n\n  // Use vectorLayer.setMap(map) rather than map.addLayer(vectorLayer). This\n  // makes the vector layer \"unmanaged\", meaning that it is always on top.\n  vectorLayer.setMap(map);\n\n  /**\n   * @type {Array.<Object>}\n   * @export\n   */\n  this.profilePoisData = [\n    {sort: 1, dist: 1000, title: 'First POI', id: 12345},\n    {sort: 2, dist: 3000, title: 'Second POI', id: 12346}\n  ];\n\n  /**\n   * @type {Object|undefined}\n   * @export\n   */\n  this.profileData = undefined;\n\n  $http.get('data/profile.json').then((resp) => {\n    const data = resp.data['profile'];\n    this.profileData = data;\n\n    let i;\n    const len = data.length;\n    const lineString = new olGeomLineString([],\n      /** @type {ol.geom.GeometryLayout} */ ('XYM'));\n    for (i = 0; i < len; i++) {\n      const p = data[i];\n      lineString.appendCoordinate([p.x, p.y, p.dist]);\n    }\n    source.addFeature(new olFeature(lineString));\n\n    const size = /** @type {ol.Size} */ (this.map.getSize());\n    map.getView().fit(source.getExtent(), {size});\n  });\n\n\n  map.on('pointermove', (evt) => {\n    if (evt.dragging) {\n      return;\n    }\n    const coordinate = map.getEventCoordinate(evt.originalEvent);\n    this.snapToGeometry(coordinate, source.getFeatures()[0].getGeometry());\n  });\n\n\n  /**\n   * Factory for creating simple getter functions for extractors.\n   * If the value is in a child property, the opt_childKey must be defined.\n   * The type parameter is used by closure to type the returned function.\n   * @param {T} type An object of the expected result type.\n   * @param {string} key Key used for retrieving the value.\n   * @param {string=} opt_childKey Key of a child object.\n   * @template T\n   * @return {function(Object): T} Getter function.\n   */\n  const typedFunctionsFactory = function(type, key, opt_childKey) {\n    return (\n    /**\n         * @param {Object} item\n         * @return {T}\n         * @template T\n         */\n      function(item) {\n        if (opt_childKey !== undefined) {\n          item = item[opt_childKey];\n        }\n        return item[key];\n      });\n  };\n\n  const types = {\n    number: 1,\n    string: ''\n  };\n\n\n  const distanceExtractor = typedFunctionsFactory(types.number, 'dist');\n\n\n  const linesConfiguration = {\n    'line1': {\n      style: {},\n      zExtractor: typedFunctionsFactory(types.number, 'mnt', 'values')\n    }\n  };\n\n\n  /**\n   * @type {ngeox.profile.PoiExtractor}\n   */\n  const poiExtractor = {\n    sort: typedFunctionsFactory(types.number, 'sort'),\n    id: typedFunctionsFactory(types.string, 'id'),\n    dist: typedFunctionsFactory(types.number, 'dist'),\n    title: typedFunctionsFactory(types.string, 'title'),\n    /**\n      * @param {Object} item POI.\n      * @param {number=} opt_z Z value.\n      * @return {number} Z value.\n      */\n    z: (item, opt_z) => {\n      if (opt_z !== undefined) {\n        item['z'] = opt_z;\n      }\n      return item['z'];\n    }\n  };\n\n  /**\n   * @param {Object} point Point.\n   */\n  const hoverCallback = function(point) {\n    // An item in the list of points given to the profile.\n    this.point = point;\n    this.snappedPoint_.setGeometry(new olGeomPoint([point.x, point.y]));\n  }.bind(this);\n\n  const outCallback = function() {\n    this.point = null;\n    this.snappedPoint_.setGeometry(null);\n  }.bind(this);\n\n\n  /**\n   * @type {Object}\n   * @export\n   */\n  this.profileOptions = {\n    distanceExtractor,\n    linesConfiguration,\n    poiExtractor,\n    hoverCallback,\n    outCallback\n  };\n\n  /**\n   * @type {Object}\n   * @export\n   */\n  this.point = null;\n\n  /**\n   * @type {number|undefined}\n   * @export\n   */\n  this.profileHighlight = undefined;\n};\n\n\n/**\n * @param {ol.Coordinate} coordinate The current pointer coordinate.\n * @param {ol.geom.Geometry|undefined} geometry The geometry to snap to.\n */\nexports.MainController.prototype.snapToGeometry = function(coordinate, geometry) {\n  const closestPoint = geometry.getClosestPoint(coordinate);\n  // compute distance to line in pixels\n  const dx = closestPoint[0] - coordinate[0];\n  const dy = closestPoint[1] - coordinate[1];\n  const dist = Math.sqrt(dx * dx + dy * dy);\n  const pixelDist = dist / this.map.getView().getResolution();\n\n  if (pixelDist < 8) {\n    this.profileHighlight = closestPoint[2];\n  } else {\n    this.profileHighlight = -1;\n  }\n  this.scope_.$apply();\n};\n\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./examples/elevationProfile.js"],"sourceRoot":""}