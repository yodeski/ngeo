{"version":3,"sources":["webpack:///./src/source/AsitVD.js","webpack:///./examples/layerorder.js","webpack:///./src/misc/syncArrays.js"],"names":["__webpack_require__","asitVDResolutions","asitVDTileGrid","olTilegridWMTS","extent","resolutions","matrixIds","map","value","index","exports","options","_classCallCheck","this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","attributions","url","projection","requestEncoding","layer","style","matrixSet","format","tileGrid","_inherits","olSourceWMTS","module","angular","ngeoBase","name","ngeoMapModule","ngeoMiscSortableComponent","MainController","$scope","asitvd","olLayerTile","source","ngeoSourceAsitVD","set","boundaries","olSourceTileWMS","params","LAYERS","serverType","waterBodies","cities","olMap","layers","view","olView","center","zoom","roads_","selectedLayers","_syncArrays2","default","getLayers","getArray","$watchCollection","render","prototype","toggleRoadsLayer","val","undefined","indexOf","addLayer","removeLayer","controller","arr1","arr2","reverse","scope","filter","dereg1","i","ii","j","length","dereg2","googAsserts","assert"],"mappings":"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","file":"layerorder.cc16c10b354843438051.js","sourcesContent":["/**\n * @module ngeo.source.AsitVD\n */\nimport olSourceWMTS from 'ol/source/WMTS.js';\nimport olTilegridWMTS from 'ol/tilegrid/WMTS.js';\n\n\n/**\n * @const {!Array.<number>}\n */\nconst asitVDResolutions = [\n  4000, 3750, 3500, 3250, 3000, 2750, 2500, 2250, 2000, 1750, 1500, 1250,\n  1000, 750, 650, 500, 250, 100, 50, 20, 10, 5, 2.5, 2, 1.5, 1, 0.5\n];\n\n\n/**\n * @const {ol.tilegrid.WMTS}\n */\nconst asitVDTileGrid = new olTilegridWMTS({\n  extent: [420000, 30000, 900000, 350000],\n  resolutions: asitVDResolutions,\n  matrixIds: asitVDResolutions.map((value, index) => `${index}`)\n});\n\n\n/**\n * Layer source for the ASIT VD tile server.\n * @see https://www.asitvd.ch/chercher/geoservices/fond-de-plan-asit-vd.html\n *\n */\nconst exports = class extends olSourceWMTS {\n\n  /**\n   * @param {ngeox.source.AsitVDOptions} options WMTS options.\n   */\n  constructor(options) {\n    super({\n      attributions: 'géodonnées &copy; Etat de Vaud & &copy; contributeurs OpenStreetMap',\n      url: 'https://ows{1-4}.asitvd.ch/wmts/1.0.0/{Layer}/default/default/0/' +\n        '21781/{TileMatrix}/{TileRow}/{TileCol}.png',\n      projection: 'EPSG:21781',\n      requestEncoding: 'REST',\n      layer: options.layer,\n      style: 'default',\n      matrixSet: '21781',\n      format: 'image/png',\n      tileGrid: asitVDTileGrid\n    });\n  }\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/source/AsitVD.js","/**\n * @module app.layerorder\n */\nconst exports = {};\n\nimport './layerorder.css';\nimport './common_dependencies.js';\nimport ngeoBase from 'ngeo/index.js';\n\nimport ngeoMapModule from 'ngeo/map/module.js';\n\n/** @suppress {extraRequire} */\nimport ngeoMiscSortableComponent from 'ngeo/misc/sortableComponent.js';\n\nimport ngeoMiscSyncArrays from 'ngeo/misc/syncArrays.js';\nimport ngeoSourceAsitVD from 'ngeo/source/AsitVD.js';\n\n/** @suppress {extraRequire} */\nimport ngeoProjEPSG21781 from 'ngeo/proj/EPSG21781.js';\n\nimport olMap from 'ol/Map.js';\nimport olView from 'ol/View.js';\nimport olLayerTile from 'ol/layer/Tile.js';\nimport olSourceTileWMS from 'ol/source/TileWMS.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('app', [\n  ngeoBase.module.name,\n  ngeoMapModule.name,\n  ngeoMiscSortableComponent.name,\n]);\n\n\n/**\n * @param {angular.Scope} $scope Scope.\n * @constructor\n * @export\n * @ngInject\n */\nexports.MainController = function($scope) {\n\n  /** @type {ol.layer.Tile} */\n  const asitvd = new olLayerTile({\n    source: new ngeoSourceAsitVD({\n      layer: 'asitvd.fond_couleur'\n    })\n  });\n  asitvd.set('name', 'asitvd');\n\n  /** @type {ol.layer.Tile} */\n  const boundaries = new olLayerTile({\n    source: new olSourceTileWMS({\n      url: 'https://wms.geo.admin.ch',\n      params: {'LAYERS': 'ch.swisstopo.swissboundaries3d-gemeinde-flaeche.fill'},\n      serverType: 'mapserver'\n    })\n  });\n  boundaries.set('name', 'Boundaries');\n\n  /** @type {ol.layer.Tile} */\n  const waterBodies = new olLayerTile({\n    source: new olSourceTileWMS({\n      url: 'https://wms.geo.admin.ch',\n      params: {'LAYERS': 'ch.swisstopo.geologie-gravimetrischer_atlas'},\n      serverType: 'mapserver'\n    })\n  });\n  waterBodies.set('name', 'Water bodies');\n\n  /** @type {ol.layer.Tile} */\n  const cities = new olLayerTile({\n    source: new olSourceTileWMS({\n      url: 'https://wms.geo.admin.ch',\n      params: {'LAYERS': 'ch.swisstopo.dreiecksvermaschung'},\n      serverType: 'mapserver'\n    })\n  });\n  cities.set('name', 'Cities');\n\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map = new olMap({\n    layers: [\n      asitvd,\n      boundaries,\n      waterBodies,\n      cities\n    ],\n    view: new olView({\n      projection: 'EPSG:21781',\n      resolutions: [1000, 500, 200, 100, 50, 20, 10, 5, 2.5, 2, 1, 0.5],\n      center: [600000, 200000],\n      zoom: 1\n    })\n  });\n\n  const map = this.map;\n\n  /**\n   * @type {ol.layer.Tile}\n   * @private\n   */\n  this.roads_ = new olLayerTile({\n    source: new olSourceTileWMS({\n      url: 'https://wms.geo.admin.ch',\n      params: {'LAYERS': 'ch.bafu.laerm-strassenlaerm_tag'},\n      serverType: 'mapserver'\n    })\n  });\n  this.roads_.set('name', 'Roads');\n\n  /**\n   * @type {Array.<ol.layer.Base>}\n   * @const\n   * @export\n   */\n  this.selectedLayers = [];\n\n  const selectedLayers = this.selectedLayers;\n\n  ngeoMiscSyncArrays(map.getLayers().getArray(), selectedLayers, true, $scope,\n    layerFilter);\n\n  // watch any change on layers array to refresh the map\n  $scope.$watchCollection(() => selectedLayers, () => {\n    map.render();\n  });\n\n  /**\n   * @param {ol.layer.Base} layer Layer.\n   * @return {boolean} `false` if the layer shouldn't be part of the selected\n   *     layers.\n   */\n  function layerFilter(layer) {\n    return layer !== asitvd;\n  }\n\n};\n\n\n/**\n * Add/remove the \"Roads\" layer when used as a setter, and return whether\n * the \"Roads\" layer is in the map when used as a getter.\n * @param {boolean|undefined} val Value.\n * @return {boolean|undefined} `true` if the \"Roads\" layer is in the map,\n *     `false` if the \"Roads\" layer is not in the map, `undefined` if the\n *     function is used as setter.\n * @export\n */\nexports.MainController.prototype.toggleRoadsLayer = function(val) {\n  if (val === undefined) {\n    return this.map.getLayers().getArray().indexOf(this.roads_) >= 0;\n  } else {\n    if (val) {\n      this.map.addLayer(this.roads_);\n    } else {\n      this.map.removeLayer(this.roads_);\n    }\n  }\n};\n\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./examples/layerorder.js","/**\n * @module ngeo.misc.syncArrays\n */\nimport googAsserts from 'goog/asserts.js';\nimport ngeoBase from 'ngeo/index.js';\n\n/**\n * Provides a function that synchronizes two arrays, arr1 and\n * arr2. arr2 is a subset of arr1, it includes the elements of arr1 that passes\n * the filter. When elements are added to/removed from arr1, arr2 is updated to\n * include the elements of arr1 that pass the filter. When the order of\n * elements in arr2 changes, arr1 is reordered to have the same order as arr2.\n *\n * This can for example be used to synchronize the array of layers in the map\n * with the array of selected layers, where layers may be added to/removed from\n * the map, and the order of selected layers may change.\n *\n *     let dereg = ngeoSyncArrays(map.getLayers().getArray(), selectedLayers,\n *         true, scope, function(layer) {\n *           // exclude the layer at index 0 in the map\n *           return map.getLayers().indexOf(layer) !== 0;\n *         });\n *\n * This will return a function that can be called to cancel synchronization.\n *\n * @param {Array.<T>} arr1 Array 1.\n * @param {Array.<T>} arr2 Array 2.\n * @param {boolean} reverse `true` if arr2 is in reverse order, `false`\n *     otherwise.\n * @param {angular.Scope} scope Angular scope. Used to watch arr1 and arr2\n *     using $watchCollection.\n * @param {function(T):boolean} filter Filter function.\n * @return {function()} Function to call to stop synchronization\n * @template T\n */\nconst exports = function(arr1, arr2, reverse, scope, filter) {\n\n\n  // Update arr2 when elements are added to, or removed from, arr1.\n\n  const dereg1 = scope.$watchCollection(() => arr1, () => {\n    let i, ii, j;\n    if (reverse) {\n      for (i = arr1.length - 1, j = 0; i >= 0; --i) {\n        if (filter(arr1[i])) {\n          arr2[j++] = arr1[i];\n        }\n      }\n    } else {\n      for (i = 0, ii = arr1.length, j = 0; i < ii; ++i) {\n        if (filter(arr1[i])) {\n          arr2[j++] = arr1[i];\n        }\n      }\n    }\n    arr2.length = j;\n  });\n\n\n  // Update arr1 when the order of elements changes in arr2.\n\n  const dereg2 = scope.$watchCollection(() => arr2, () => {\n    let i, ii, j;\n    if (reverse) {\n      for (i = 0, ii = arr1.length, j = arr2.length - 1; i < ii; ++i) {\n        if (filter(arr1[i])) {\n          arr1[i] = arr2[j--];\n        }\n      }\n      googAsserts.assert(j == -1);\n    } else {\n      for (i = 0, ii = arr1.length, j = 0; i < ii; ++i) {\n        if (filter(arr1[i])) {\n          arr1[i] = arr2[j++];\n        }\n      }\n      googAsserts.assert(j == arr2.length);\n    }\n  });\n\n  return function() {\n    dereg1();\n    dereg2();\n  };\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/misc/syncArrays.js"],"sourceRoot":""}