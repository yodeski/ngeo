{"version":3,"sources":["webpack:///./src/message/Notification.js","webpack:///./examples/notification.js","webpack:///./src/message/Message.js"],"names":["__webpack_require__","olBase","exports","$timeout","ngeoMessageMessage","call","this","timeout_","container","angular","element","document","body","append","container_","cache_","inherits","DEFAULT_DELAY_","prototype","notify","object","show","clear","uid","clearMessageByCacheItem_","parseInt","showMessage","message","_this","type","googAsserts","assertString","classNames","Type","ERROR","push","INFORMATION","SUCCESS","WARNING","el","join","target","html","msg","addClass","delay","undefined","item","getUid","promise","alert","cancel","module","service","ngeoBase","requires","name","ngeoMessageNotification","MainController","ngeoNotification","notification","i_","$","tooltip","trigger","notifyMulti","notifyTarget","notifyQuick","controller","getMessageObjects","forEach","error","info","success","warn","opt_type","msgObjects","msgObject","defaultType","Array","isArray"],"mappings":"qGAGA,QAAAA,EAAA,QACAA,EAAA,QACAA,EAAA,KACYC,0JAAZD,EAAA,uDAgBA,IAAME,EAAU,SAASC,GAEvBC,UAAmBC,KAAKC,MAMxBA,KAAKC,SAAWJ,EAEhB,IAAMK,EAAYC,QAAQC,QAAQ,yCAClCD,QAAQC,QAAQC,SAASC,MAAMC,OAAOL,GAMtCF,KAAKQ,WAAaN,EAMlBF,KAAKS,yDAIPd,EAAOe,SAASd,EAASE,WAQzBF,EAAQe,eAAiB,IAazBf,EAAQgB,UAAUC,OAAS,SAASC,GAClCd,KAAKe,KAAKD,IAQZlB,EAAQgB,UAAUI,MAAQ,WACxB,IAAK,IAAMC,KAAOjB,KAAKS,OACrBT,KAAKkB,yBAAyBlB,KAAKS,OAAOU,SAASF,EAAK,OAQ5DrB,EAAQgB,UAAUQ,YAAc,SAASC,GAAS,IAAAC,EAAAtB,KAC1CuB,EAAOF,EAAQE,KACrBC,UAAYC,aAAaF,EAAM,uBAE/B,IAAMG,GAAc,QAAS,QAC7B,OAAQH,GACN,KAAKzB,UAAmB6B,KAAKC,MAC3BF,EAAWG,KAAK,gBAChB,MACF,KAAK/B,UAAmB6B,KAAKG,YAC3BJ,EAAWG,KAAK,cAChB,MACF,KAAK/B,UAAmB6B,KAAKI,QAC3BL,EAAWG,KAAK,iBAChB,MACF,KAAK/B,UAAmB6B,KAAKK,QAC3BN,EAAWG,KAAK,iBAMpB,IAAMI,EAAK9B,QAAQC,QAAR,eAA+BsB,EAAWQ,KAAK,KAA/C,aAGPb,EAAQc,OACEhC,QAAQC,QAAQiB,EAAQc,QAExBnC,KAAKQ,YAGTD,OAAO0B,GACjBA,EAAGG,KAAKf,EAAQgB,KAAKC,SAAS,MAE9B,IAAMC,OAA0BC,IAAlBnB,EAAQkB,MAAsBlB,EAAQkB,MAClD3C,EAAQe,eAEJ8B,GACJR,MAKIhB,EAAMtB,EAAO+C,OAAOT,GAC1BQ,EAAKE,QAAU3C,KAAKC,SAAS,WAC3BgC,EAAGW,MAAM,gBACFtB,EAAKb,OAAOQ,IAClBsB,GAEHvC,KAAKS,OAAOQ,GAAOwB,GASrB7C,EAAQgB,UAAUM,yBAA2B,SAASuB,GACpD,IAAMR,EAAKQ,EAAKR,GACVU,EAAUF,EAAKE,QACf1B,EAAMtB,EAAO+C,OAAOT,GAG1BA,EAAGW,MAAM,SAIT5C,KAAKC,SAAS4C,OAAOF,UAGd3C,KAAKS,OAAOQ,KAgBrBrB,EAAQkD,OAAS3C,QAAQ2C,OAAO,wBAGjBC,QAAQ,mBAAoBnD,GAE3CoD,UAASF,OAAOG,SAASpB,KAAKjC,EAAQkD,OAAOI,gBAG9BtD,6ICnLfF,EAAA,KACAA,EAAA,IACA,QAAAA,EAAA,QAEAA,EAAA,SACAA,EAAA,yDAPA,IAAME,KAWNA,EAAQkD,OAAS3C,QAAQ2C,OAAO,OAC9BE,UAASF,OAAOI,KAChBC,UAAwBL,OAAOI,OASjCtD,EAAQwD,eAAiB,SAASC,GAMhCrD,KAAKsD,aAAeD,EAMpBrD,KAAKuD,GAAK,EAGVC,EAAE,2BAA2BC,SAC3BvD,UAAW,OACXwD,QAAS,WAjBb9D,EAAQwD,4CA4BRxD,EAAQwD,eAAexC,UAAU+C,YAAc,WAC7C3D,KAAKsD,aAAazC,SAChBwB,KAAM,UAAWrC,KAAKuD,MAAMrB,KAAK,IACjCX,KAAMzB,UAAmB6B,KAAKC,QAE9BS,KAAM,YAAarC,KAAKuD,MAAMrB,KAAK,IACnCX,KAAMzB,UAAmB6B,KAAKK,UAE9BK,KAAM,gBAAiBrC,KAAKuD,MAAMrB,KAAK,IACvCX,KAAMzB,UAAmB6B,KAAKG,cAE9BO,KAAM,YAAarC,KAAKuD,MAAMrB,KAAK,IACnCX,KAAMzB,UAAmB6B,KAAKI,YAUlCnC,EAAQwD,eAAexC,UAAUgD,aAAe,WAC9C5D,KAAKsD,aAAazC,QAChBwB,IAAK,2BACLF,OAAQhC,QAAQC,QAAQ,gBACxBmB,KAAMzB,UAAmB6B,KAAKC,SAQlChC,EAAQwD,eAAexC,UAAUiD,YAAc,WAC7C7D,KAAKsD,aAAazC,QAChB0B,MAAO,IACPF,IAAK,mBACLd,KAAMzB,UAAmB6B,KAAKI,WAKlCnC,EAAQkD,OAAOgB,WAAW,iBAAkBlE,EAAQwD,0BAGrCxD,wHCzFf,IAAMA,EAAU,aAUhBA,EAAQgB,UAAUQ,YAAc,SAASC,KAWzCzB,EAAQgB,UAAUG,KAAO,SAASD,GACbd,KAAK+D,kBAAkBjD,GAC/BkD,QAAQhE,KAAKoB,YAAapB,OAUvCJ,EAAQgB,UAAUqD,MAAQ,SAAS5C,GACjCrB,KAAKe,KAAKf,KAAK+D,kBAAkB1C,EAASzB,EAAQ+B,KAAKC,SASzDhC,EAAQgB,UAAUsD,KAAO,SAAS7C,GAChCrB,KAAKe,KAAKf,KAAK+D,kBAAkB1C,EAASzB,EAAQ+B,KAAKG,eASzDlC,EAAQgB,UAAUuD,QAAU,SAAS9C,GACnCrB,KAAKe,KAAKf,KAAK+D,kBAAkB1C,EAASzB,EAAQ+B,KAAKI,WASzDnC,EAAQgB,UAAUwD,KAAO,SAAS/C,GAChCrB,KAAKe,KAAKf,KAAK+D,kBAAkB1C,EAASzB,EAAQ+B,KAAKK,WAezDpC,EAAQgB,UAAUmD,kBAAoB,SAASjD,EAAQuD,GACrD,IAAMC,KACFC,EAAY,KACVC,EAAc5E,EAAQ+B,KAAKG,YAiCjC,MA/BsB,iBAAXhB,EACTwD,EAAWzC,MACTQ,IAAKvB,EACLS,UAAmBiB,IAAb6B,EAAyBA,EAAWG,IAEnCC,MAAMC,QAAQ5D,GACvBA,EAAOkD,QAAQ,SAAC3B,GACQ,iBAAXvB,EACTyD,GACElC,IAAKA,EACLd,UAAmBiB,IAAb6B,EAAyBA,EAAWG,IAG5CD,EAAYlC,OACKG,IAAb6B,IACFE,EAAUhD,KAAO8C,IAGrBC,EAAWzC,KAAK0C,IACfvE,OAEHuE,EAAYzD,OACK0B,IAAb6B,IACFE,EAAUhD,KAAO8C,QAEI7B,IAAnB+B,EAAUhD,OACZgD,EAAUhD,KAAOiD,GAEnBF,EAAWzC,KAAK0C,IAGXD,GAQT1E,EAAQ+B,MAKNC,MAAO,QAKPE,YAAa,cAKbC,QAAS,UAKTC,QAAS,qBAIIpC","file":"notification.dfb20f350ee5550d9979.js","sourcesContent":["/**\n * @module ngeo.message.Notification\n */\nimport googAsserts from 'goog/asserts.js';\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoMessageMessage from 'ngeo/message/Message.js';\nimport * as olBase from 'ol/index.js';\n\n/**\n * Provides methods to display any sort of messages, notifications, errors,\n * etc. Requires Bootstrap library (both CSS and JS) to display the alerts\n * properly.\n *\n * @constructor\n * @struct\n * @extends {ngeo.message.Message}\n * @param {angular.$timeout} $timeout Angular timeout service.\n * @ngdoc service\n * @ngname ngeoNotification\n * @abstract\n * @ngInject\n */\nconst exports = function($timeout) {\n\n  ngeoMessageMessage.call(this);\n\n  /**\n   * @type {angular.$timeout}\n   * @private\n   */\n  this.timeout_ = $timeout;\n\n  const container = angular.element('<div class=\"ngeo-notification\"></div>');\n  angular.element(document.body).append(container);\n\n  /**\n   * @type {angular.JQLite}\n   * @private\n   */\n  this.container_ = container;\n\n  /**\n   * @type {Object.<number, ngeo.message.Notification.CacheItem>}\n   * @private\n   */\n  this.cache_ = {};\n\n};\n\nolBase.inherits(exports, ngeoMessageMessage);\n\n\n/**\n * Default delay (in milliseconds) a message should be displayed.\n * @type {number}\n * @private\n */\nexports.DEFAULT_DELAY_ = 7000;\n\n\n// MAIN API METHODS\n\n\n/**\n * Display the given message string or object or list of message strings or\n * objects.\n * @param {string|Array.<string>|ngeox.Message|Array.<ngeox.Message>}\n *     object A message or list of messages as text or configuration objects.\n * @export\n */\nexports.prototype.notify = function(object) {\n  this.show(object);\n};\n\n\n/**\n * Clears all messages that are currently being shown.\n * @export\n */\nexports.prototype.clear = function() {\n  for (const uid in this.cache_) {\n    this.clearMessageByCacheItem_(this.cache_[parseInt(uid, 10)]);\n  }\n};\n\n\n/**\n * @override\n */\nexports.prototype.showMessage = function(message) {\n  const type = message.type;\n  googAsserts.assertString(type, 'Type should be set.');\n\n  const classNames = ['alert', 'fade'];\n  switch (type) {\n    case ngeoMessageMessage.Type.ERROR:\n      classNames.push('alert-danger');\n      break;\n    case ngeoMessageMessage.Type.INFORMATION:\n      classNames.push('alert-info');\n      break;\n    case ngeoMessageMessage.Type.SUCCESS:\n      classNames.push('alert-success');\n      break;\n    case ngeoMessageMessage.Type.WARNING:\n      classNames.push('alert-warning');\n      break;\n    default:\n      break;\n  }\n\n  const el = angular.element(`<div class=\"${classNames.join(' ')}\"></div>`);\n  let container;\n\n  if (message.target) {\n    container = angular.element(message.target);\n  } else {\n    container = this.container_;\n  }\n\n  container.append(el);\n  el.html(message.msg).addClass('in');\n\n  const delay = message.delay !== undefined ? message.delay :\n    exports.DEFAULT_DELAY_;\n\n  const item = /** @type {ngeo.message.Notification.CacheItem} */ ({\n    el\n  });\n\n  // Keep a reference to the promise, in case we want to manually cancel it\n  // before the delay\n  const uid = olBase.getUid(el);\n  item.promise = this.timeout_(() => {\n    el.alert('close');\n    delete this.cache_[uid];\n  }, delay);\n\n  this.cache_[uid] = item;\n};\n\n\n/**\n * Clear a message using its cache item.\n * @param {ngeo.message.Notification.CacheItem} item Cache item.\n * @private\n */\nexports.prototype.clearMessageByCacheItem_ = function(item) {\n  const el = item.el;\n  const promise = item.promise;\n  const uid = olBase.getUid(el);\n\n  // Close the message\n  el.alert('close');\n\n  // Cancel timeout in case we want to stop before delay. If called by the\n  // timeout itself, then this has no consequence.\n  this.timeout_.cancel(promise);\n\n  // Delete the cache item\n  delete this.cache_[uid];\n};\n\n\n/**\n * @typedef {{\n *     el: angular.JQLite,\n *     promise: angular.$q.Promise\n * }}\n */\nexports.CacheItem;\n\n\n/**\n * @type {angular.Module}\n */\nexports.module = angular.module('ngeoNotification', [\n]);\n\nexports.module.service('ngeoNotification', exports);\n\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/message/Notification.js","/**\n * @module app.notification\n */\nconst exports = {};\n\nimport './notification.css';\nimport './common_dependencies.js';\nimport ngeoBase from 'ngeo/index.js';\n\nimport ngeoMessageMessage from 'ngeo/message/Message.js';\nimport ngeoMessageNotification from 'ngeo/message/Notification.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('app', [\n  ngeoBase.module.name,\n  ngeoMessageNotification.module.name,\n]);\n\n\n/**\n * @param {ngeo.message.Notification} ngeoNotification Ngeo notification service.\n * @ngInject\n * @constructor\n */\nexports.MainController = function(ngeoNotification) {\n\n  /**\n   * @type {ngeo.message.Notification}\n   * @export\n   */\n  this.notification = ngeoNotification;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.i_ = 1;\n\n  // initialize tooltips\n  $('[data-toggle=\"tooltip\"]').tooltip({\n    container: 'body',\n    trigger: 'hover'\n  });\n\n};\n\n\n/**\n * Demonstrates how to display multiple messages at once with the notification\n * service.\n * @export\n */\nexports.MainController.prototype.notifyMulti = function() {\n  this.notification.notify([{\n    msg: ['Error #', this.i_++].join(''),\n    type: ngeoMessageMessage.Type.ERROR\n  }, {\n    msg: ['Warning #', this.i_++].join(''),\n    type: ngeoMessageMessage.Type.WARNING\n  }, {\n    msg: ['Information #', this.i_++].join(''),\n    type: ngeoMessageMessage.Type.INFORMATION\n  }, {\n    msg: ['Success #', this.i_++].join(''),\n    type: ngeoMessageMessage.Type.SUCCESS\n  }]);\n};\n\n\n/**\n * Demonstrates how to display a message in an other target than the original\n * one defined by the notification service.\n * @export\n */\nexports.MainController.prototype.notifyTarget = function() {\n  this.notification.notify({\n    msg: 'Error in an other target',\n    target: angular.element('#my-messages'),\n    type: ngeoMessageMessage.Type.ERROR\n  });\n};\n\n/**\n * Demonstrates how to display a message for a specific number of seconds.\n * @export\n */\nexports.MainController.prototype.notifyQuick = function() {\n  this.notification.notify({\n    delay: 1000,\n    msg: 'Lasts one second',\n    type: ngeoMessageMessage.Type.SUCCESS\n  });\n};\n\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./examples/notification.js","/**\n * @module ngeo.message.Message\n */\n/**\n * Abstract class for services that display messages.\n *\n * @constructor\n * @struct\n * @abstract\n */\nconst exports = function() {};\n\n\n/**\n * Show the message.\n *\n * @abstract\n * @param {ngeox.Message} message Message.\n * @protected\n */\nexports.prototype.showMessage = function(message) {};\n\n\n/**\n * Show disclaimer message string or object or list of disclame message\n * strings or objects.\n *\n * @param {string|Array.<string>|ngeox.Message|Array.<ngeox.Message>}\n *     object A message or list of messages as text or configuration objects.\n * @export\n */\nexports.prototype.show = function(object) {\n  const msgObjects = this.getMessageObjects(object);\n  msgObjects.forEach(this.showMessage, this);\n};\n\n\n/**\n * Display the given error message or list of error messages.\n *\n * @param {string|Array.<string>} message Message or list of messages.\n * @export\n */\nexports.prototype.error = function(message) {\n  this.show(this.getMessageObjects(message, exports.Type.ERROR));\n};\n\n\n/**\n * Display the given info message or list of info messages.\n * @param {string|Array.<string>} message Message or list of messages.\n * @export\n */\nexports.prototype.info = function(message) {\n  this.show(this.getMessageObjects(message, exports.Type.INFORMATION));\n};\n\n\n/**\n * Display the given success message or list of success messages.\n * @param {string|Array.<string>} message Message or list of messages.\n * @export\n */\nexports.prototype.success = function(message) {\n  this.show(this.getMessageObjects(message, exports.Type.SUCCESS));\n};\n\n\n/**\n * Display the given warning message or list of warning messages.\n * @param {string|Array.<string>} message Message or list of messages.\n * @export\n */\nexports.prototype.warn = function(message) {\n  this.show(this.getMessageObjects(message, exports.Type.WARNING));\n};\n\n\n/**\n * Returns an array of message object from any given message string, list of\n * message strings, message object or list message objects. The type can be\n * overridden here as well OR defined (if the message(s) is/are string(s),\n * defaults to 'information').\n * @param {string|Array.<string>|ngeox.Message|Array.<ngeox.Message>}\n *     object A message or list of messages as text or configuration objects.\n * @param {string=} opt_type The type of message to override the messages with.\n * @return {Array.<ngeox.Message>} List of message objects.\n * @protected\n */\nexports.prototype.getMessageObjects = function(object, opt_type) {\n  const msgObjects = [];\n  let msgObject = null;\n  const defaultType = exports.Type.INFORMATION;\n\n  if (typeof object === 'string') {\n    msgObjects.push({\n      msg: object,\n      type: opt_type !== undefined ? opt_type : defaultType\n    });\n  } else if (Array.isArray(object)) {\n    object.forEach((msg) => {\n      if (typeof object === 'string') {\n        msgObject = {\n          msg: msg,\n          type: opt_type !== undefined ? opt_type : defaultType\n        };\n      } else {\n        msgObject = msg;\n        if (opt_type !== undefined) {\n          msgObject.type = opt_type;\n        }\n      }\n      msgObjects.push(msgObject);\n    }, this);\n  } else {\n    msgObject = object;\n    if (opt_type !== undefined) {\n      msgObject.type = opt_type;\n    }\n    if (msgObject.type === undefined) {\n      msgObject.type = defaultType;\n    }\n    msgObjects.push(msgObject);\n  }\n\n  return msgObjects;\n};\n\n\n/**\n * @enum {string}\n * @export\n */\nexports.Type = {\n  /**\n   * @type {string}\n   * @export\n   */\n  ERROR: 'error',\n  /**\n   * @type {string}\n   * @export\n   */\n  INFORMATION: 'information',\n  /**\n   * @type {string}\n   * @export\n   */\n  SUCCESS: 'success',\n  /**\n   * @type {string}\n   * @export\n   */\n  WARNING: 'warning'\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/message/Message.js"],"sourceRoot":""}