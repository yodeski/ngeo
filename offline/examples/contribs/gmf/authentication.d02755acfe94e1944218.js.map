{"version":3,"sources":["webpack:///./contribs/gmf/src/authentication/Service.js","webpack:///./src/message/modalComponent.js","webpack:///./contribs/gmf/src/authentication/module.js","webpack:///./contribs/gmf/src/authentication/component.js","webpack:///./contribs/gmf/examples/authentication.js","webpack:///./src/message/Message.js","webpack:///./src/message/Notification.js","webpack:///./src/CustomEvent.js"],"names":["__webpack_require__","exports","$http","authenticationBaseUrl","gmfUser","_classCallCheck","this","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","call","$http_","baseUrl_","replace","user_","load_","$inject","_inherits","_olEventsEventTarget","_createClass","key","value","url","RouteSuffix","IS_LOGGED_IN","get","withCredentials","then","handleLogin_","bind","oldPwd","newPwd","confPwd","CHANGE_PASSWORD","post","$","param","oldPassword","newPassword","confirmNewPassword","headers","Content-Type","login","pwd","LOGIN","password","LOGOUT","resetUser_","RESET_PASSWORD","successFn","resp","data","functionalities","role_id","checkingLoginStatus","respData","setUser_","event","ngeoCustomEvent","user","dispatchEvent","emitEvent","undefined","username","olEventsEventTarget","module","angular","service","gmfBase","requires","push","name","is_password_changed","role_name","ngeoBase","component_","template","require","ngModel","transclude","controller","bindings","resizable","component","Controller_","_class","$scope","$element","$element_","$scope_","modal_","children","dialog","find","draggable","$render","modal","$viewValue","on","e","type","googAsserts","assert","$apply","$setViewValue","gmfAuthenticationComponent","gmfAuthenticationService","ngeoMessageNotification","ngeoMessageModalComponent","gmfAuthenticationTemplateUrl","$attrs","gmfAuthenticationTemplateUrl_","element","attrs","templateUrl","baseModuleTemplateUrl","allowPasswordChange","forcePasswordChange","AuthenticationController_","gettextCatalog","ngeoNotification","gmfAuthenticationService_","notification_","allowPasswordReset","changingPassword","changePasswordModalShown","resetPasswordModalShown","error","loginVal","pwdVal","oldPwdVal","newPwdVal","newPwdConfVal","olEvents","listen","onLoginReady_","errors","getString","length","setError_","changePassword","changePasswordReset","resetError_","logout","resetPasswordSuccessFn","resetPassword","detail","msg","notify","ngeoMessageMessage","Type","WARNING","container","Array","isArray","forEach","target","ERROR","clear","gmfAuthenticationModule","constant","MainController","prototype","showMessage","message","show","object","getMessageObjects","info","INFORMATION","success","SUCCESS","warn","opt_type","msgObjects","msgObject","defaultType","olBase","$timeout","timeout_","document","body","append","container_","cache_","inherits","DEFAULT_DELAY_","uid","clearMessageByCacheItem_","parseInt","assertString","classNames","el","join","html","addClass","delay","item","getUid","promise","alert","cancel","_Event","arguments","olEventsEvent"],"mappings":"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","file":"authentication.d02755acfe94e1944218.js","sourcesContent":["/**\n * @module gmf.authentication.Service\n*/\nimport ngeoCustomEvent from 'ngeo/CustomEvent.js';\nimport gmfBase from 'gmf/index.js';\nimport * as olBase from 'ol/index.js';\nimport olEventsEventTarget from 'ol/events/EventTarget.js';\n\n/**\n * An \"authentication\" service for a GeoMapFish application. Upon loading, it\n * launches a request to determine whether a user is currently logged in or\n * not.\n *\n * The possible API requests it supports, which are all self-explanatory, are:\n *\n * - changePassword\n * - login\n * - logout\n * - resetPassword\n *\n * @extends {ol.events.EventTarget}\n */\nconst exports = class extends olEventsEventTarget {\n\n  /**\n   * @param {angular.$http} $http Angular http service.\n   * @param {string} authenticationBaseUrl URL to \"authentication\" web service.\n   * @param {gmfx.User} gmfUser User.\n   * @ngInject\n   */\n  constructor($http, authenticationBaseUrl, gmfUser) {\n\n    super();\n\n    /**\n     * @type {angular.$http}\n     * @private\n     */\n    this.$http_ = $http;\n\n    /**\n     * The authentication url without trailing slash\n     * @type {string}\n     * @private\n     */\n    this.baseUrl_ = authenticationBaseUrl.replace(/\\/$/, '');\n\n    /**\n     * @type {gmfx.User}\n     * @private\n     */\n    this.user_ = gmfUser;\n\n    this.load_();\n  }\n\n  /**\n   * Load the authentication service, which sends an asynch request to\n   * determine whether the user is currently connected or not.\n   * @private\n   */\n  load_() {\n    const url = `${this.baseUrl_}/${exports.RouteSuffix.IS_LOGGED_IN}`;\n    this.$http_.get(url, {withCredentials: true}).then(\n      this.handleLogin_.bind(this, true)\n    );\n  }\n\n  /**\n   * @param {string} oldPwd Old password.\n   * @param {string} newPwd New password.\n   * @param {string} confPwd New password confirmation.\n   * @return {angular.$q.Promise} Promise.\n   * @export\n   */\n  changePassword(oldPwd, newPwd, confPwd) {\n    const url = `${this.baseUrl_}/${exports.RouteSuffix.CHANGE_PASSWORD}`;\n\n    return this.$http_.post(url, $.param({\n      'oldPassword': oldPwd,\n      'newPassword': newPwd,\n      'confirmNewPassword': confPwd\n    }), {\n      headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n      withCredentials: true\n    });\n  }\n\n  /**\n   * @param {string} login Login name.\n   * @param {string} pwd Password.\n   * @return {angular.$q.Promise} Promise.\n   * @export\n   */\n  login(login, pwd) {\n    const url = `${this.baseUrl_}/${exports.RouteSuffix.LOGIN}`;\n\n    return this.$http_.post(url, $.param({'login': login, 'password': pwd}), {\n      headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n      withCredentials: true\n    }).then(\n      this.handleLogin_.bind(this, false));\n  }\n\n  /**\n   * @return {angular.$q.Promise} Promise.\n   * @export\n   */\n  logout() {\n    const url = `${this.baseUrl_}/${exports.RouteSuffix.LOGOUT}`;\n    return this.$http_.get(url, {withCredentials: true}).then(\n      this.resetUser_.bind(this));\n  }\n\n  /**\n   * @param {string} login Login name.\n   * @return {angular.$q.Promise} Promise.\n   * @export\n   */\n  resetPassword(login) {\n    const url = `${this.baseUrl_}/${exports.RouteSuffix.RESET_PASSWORD}`;\n\n    /**\n     * @param {angular.$http.Response} resp Ajax response.\n     * @return {gmfx.AuthenticationDefaultResponse} Response.\n     */\n    const successFn = function(resp) {\n      const respData = /** @type gmfx.AuthenticationDefaultResponse} */ (\n        resp.data);\n      return respData;\n    }.bind(this);\n\n    return this.$http_.post(url, $.param({'login': login}), {\n      headers: {'Content-Type': 'application/x-www-form-urlencoded'}\n    }).then(successFn);\n  }\n\n  /**\n   * @return {?gmfx.AuthenticationFunctionalities} The role functionalities.\n   */\n  getFunctionalities() {\n    return this.user_.functionalities;\n  }\n\n  /**\n   * @return {number|null} The role ID.\n   */\n  getRoleId() {\n    return this.user_.role_id;\n  }\n\n  /**\n   * @param {boolean} checkingLoginStatus Checking the login status?\n   * @param {angular.$http.Response} resp Ajax response.\n   * @return {angular.$http.Response} Response.\n   * @private\n   */\n  handleLogin_(checkingLoginStatus, resp) {\n    const respData = /** @type {gmfx.AuthenticationLoginResponse} */ (resp.data);\n    this.setUser_(respData, !checkingLoginStatus);\n    if (checkingLoginStatus) {\n      /** @type {gmfx.AuthenticationEvent} */\n      const event = new ngeoCustomEvent('ready', {user: this.user_});\n      this.dispatchEvent(event);\n    }\n    return resp;\n  }\n\n  /**\n   * @param {gmfx.AuthenticationLoginResponse} respData Response.\n   * @param {boolean} emitEvent Emit a login event?\n   * @private\n   */\n  setUser_(respData, emitEvent) {\n    for (const key in respData) {\n      this.user_[key] = respData[key];\n    }\n    if (emitEvent && respData.username !== undefined) {\n      /** @type {gmfx.AuthenticationEvent} */\n      const event = new ngeoCustomEvent('login', {user: this.user_});\n      this.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @private\n   */\n  resetUser_() {\n    for (const key in this.user_) {\n      this.user_[key] = null;\n    }\n    /** @type {gmfx.AuthenticationEvent} */\n    const event = new ngeoCustomEvent('logout', {user: this.user_});\n    this.dispatchEvent(event);\n    this.load_();\n  }\n};\n\n/**\n * @enum {string}\n */\nexports.RouteSuffix = {\n  CHANGE_PASSWORD: 'loginchange',\n  IS_LOGGED_IN: 'loginuser',\n  LOGIN: 'login',\n  LOGOUT: 'logout',\n  RESET_PASSWORD: 'loginresetpassword'\n};\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('gmfAuthenticationService', []);\nexports.module.service('gmfAuthenticationService', exports);\ngmfBase.module.requires.push(exports.module.name);\n\nexports.module.value('gmfUser', {\n  'functionalities': null,\n  'is_password_changed': null,\n  'role_id': null,\n  'role_name': null,\n  'username': null\n});\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/authentication/Service.js","/**\n * @module ngeo.message.modalComponent\n*/\nimport googAsserts from 'goog/asserts.js';\nimport ngeoBase from 'ngeo/index.js';\n\n/**\n * @type {angular.Module}\n */\nconst exports = angular.module('ngeoModal', []);\n\nngeoBase.module.requires.push(exports.name);\n\n/**\n * Provides the \"ngeoModal\" component.\n *\n * This component shows a Bootstrap modal when the `ngModel` expression\n * evaluates to `true`, and it hides it when the `ngModel` expression\n * evaluates to `false`.\n *\n * The components also changes the `ngModel` value when the user manually\n * closes the modal.\n *\n * This component is based on Bootstrap's `modal` classes and associated\n * jQuery plugin.\n *\n *     <ngeo-modal ng-model=\"modalShown\">\n *       <div class=\"modal-header\">\n *         <button type=\"button\" class=\"close\" data-dismiss=\"modal\"\n *                 aria-hidden=\"true\">&times;</button>\n *         <h4 class=\"modal-title\">The Title</h4>\n *       </div>\n *       <div class=\"modal-body\">Some content</div>\n *     </ngeo-modal>\n *\n * Note: for z-indexing purpose, the modal DOM element is automatically moved\n * to document body element.\n *\n * See our live example: [../examples/modal.html](../examples/modal.html)\n *\n * @htmlAttribute {boolean} ngeo-modal-resizable Whether the modal can be\n *     resized or not. Defaults to `false`.\n * @ngdoc component\n * @ngname ngeoModal\n * @type {!angular.Component}\n */\nexports.component_ = {\n  template: `<div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"modal-dialog\">\n      <div class=\"modal-content\">\n        <ng-transclude></ng-transclude>\n      </div>\n    </div>\n  </div>`,\n  require: {\n    'ngModel': 'ngModel'\n  },\n  transclude: true,\n  controller: 'ngeoModalController',\n  bindings: {\n    'resizable': '<ngeoModalResizable'\n  }\n};\n\nexports.component('ngeoModal', exports.component_);\n\nexports.Controller_ = class {\n  /**\n   * @ngInject\n   * @param {!angular.Scope} $scope Scope.\n   * @param {!jQuery} $element Element.\n   */\n  constructor($scope, $element) {\n    /**\n     * @private\n     * @type {!jQuery}\n     */\n    this.$element_ = $element;\n\n    /**\n     * @private\n     * @type {!angular.Scope}\n     */\n    this.$scope_ = $scope;\n\n    /**\n     * @private\n     * @type {jQuery}\n     */\n    this.modal_;\n\n    /**\n     * @export\n     * @type {boolean}\n     */\n    this.resizable;\n\n    /**\n     * @export\n     * @type {angular.NgModelController|null}\n     */\n    this.ngModel;\n  }\n\n  $onInit() {\n    this.modal_ = this.$element_.children();\n\n    this.resizable = !!this.resizable;\n\n    const dialog = this.modal_.find('.modal-dialog');\n    dialog.draggable();\n    if (this.resizable) {\n      dialog.resizable();\n    }\n\n    this.ngModel.$render = () => {\n      this.modal_.modal(this.ngModel.$viewValue ? 'show' : 'hide');\n    };\n\n    this.modal_.on('shown.bs.modal hidden.bs.modal', (e) => {\n      const type = e.type;\n      googAsserts.assert(type == 'shown' || type == 'hidden');\n      this.$scope_.$apply(() => {\n        this.ngModel.$setViewValue(type == 'shown');\n      });\n    });\n  }\n\n  $onDestroy() {\n    const dialog = this.modal_.find('.modal-dialog');\n    dialog.draggable('destroy');\n    if (this.resizable) {\n      dialog.resizable('destroy');\n    }\n  }\n};\n\nexports.controller('ngeoModalController', exports.Controller_);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/message/modalComponent.js","/**\n * @module gmf.authentication.module\n*/\nimport gmfAuthenticationComponent from 'gmf/authentication/component.js';\n\n/** @suppress {extraRequire} */\nimport gmfAuthenticationService from 'gmf/authentication/Service.js';\n\n/**\n * @type {!angular.Module}\n */\nconst exports = angular.module('gmfAuthenticationModule', [\n  gmfAuthenticationComponent.name,\n  gmfAuthenticationService.module.name\n]);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/authentication/module.js","/**\n * @module gmf.authentication.component\n*/\nimport gmfBase from 'gmf/index.js';\nimport gmfAuthenticationService from 'gmf/authentication/Service.js';\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoMessageMessage from 'ngeo/message/Message.js';\nimport ngeoMessageNotification from 'ngeo/message/Notification.js';\n\n/** @suppress {extraRequire} */\nimport ngeoMessageModalComponent from 'ngeo/message/modalComponent.js';\n\nimport olEvents from 'ol/events.js';\n\n/**\n * @type {angular.Module}\n */\nconst exports = angular.module('gmfAuthentication', [\n  gmfAuthenticationService.module.name,\n  ngeoMessageNotification.module.name,\n  ngeoMessageModalComponent.name,\n]);\n\ngmfBase.module.requires.push(exports.name);\n\n/**\n * @param {angular.JQLite} element Element.\n * @param {angular.Attributes} attrs Attributes.\n * @return {string} Template URL.\n */\nexports.gmfAuthenticationTemplateUrl_ = (element, attrs) => {\n  const templateUrl = attrs['gmfAuthenticationTemplateurl'];\n  return templateUrl !== undefined ? templateUrl :\n    `${gmfBase.baseModuleTemplateUrl}/authentication/component.html`;\n};\n\n\n/**\n * @param {!angular.JQLite} $element Element.\n * @param {!angular.Attributes} $attrs Attributes.\n * @param {!function(!angular.JQLite, !angular.Attributes): string} gmfAuthenticationTemplateUrl Template function.\n * @return {string} Template URL.\n * @ngInject\n */\nfunction gmfAuthenticationTemplateUrl($element, $attrs, gmfAuthenticationTemplateUrl) {\n  return gmfAuthenticationTemplateUrl($element, $attrs);\n}\n\n\n/**\n * An \"authentication\" component for a GeoMapFish application. With the\n * use of the \"authentication\" service, it features a complete interface\n * for the user to be able to login, logout, change or reset his or her\n * password.  The `gmfUser` angular value is also used to keep track of\n * the user information. When empty, that means that the user isn't connected\n * yet.\n *\n * While not logged in, the \"login\" form is shown, which allows the user to\n * either log in or ask for a password reset.\n *\n * Once logged in, the \"logout\" form is shown, which allows the user to either\n * log out or change his or her password.\n *\n * Example:\n *\n *      <gmf-authentication\n *        gmf-authentication-allow-password-change=\"::true\">\n *      </gmf-authentication>\n *\n * @htmlAttribute {boolean} gmf-authentication-allow-password-reset Whether to\n *     show the password forgotten link. Default to true.\n * @htmlAttribute {boolean} gmf-authentication-allow-password-change Whether to\n *     show the change password button. Default to true.\n * @htmlAttribute {boolean} gmf-authentication-force-password-change Force the\n *     user to change its password. Default to false. If you set it to true, you\n *     should also allow the user to change its password.\n * @ngdoc component\n * @ngname gmfAuthentication\n */\nexports.component_ = {\n  bindings: {\n    'allowPasswordChange': '<?gmfAuthenticationAllowPasswordChange',\n    'forcePasswordChange': '<?gmfAuthenticationForcePasswordChange'\n  },\n  controller: 'GmfAuthenticationController',\n  templateUrl: gmfAuthenticationTemplateUrl\n};\n\nexports.value('gmfAuthenticationTemplateUrl',\n  exports.gmfAuthenticationTemplateUrl_);\n\nexports.component('gmfAuthentication', exports.component_);\n\n\n/**\n * @private\n */\nexports.AuthenticationController_ = class {\n  /**\n   * @private\n   * @param {angularGettext.Catalog} gettextCatalog Gettext catalog.\n   * @param {angular.Scope} $scope The directive's scope.\n   * @param {gmf.authentication.Service} gmfAuthenticationService GMF Authentication service\n   * @param {gmfx.User} gmfUser User.\n   * @param {ngeo.message.Notification} ngeoNotification Ngeo notification service.\n   * @ngInject\n   * @ngdoc controller\n   * @ngname GmfAuthenticationController\n   */\n  constructor(gettextCatalog, $scope, gmfAuthenticationService, gmfUser, ngeoNotification) {\n\n    /**\n     * @type {gmfx.User}\n     * @export\n     */\n    this.gmfUser = gmfUser;\n\n    /**\n     * @type {angular.Scope}\n     * @private\n     */\n    this.$scope_ = $scope;\n\n    /**\n     * @type {angularGettext.Catalog}\n     * @private\n     */\n    this.gettextCatalog = gettextCatalog;\n\n    /**\n     * @type {gmf.authentication.Service}\n     * @private\n     */\n    this.gmfAuthenticationService_ = gmfAuthenticationService;\n\n    /**\n     * @type {ngeo.message.Notification}\n     * @private\n     */\n    this.notification_ = ngeoNotification;\n\n    /**\n     * @type {boolean}\n     * @export\n     */\n    this.allowPasswordReset;\n\n    /**\n     * @type {boolean}\n     * @export\n     */\n    this.allowPasswordChange;\n\n    /**\n     * @type {boolean}\n     * @export\n     */\n    this.forcePasswordChange;\n\n    /**\n     * @type {boolean}\n     * @export\n     */\n    this.changingPassword = false;\n\n    /**\n     * @type {boolean}\n     * @export\n     */\n    this.changePasswordModalShown = false;\n\n    /**\n     * @type {boolean}\n     * @export\n     */\n    this.resetPasswordModalShown = false;\n\n    /**\n     * @type {boolean}\n     * @export\n     */\n    this.error = false;\n\n    // LOGIN form values\n\n    /**\n     * @type {string}\n     * @export\n     */\n    this.loginVal = '';\n\n    /**\n     * @type {string}\n     * @export\n     */\n    this.pwdVal = '';\n\n    // CHANGE PASSWORD form values\n\n    /**\n     * @type {string}\n     * @export\n     */\n    this.oldPwdVal = '';\n\n    /**\n     * @type {string}\n     * @export\n     */\n    this.newPwdVal = '';\n\n    /**\n     * @type {string}\n     * @export\n     */\n    this.newPwdConfVal = '';\n\n    olEvents.listen(gmfAuthenticationService, 'ready', this.onLoginReady_.bind(this));\n  }\n\n  /**\n   * Initialise the controller.\n   */\n  $onInit() {\n    this.allowPasswordReset = this.allowPasswordReset !== false;\n    this.allowPasswordChange = this.allowPasswordChange !== false;\n    this.forcePasswordChange = this.forcePasswordChange === true;\n  }\n\n\n  // METHODS THAT CALL THE AUTHENTICATION SERVICE METHODS\n\n  /**\n   * Calls the authentication service changePassword method.\n   * @export\n   */\n  changePassword() {\n    const gettextCatalog = this.gettextCatalog;\n\n    const oldPwd = this.oldPwdVal;\n    const newPwd = this.newPwdVal;\n    const confPwd = this.newPwdConfVal;\n\n    const errors = [];\n    // (1) validation - passwords are required\n    if (oldPwd === '') {\n      errors.push(gettextCatalog.getString('The old password is required.'));\n    }\n    if (newPwd === '') {\n      errors.push(gettextCatalog.getString('The new password is required.'));\n    }\n    if (confPwd === '') {\n      errors.push(gettextCatalog.getString('The password confirmation is required.'));\n    }\n\n    if (errors.length) {\n      this.setError_(errors);\n    } else {\n      // (2) validation - passwords must be new and must also match\n      if (oldPwd === newPwd) {\n        errors.push(gettextCatalog.getString('The old and new passwords are the same.'));\n      }\n      if (newPwd !== confPwd) {\n        errors.push(gettextCatalog.getString('The passwords don\\'t match.'));\n      }\n\n      if (errors.length) {\n        this.setError_(errors);\n      } else {\n        // (3) send request with current credentials, which may fail if\n        //     the old password given is incorrect.\n        const error = gettextCatalog.getString('Incorrect old password.');\n        this.gmfAuthenticationService_.changePassword(oldPwd, newPwd, confPwd).then(\n          () => {\n            this.changePasswordModalShown = true;\n            this.changePasswordReset();\n          },\n          this.setError_.bind(this, error));\n      }\n    }\n  }\n\n  /**\n   * Calls the authentication service login method.\n   * @export\n   */\n  login() {\n    const gettextCatalog = this.gettextCatalog;\n\n    const errors = [];\n    if (this.loginVal === '') {\n      errors.push(gettextCatalog.getString('The username is required.'));\n    }\n    if (this.pwdVal === '') {\n      errors.push(gettextCatalog.getString('The password is required.'));\n    }\n    if (errors.length) {\n      this.setError_(errors);\n    } else {\n      const error = gettextCatalog.getString('Incorrect username or password.');\n      this.gmfAuthenticationService_.login(this.loginVal, this.pwdVal).then(\n        this.resetError_.bind(this),\n        this.setError_.bind(this, error));\n    }\n  }\n\n  /**\n   * Calls the authentication service logout method.\n   * @export\n   */\n  logout() {\n    const gettextCatalog = this.gettextCatalog;\n    const error = gettextCatalog.getString('Could not log out.');\n    this.gmfAuthenticationService_.logout().then(\n      this.resetError_.bind(this),\n      this.setError_.bind(this, error));\n  }\n\n  /**\n   * Calls the authentication service resetPassword method.\n   * @export\n   */\n  resetPassword() {\n    const gettextCatalog = this.gettextCatalog;\n\n    if (!this.loginVal) {\n      this.setError_(gettextCatalog.getString('Please, input a login...'));\n      return;\n    }\n\n    const error = gettextCatalog.getString('An error occured while reseting the password.');\n\n    /**\n     * @param {gmfx.AuthenticationDefaultResponse} respData Response.\n     */\n    const resetPasswordSuccessFn = function(respData) {\n      this.resetPasswordModalShown = true;\n      this.resetError_();\n    }.bind(this);\n\n    this.gmfAuthenticationService_.resetPassword(this.loginVal).then(\n      resetPasswordSuccessFn,\n      this.setError_.bind(this, error)\n    );\n  }\n\n\n  // OTHER METHODS\n\n  /**\n   * Reset the changePassword values and error.\n   * @export\n   */\n  changePasswordReset() {\n    this.resetError_();\n    this.changingPassword = false;\n    this.oldPwdVal = '';\n    this.newPwdVal = '';\n    this.newPwdConfVal = '';\n  }\n\n\n  /**\n   * @param {gmfx.AuthenticationEvent} e GMF Authentication event.\n   * @private\n   */\n  onLoginReady_(e) {\n    if (e.detail.user.is_password_changed === false && this.forcePasswordChange) {\n      const gettextCatalog = this.gettextCatalog;\n      const msg = gettextCatalog.getString('You must change your password.');\n      this.notification_.notify({\n        msg: msg,\n        type: ngeoMessageMessage.Type.WARNING\n      });\n    }\n  }\n\n\n  /**\n   * @param {string|Array.<string>} errors Errors.\n   * @private\n   */\n  setError_(errors) {\n    if (this.error) {\n      this.resetError_();\n    }\n\n    this.error = true;\n\n    const container = angular.element('.gmf-authentication-error');\n\n    if (!Array.isArray(errors)) {\n      errors = [errors];\n    }\n\n    errors.forEach(function(error) {\n      this.notification_.notify({\n        msg: error,\n        target: container,\n        type: ngeoMessageMessage.Type.ERROR\n      });\n    }, this);\n  }\n\n  /**\n   * @private\n   */\n  resetError_() {\n    this.notification_.clear();\n    this.error = false;\n  }\n};\n\nexports.controller('GmfAuthenticationController',\n  exports.AuthenticationController_);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/authentication/component.js","/**\n * @module gmfapp.authentication\n*/\nconst exports = {};\n\nimport './authentication.css';\nimport './common_dependencies.js';\nimport gmfBase from 'gmf/index.js';\n\nimport gmfAuthenticationModule from 'gmf/authentication/module.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('gmfapp', [\n  gmfBase.module.name,\n  gmfAuthenticationModule.name\n]);\n\n\nexports.module.value(\n  'authenticationBaseUrl',\n  'https://geomapfish-demo.camptocamp.net/2.2/wsgi');\n\nexports.module.constant('angularLocaleScript', '../build/angular-locale_{{locale}}.js');\n\n\n/**\n * @constructor\n * @ngInject\n */\nexports.MainController = function() {};\n\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/examples/authentication.js","/**\n * @module ngeo.message.Message\n*/\n/**\n * Abstract class for services that display messages.\n *\n * @constructor\n * @struct\n * @abstract\n */\nconst exports = function() {};\n\n\n/**\n * Show the message.\n *\n * @abstract\n * @param {ngeox.Message} message Message.\n * @protected\n */\nexports.prototype.showMessage = function(message) {};\n\n\n/**\n * Show disclaimer message string or object or list of disclame message\n * strings or objects.\n *\n * @param {string|Array.<string>|ngeox.Message|Array.<ngeox.Message>}\n *     object A message or list of messages as text or configuration objects.\n * @export\n */\nexports.prototype.show = function(object) {\n  const msgObjects = this.getMessageObjects(object);\n  msgObjects.forEach(this.showMessage, this);\n};\n\n\n/**\n * Display the given error message or list of error messages.\n *\n * @param {string|Array.<string>} message Message or list of messages.\n * @export\n */\nexports.prototype.error = function(message) {\n  this.show(this.getMessageObjects(message, exports.Type.ERROR));\n};\n\n\n/**\n * Display the given info message or list of info messages.\n * @param {string|Array.<string>} message Message or list of messages.\n * @export\n */\nexports.prototype.info = function(message) {\n  this.show(this.getMessageObjects(message, exports.Type.INFORMATION));\n};\n\n\n/**\n * Display the given success message or list of success messages.\n * @param {string|Array.<string>} message Message or list of messages.\n * @export\n */\nexports.prototype.success = function(message) {\n  this.show(this.getMessageObjects(message, exports.Type.SUCCESS));\n};\n\n\n/**\n * Display the given warning message or list of warning messages.\n * @param {string|Array.<string>} message Message or list of messages.\n * @export\n */\nexports.prototype.warn = function(message) {\n  this.show(this.getMessageObjects(message, exports.Type.WARNING));\n};\n\n\n/**\n * Returns an array of message object from any given message string, list of\n * message strings, message object or list message objects. The type can be\n * overridden here as well OR defined (if the message(s) is/are string(s),\n * defaults to 'information').\n * @param {string|Array.<string>|ngeox.Message|Array.<ngeox.Message>}\n *     object A message or list of messages as text or configuration objects.\n * @param {string=} opt_type The type of message to override the messages with.\n * @return {Array.<ngeox.Message>} List of message objects.\n * @protected\n */\nexports.prototype.getMessageObjects = function(object, opt_type) {\n  const msgObjects = [];\n  let msgObject = null;\n  const defaultType = exports.Type.INFORMATION;\n\n  if (typeof object === 'string') {\n    msgObjects.push({\n      msg: object,\n      type: opt_type !== undefined ? opt_type : defaultType\n    });\n  } else if (Array.isArray(object)) {\n    object.forEach((msg) => {\n      if (typeof object === 'string') {\n        msgObject = {\n          msg: msg,\n          type: opt_type !== undefined ? opt_type : defaultType\n        };\n      } else {\n        msgObject = msg;\n        if (opt_type !== undefined) {\n          msgObject.type = opt_type;\n        }\n      }\n      msgObjects.push(msgObject);\n    }, this);\n  } else {\n    msgObject = object;\n    if (opt_type !== undefined) {\n      msgObject.type = opt_type;\n    }\n    if (msgObject.type === undefined) {\n      msgObject.type = defaultType;\n    }\n    msgObjects.push(msgObject);\n  }\n\n  return msgObjects;\n};\n\n\n/**\n * @enum {string}\n * @export\n */\nexports.Type = {\n  /**\n   * @type {string}\n   * @export\n   */\n  ERROR: 'error',\n  /**\n   * @type {string}\n   * @export\n   */\n  INFORMATION: 'information',\n  /**\n   * @type {string}\n   * @export\n   */\n  SUCCESS: 'success',\n  /**\n   * @type {string}\n   * @export\n   */\n  WARNING: 'warning'\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/message/Message.js","/**\n * @module ngeo.message.Notification\n*/\nimport googAsserts from 'goog/asserts.js';\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoMessageMessage from 'ngeo/message/Message.js';\nimport * as olBase from 'ol/index.js';\n\n/**\n * Provides methods to display any sort of messages, notifications, errors,\n * etc. Requires Bootstrap library (both CSS and JS) to display the alerts\n * properly.\n *\n * @constructor\n * @struct\n * @extends {ngeo.message.Message}\n * @param {angular.$timeout} $timeout Angular timeout service.\n * @ngdoc service\n * @ngname ngeoNotification\n * @abstract\n * @ngInject\n */\nconst exports = function($timeout) {\n\n  ngeoMessageMessage.call(this);\n\n  /**\n   * @type {angular.$timeout}\n   * @private\n   */\n  this.timeout_ = $timeout;\n\n  const container = angular.element('<div class=\"ngeo-notification\"></div>');\n  angular.element(document.body).append(container);\n\n  /**\n   * @type {angular.JQLite}\n   * @private\n   */\n  this.container_ = container;\n\n  /**\n   * @type {Object.<number, ngeo.message.Notification.CacheItem>}\n   * @private\n   */\n  this.cache_ = {};\n\n};\n\nolBase.inherits(exports, ngeoMessageMessage);\n\n\n/**\n * Default delay (in milliseconds) a message should be displayed.\n * @type {number}\n * @private\n */\nexports.DEFAULT_DELAY_ = 7000;\n\n\n// MAIN API METHODS\n\n\n/**\n * Display the given message string or object or list of message strings or\n * objects.\n * @param {string|Array.<string>|ngeox.Message|Array.<ngeox.Message>}\n *     object A message or list of messages as text or configuration objects.\n * @export\n */\nexports.prototype.notify = function(object) {\n  this.show(object);\n};\n\n\n/**\n * Clears all messages that are currently being shown.\n * @export\n */\nexports.prototype.clear = function() {\n  for (const uid in this.cache_) {\n    this.clearMessageByCacheItem_(this.cache_[parseInt(uid, 10)]);\n  }\n};\n\n\n/**\n * @override\n */\nexports.prototype.showMessage = function(message) {\n  const type = message.type;\n  googAsserts.assertString(type, 'Type should be set.');\n\n  const classNames = ['alert', 'fade'];\n  switch (type) {\n    case ngeoMessageMessage.Type.ERROR:\n      classNames.push('alert-danger');\n      break;\n    case ngeoMessageMessage.Type.INFORMATION:\n      classNames.push('alert-info');\n      break;\n    case ngeoMessageMessage.Type.SUCCESS:\n      classNames.push('alert-success');\n      break;\n    case ngeoMessageMessage.Type.WARNING:\n      classNames.push('alert-warning');\n      break;\n    default:\n      break;\n  }\n\n  const el = angular.element(`<div class=\"${classNames.join(' ')}\"></div>`);\n  let container;\n\n  if (message.target) {\n    container = angular.element(message.target);\n  } else {\n    container = this.container_;\n  }\n\n  container.append(el);\n  el.html(message.msg).addClass('in');\n\n  const delay = message.delay !== undefined ? message.delay :\n    exports.DEFAULT_DELAY_;\n\n  const item = /** @type {ngeo.message.Notification.CacheItem} */ ({\n    el\n  });\n\n  // Keep a reference to the promise, in case we want to manually cancel it\n  // before the delay\n  const uid = olBase.getUid(el);\n  item.promise = this.timeout_(() => {\n    el.alert('close');\n    delete this.cache_[uid];\n  }, delay);\n\n  this.cache_[uid] = item;\n};\n\n\n/**\n * Clear a message using its cache item.\n * @param {ngeo.message.Notification.CacheItem} item Cache item.\n * @private\n */\nexports.prototype.clearMessageByCacheItem_ = function(item) {\n  const el = item.el;\n  const promise = item.promise;\n  const uid = olBase.getUid(el);\n\n  // Close the message\n  el.alert('close');\n\n  // Cancel timeout in case we want to stop before delay. If called by the\n  // timeout itself, then this has no consequence.\n  this.timeout_.cancel(promise);\n\n  // Delete the cache item\n  delete this.cache_[uid];\n};\n\n\n/**\n * @typedef {{\n *     el: angular.JQLite,\n *     promise: angular.$q.Promise\n * }}\n */\nexports.CacheItem;\n\n\n/**\n * @type {angular.Module}\n */\nexports.module = angular.module('ngeoNotification', [\n]);\n\nexports.module.service('ngeoNotification', exports);\n\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/message/Notification.js","/**\n * @module ngeo.CustomEvent\n*/\nimport * as olBase from 'ol/index.js';\nimport olEventsEvent from 'ol/events/Event.js';\n\n/**\n * @constructor\n * @extends {ol.events.Event}\n * @param {string} type Event type.\n * @param {T} detail Event Detail.\n * @template T\n */\nconst exports = function(type, detail = {}) {\n\n  olEventsEvent.call(this, type);\n\n  /**\n   * @type {T}\n   */\n  this.detail = detail;\n\n};\n\nolBase.inherits(exports, olEventsEvent);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/CustomEvent.js"],"sourceRoot":""}