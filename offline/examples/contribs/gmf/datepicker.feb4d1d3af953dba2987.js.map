{"version":3,"sources":["webpack:///./src/misc/Time.js","webpack:///./src/misc/datepickerComponent.js","webpack:///./contribs/gmf/examples/datepicker.js","webpack:///./src/misc/WMSTime.js"],"names":["_index","__webpack_require__","exports","prototype","getOptions","time","minDate","Date","minValue","maxDate","maxValue","minDefaultDate","minDefValue","maxDefaultDate","maxDefValue","defaultValues","mode","getTime","values","getUTCDate","localDate","getUTCFullYear","getUTCMonth","module","angular","service","ngeoBase","requires","push","name","ngeoMiscTime","value","element","attrs","templateUrl","undefined","baseModuleTemplateUrl","component_","ngeoDatePickerTemplateUrl","$timeout","scope","onDateSelected","bindToController","controller","restrict","link","ctrl","init","lang","gettextCatalog_","getCurrentLanguage","$","sdateOptions","extend","onClose","selectedDate","find","datepicker","edateOptions","on","dp","css","e","stopPropagation","directive","Controller_","$scope","$injector","ngeoTime","gettextCatalog","_this","this","ngeoTime_","isModeRange","initialMinDate","initialMaxDate","changeMonth","changeYear","sdate","edate","$watchGroup","newDates","oldDates","sDate","eDate","isDate","start","end","initialOptions_","googAsserts","assertArray","assertNumber","gmfBase","ngeoMiscDatepickerComponent","ngeoMiscWMSTime","constant","MainController","ngeoWMSTime","ngeoWMSTime_","wmsTimeRangeMode","widget","resolution","interval","wmsTimeValueMode","rangeValue","date","formatWMSTimeParam","onDateRangeSelected","olBase","$filter","$filter_","call","inherits","formatTimeValue","opt_useISOFormat","opt_toUTC","utc","yearResolution","monthResolution","dayResolution","getString","toISOString","replace","wmsTimeProperty","times","assert"],"mappings":"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","file":"datepicker.feb4d1d3af953dba2987.js","sourcesContent":["/**\n * @module ngeo.misc.Time\n*/\nimport ngeoBase from 'ngeo/index.js';\n\n/**\n * ngeo - Time service\n * @constructor\n * @struct\n * @ngInject\n * @ngdoc service\n * @ngname ngeoTime\n */\nconst exports = function() {};\n\n\n/**\n * Get options regarding the time property of a node;\n *\n * @param {ngeox.TimeProperty} time the time property of a node\n * @return {{\n *  minDate : number,\n *  maxDate : number,\n *  values : (Array<number>|number)\n * }} - Configuration for the UI components\n * @export\n */\nexports.prototype.getOptions = function(time) {\n\n  const minDate = new Date(time.minValue);\n  const maxDate = new Date(time.maxValue);\n\n  const minDefaultDate = (time.minDefValue) ?\n    new Date(time.minDefValue) : minDate;\n  const maxDefaultDate = (time.maxDefValue) ?\n    new Date(time.maxDefValue) : maxDate;\n\n  const defaultValues = (time.mode === 'range') ?\n    [minDefaultDate.getTime(), maxDefaultDate.getTime()] :\n    minDefaultDate.getTime();\n\n  return {\n    minDate: minDate.getTime(),\n    maxDate: maxDate.getTime(),\n    values: defaultValues\n  };\n};\n\n\n/**\n * Time.prototype.getUTCDate - Get UTC date from a local date object\n *\n * @param  {Object} localDate loacl date object in\n * @return {Object} UTC date\n * @export\n */\nexports.prototype.getUTCDate = function(localDate) {\n  return new Date(\n    localDate.getUTCFullYear(),\n    localDate.getUTCMonth(),\n    localDate.getUTCDate());\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('ngeoTime', []);\nexports.module.service('ngeoTime', exports);\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/misc/Time.js","/**\n * @module ngeo.misc.datepickerComponent\n*/\nimport googAsserts from 'goog/asserts.js';\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoMiscTime from 'ngeo/misc/Time.js';\n\n/**\n * @type {!angular.Module}\n */\nconst exports = angular.module('ngeoDatePicker', [\n  ngeoMiscTime.module.name,\n]);\n\n\nexports.value('ngeoDatePickerTemplateUrl',\n  /**\n     * @param {angular.JQLite} element Element.\n     * @param {angular.Attributes} attrs Attributes.\n     * @return {string} Template URL.\n     */\n  (element, attrs) => {\n    const templateUrl = attrs['ngeoDatePickerTemplateUrl'];\n    return templateUrl !== undefined ? templateUrl :\n      `${ngeoBase.baseModuleTemplateUrl}/misc/datepickerComponent.html`;\n  });\n\n\n/**\n * Provide a directive to select a signle date or a range of dates. Requires\n * jQuery UI for the 'datepicker' widget.\n *\n * @param {string|function(!angular.JQLite=, !angular.Attributes=)}\n * ngeoDatePickerTemplateUrl Template for the directive.\n * @param  {angular.$timeout} $timeout angular timeout service\n * @return {angular.Directive} The directive specs.\n * @ngInject\n * @ngdoc directive\n * @ngname ngeoDatePicker\n */\nexports.component_ = function(ngeoDatePickerTemplateUrl,  $timeout) {\n  return {\n    scope: {\n      onDateSelected: '&',\n      time: '='\n    },\n    bindToController: true,\n    controller: 'ngeoDatePickerController as datepickerCtrl',\n    restrict: 'AE',\n    templateUrl: ngeoDatePickerTemplateUrl,\n    link: (scope, element, attrs, ctrl) => {\n      ctrl.init();\n\n      const lang =  ctrl.gettextCatalog_.getCurrentLanguage();\n      $['datepicker']['setDefaults']($['datepicker']['regional'][lang]);\n\n      ctrl.sdateOptions = angular.extend({}, ctrl.sdateOptions, {\n        'onClose': (selectedDate) => {\n          if (selectedDate) {\n            $(element[0]).find('input[name=\"edate\"]').datepicker('option', 'minDate', selectedDate);\n          }\n        }\n      });\n\n      ctrl.edateOptions = angular.extend({}, ctrl.edateOptions, {\n        'onClose': (selectedDate) => {\n          if (selectedDate) {\n            $(element[0]).find('input[name=\"sdate\"]').datepicker('option', 'maxDate', selectedDate);\n          }\n        }\n      });\n\n      angular.element('body').on('hidden.bs.popover', () => {\n        const dp = angular.element('#ui-datepicker-div');\n        if (dp && dp.css('display') === 'block') {\n          $(element[0]).find('input[name$=\"date\"]').datepicker('hide');\n        }\n      });\n\n      $timeout(() => {\n        angular.element('#ui-datepicker-div').on('mousedown', (e) => {\n          e.stopPropagation();\n        });\n      });\n    }\n  };\n};\n\nexports.directive('ngeoDatePicker', exports.component_);\n\n\n/**\n * DatePickerController - directive conttroller\n * @param {!angular.Scope} $scope Angular scope.\n * @param {!angular.$injector} $injector injector.\n * @param {!ngeo.misc.Time} ngeoTime time service.\n * @param {!angularGettext.Catalog} gettextCatalog service.\n * @constructor\n * @private\n * @struct\n * @ngInject\n * @ngdoc controller\n * @ngname ngeoDatePickerController\n */\nexports.Controller_ = function($scope, $injector,\n  ngeoTime, gettextCatalog) {\n\n  /**\n   * @type {!ngeo.misc.Time}\n   * @private\n   */\n  this.ngeoTime_ = ngeoTime;\n\n  /**\n   * @type {!ngeox.TimeProperty}\n   * @export\n   */\n  this.time;\n\n  /**\n   * The gettext catalog\n   * @type {!angularGettext.Catalog}\n   * @private\n   */\n  this.gettextCatalog_ = gettextCatalog;\n\n\n  /**\n   * If the component is used to select a date range\n   * @type {boolean}\n   * @export\n   */\n  this.isModeRange;\n\n\n  /**\n   * Function called after date(s) changed/selected\n   * @type {function({time: {start: number, end: number}})}\n   * @export\n   */\n  this.onDateSelected;\n\n\n  /**\n   * Initial min date for the datepicker\n   * @type {!Date}\n   */\n  this.initialMinDate;\n\n  /**\n   * Initial max date for the datepickeronDateSelected\n   * @type {!Date}\n   */\n  this.initialMaxDate;\n\n  /**\n   * Datepicker options for the second datepicker (only for range mode)\n   * @type {Object}\n   * @export\n   */\n  this.edateOptions = {\n    'minDate': this.initialMinDate,\n    'maxDate': this.initialMaxDate,\n    'changeMonth': true,\n    'changeYear': true\n  };\n\n  /**\n   * Datepicker options for the first datepicker\n   * @type {Object}\n   * @export\n   */\n  this.sdateOptions = {\n    'minDate': this.initialMinDate,\n    'maxDate': this.initialMaxDate,\n    'changeMonth': true,\n    'changeYear': true\n  };\n\n  /**\n   * Start date model for the first date picker\n   * @type {Date}\n   * @export\n   */\n  this.sdate;\n\n  /**\n   * End date model for the second datepicker (only for range mode)\n   * @type {Date}\n   * @export\n   */\n  this.edate;\n\n  $scope.$watchGroup(['datepickerCtrl.sdate', 'datepickerCtrl.edate'], (newDates, oldDates) => {\n    const sDate = newDates[0];\n    const eDate = newDates[1];\n\n    if (angular.isDate(sDate) && (!this.isModeRange || angular.isDate(eDate))) {\n      this.onDateSelected({\n        time: {\n          start: sDate.getTime(),\n          end: eDate ? eDate.getTime() : null\n        }\n      });\n    }\n  });\n};\n\n/**\n * Initialise the controller.\n */\nexports.Controller_.prototype.init = function() {\n  //fetch the initial options for the component\n  const initialOptions_ = this.ngeoTime_.getOptions(this.time);\n  this.initialMinDate = new Date(initialOptions_.minDate);\n  this.initialMaxDate = new Date(initialOptions_.maxDate);\n  this.isModeRange = this.time.mode === 'range';\n\n  if (this.isModeRange) {\n    googAsserts.assertArray(initialOptions_.values);\n    this.sdate = new Date(initialOptions_.values[0]);\n    this.edate = new Date(initialOptions_.values[1]);\n  } else {\n    googAsserts.assertNumber(initialOptions_.values);\n    this.sdate = new Date(initialOptions_.values);\n  }\n};\n\nexports.controller('ngeoDatePickerController',\n  exports.Controller_);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/misc/datepickerComponent.js","/**\n * @module gmfapp.datepicker\n*/\nconst exports = {};\n\nimport './datepicker.css';\nimport './common_dependencies.js';\nimport gmfBase from 'gmf/index.js';\n\nimport ngeoMiscDatepickerComponent from 'ngeo/misc/datepickerComponent.js';\nimport ngeoMiscWMSTime from 'ngeo/misc/WMSTime.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('gmfapp', [\n  gmfBase.module.name,\n  ngeoMiscDatepickerComponent.name,\n  ngeoMiscWMSTime.module.name,\n]);\n\nexports.constant('angularLocaleScript', '../build/angular-locale_{{locale}}.js');\n\n\n/**\n * @constructor\n * @param {!angular.Scope} $scope Angular scope.\n * @param {!ngeo.misc.WMSTime} ngeoWMSTime wmstime service.\n * @ngInject\n */\nexports.MainController = function($scope, ngeoWMSTime) {\n\n  /**\n   * @type {ngeo.misc.WMSTime}\n   * @private\n   */\n  this.ngeoWMSTime_ = ngeoWMSTime;\n\n  /**\n   * @type {ngeox.TimeProperty}\n   * @export\n   */\n  this.wmsTimeRangeMode = {\n    widget: /** @type {ngeox.TimePropertyWidgetEnum} */ ('datepicker'),\n    maxValue: '2013-12-31T00:00:00Z',\n    minValue: '2006-01-01T00:00:00Z',\n    maxDefValue: null,\n    minDefValue: null,\n    resolution: /** @type {ngeox.TimePropertyResolutionEnum}*/ ('day'),\n    mode: /** @type {ngeox.TimePropertyModeEnum} */ ('range'),\n    interval: [0, 1, 0, 0]\n  };\n\n  /**\n   * @type {ngeox.TimeProperty}\n   * @export\n   */\n  this.wmsTimeValueMode = {\n    widget: /** @type {ngeox.TimePropertyWidgetEnum} */ ('datepicker'),\n    maxValue: '2015-12-31T00:00:00Z',\n    minValue: '2014-01-01T00:00:00Z',\n    maxDefValue: null,\n    minDefValue: null,\n    resolution: /** @type {ngeox.TimePropertyResolutionEnum}*/ ('month'),\n    mode: /** @type {ngeox.TimePropertyModeEnum} */ ('value'),\n    interval: [0, 1, 0, 0]\n  };\n\n  /**\n   * @type {string}\n   * @export\n   */\n  this.value;\n\n  /**\n   * @type {string}\n   * @export\n   */\n  this.rangeValue;\n\n  this.onDateSelected = function(date) {\n    this.value = this.ngeoWMSTime_.formatWMSTimeParam(this.wmsTimeValueMode, date);\n  };\n\n  this.onDateRangeSelected = function(date) {\n    this.rangeValue = this.ngeoWMSTime_.formatWMSTimeParam(this.wmsTimeRangeMode, date);\n  };\n\n};\n\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/examples/datepicker.js","/**\n * @module ngeo.misc.WMSTime\n*/\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoMiscTime from 'ngeo/misc/Time.js';\nimport googAsserts from 'goog/asserts.js';\nimport * as olBase from 'ol/index.js';\n\n/**\n * ngeo - WMS time service\n * @extends {ngeo.misc.Time}\n * @param {angular.$filter} $filter angular filter service.\n * @param {!angularGettext.Catalog} gettextCatalog service.\n * @constructor\n * @struct\n * @ngInject\n * @ngdoc service\n * @ngname ngeoWMSTime\n */\nconst exports = function($filter, gettextCatalog) {\n\n  /**\n   * @private\n   * @type {angular.$filter}\n   */\n  this.$filter_ = $filter;\n\n  /**\n   * @type {!angularGettext.Catalog}\n   * @private\n   */\n  this.gettextCatalog_ = gettextCatalog;\n\n  ngeoMiscTime.call(this);\n};\n\nolBase.inherits(exports, ngeoMiscTime);\n\n\n/**\n * Format time regarding a resolution\n * @param  {number} time (in ms format) timestamp to format\n * @param  {(ngeox.TimePropertyResolutionEnum|undefined)} resolution resolution to use\n * @param  {boolean=} opt_useISOFormat True to a ISO-8601 date string that can be used\n *     as a WMS-T Parameter. Otherwise, use a localized date format.\n * @param  {boolean=} opt_toUTC to get the UTC date\n * @return {string} Date string regarding the resolution.\n */\nexports.prototype.formatTimeValue = function(time, resolution, opt_useISOFormat, opt_toUTC) {\n  const date = new Date(time);\n  const utc = opt_toUTC ? 'UTC' : undefined;\n\n  // ISO-8601 format to use date as a WMS-T Parameter.\n  let yearResolution = 'yyyy';\n  let monthResolution = 'yyyy-MM';\n  let dayResolution = 'yyyy-MM-dd';\n\n  // Localized format.\n  if (!opt_useISOFormat) {\n    const gettextCatalog = this.gettextCatalog_;\n    yearResolution = gettextCatalog.getString('yyyy');\n    monthResolution = gettextCatalog.getString('M/yyyy');\n    dayResolution = gettextCatalog.getString('M/d/yyyy');\n  }\n\n  switch (resolution) {\n    case 'year':\n      return this.$filter_('date')(date, yearResolution, utc);\n    case 'month':\n      return this.$filter_('date')(date, monthResolution, utc);\n    case 'day':\n      return this.$filter_('date')(date, dayResolution, utc);\n    default:\n      //case \"second\":\n      return date.toISOString().replace(/\\.\\d{3}/, '');\n  }\n};\n\n\n/**\n * Format time to be used as a WMS Time query parameter\n * @param  {ngeox.TimeProperty} wmsTimeProperty a wmstime property from a node\n * @param  {{start : number, end : (number|undefined)}} times start & end time selected (in ms format)\n * @param  {boolean=} opt_toUTC to get the UTC date\n * @return {string} ISO-8601 date string ready to be used as a query parameter for a\n * WMS request\n * @export\n */\nexports.prototype.formatWMSTimeParam = function(wmsTimeProperty, times, opt_toUTC) {\n  googAsserts.assert(wmsTimeProperty.resolution !== undefined);\n  if (wmsTimeProperty.mode === 'range') {\n    googAsserts.assert(times.end !== undefined);\n    return (\n      `${this.formatTimeValue(times.start, wmsTimeProperty.resolution, true, opt_toUTC)}/${\n        this.formatTimeValue(times.end, wmsTimeProperty.resolution, true, opt_toUTC)}`\n    );\n  } else {\n    return this.formatTimeValue(times.start, wmsTimeProperty.resolution, true, opt_toUTC);\n  }\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('ngeoWMSTime', [\n  ngeoMiscTime.module.name,\n]);\nexports.module.service('ngeoWMSTime', exports);\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/misc/WMSTime.js"],"sourceRoot":""}