{"version":3,"sources":["webpack:///./node_modules/openlayers/src/ol/format/JSONFeature.js","webpack:///./node_modules/openlayers/src/ol/format/GeoJSON.js","webpack:///./node_modules/openlayers/src/ol/geom/MultiLineString.js","webpack:///./src/format/Attribute.js","webpack:///./node_modules/openlayers/src/ol/format/XSD.js","webpack:///./node_modules/openlayers/src/ol/geom/MultiPoint.js","webpack:///./node_modules/openlayers/src/ol/geom/MultiPolygon.js","webpack:///./contribs/gmf/src/theme/Themes.js","webpack:///./contribs/gmf/src/editing/EditFeature.js","webpack:///./src/format/XSDAttribute.js","webpack:///./contribs/gmf/src/editing/XSDAttributes.js","webpack:///./node_modules/openlayers/src/ol/format/XMLFeature.js","webpack:///./contribs/gmf/src/objectediting/Manager.js","webpack:///./src/format/AttributeType.js","webpack:///./node_modules/openlayers/src/ol/format/GMLBase.js","webpack:///./src/map/LayerHelper.js","webpack:///./contribs/gmf/examples/objecteditinghub.js","webpack:///./node_modules/openlayers/src/ol/format/XML.js","webpack:///./node_modules/openlayers/src/ol/format/GML2.js","webpack:///./src/utils.js","webpack:///./node_modules/openlayers/src/ol/format/XLink.js","webpack:///./node_modules/openlayers/src/ol/Image.js","webpack:///./node_modules/openlayers/src/ol/source/ImageWMS.js","webpack:///./node_modules/openlayers/src/ol/format/WFS.js","webpack:///./node_modules/openlayers/src/ol/source/common.js","webpack:///./node_modules/openlayers/src/ol/source/WMSServerType.js","webpack:///./node_modules/openlayers/src/ol/source/TileWMS.js","webpack:///./src/statemanager/Location.js","webpack:///./node_modules/openlayers/src/ol/format/GML3.js","webpack:///./node_modules/openlayers/src/ol/geom/GeometryCollection.js","webpack:///./node_modules/openlayers/src/ol/format/OWS.js","webpack:///./node_modules/openlayers/src/ol/format/WMTSCapabilities.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Filter.js","webpack:///./node_modules/openlayers/src/ol/format/filter/LogicalNary.js","webpack:///./node_modules/openlayers/src/ol/format/filter/And.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Bbox.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Spatial.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Contains.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Comparison.js","webpack:///./node_modules/openlayers/src/ol/format/filter/During.js","webpack:///./node_modules/openlayers/src/ol/format/filter/ComparisonBinary.js","webpack:///./node_modules/openlayers/src/ol/format/filter/EqualTo.js","webpack:///./node_modules/openlayers/src/ol/format/filter/GreaterThan.js","webpack:///./node_modules/openlayers/src/ol/format/filter/GreaterThanOrEqualTo.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Intersects.js","webpack:///./node_modules/openlayers/src/ol/format/filter/IsBetween.js","webpack:///./node_modules/openlayers/src/ol/format/filter/IsLike.js","webpack:///./node_modules/openlayers/src/ol/format/filter/IsNull.js","webpack:///./node_modules/openlayers/src/ol/format/filter/LessThan.js","webpack:///./node_modules/openlayers/src/ol/format/filter/LessThanOrEqualTo.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Not.js","webpack:///./node_modules/openlayers/src/ol/format/filter/NotEqualTo.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Or.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Within.js","webpack:///./node_modules/openlayers/src/ol/format/filter.js"],"names":["JSONFeature","format_Feature","call","this","getObject","source","object","JSON","parse","Object","ol","prototype","getType","FormatType","readFeature","opt_options","readFeatureFromObject","getReadOptions","readFeatures","readFeaturesFromObject","readGeometry","readGeometryFromObject","readProjection","readProjectionFromObject","writeFeature","feature","stringify","writeFeatureObject","writeFeatures","features","writeFeaturesObject","writeGeometry","geometry","writeGeometryObject","format_JSONFeature","GeoJSON","options","defaultDataProjection","proj","featureProjection","defaultFeatureProjection","geometryName_","geometryName","extractGeometryName_","extractGeometryName","GEOMETRY_READERS","Point","coordinates","LineString","Polygon","MultiPoint","MultiLineString","MultiPolygon","GeometryCollection","geometries","map","GEOMETRY_WRITERS","type","getCoordinates","right","rightHanded","getGeometriesArray","obj","Circle","geometryReader","geometryWriter","geoJSONFeature","Feature","setGeometryName","undefined","geometry_name","setGeometry","id","setId","properties","setProperties","geoJSONFeatures","i","ii","length","push","crs","projection","name","asserts","adaptOptions","getId","getGeometry","getProperties","getGeometryName","objects","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_12__geom_flat_simplify_js__","__webpack_require__","opt_layout","__WEBPACK_IMPORTED_MODULE_6__geom_SimpleGeometry_js__","ends_","maxDelta_","maxDeltaRevision_","setCoordinates","__WEBPACK_IMPORTED_MODULE_0__index_js__","appendLineString","lineString","flatCoordinates","__WEBPACK_IMPORTED_MODULE_1__array_js__","getFlatCoordinates","slice","changed","clone","multiLineString","setFlatCoordinates","layout","closestPointXY","x","y","closestPoint","minSquaredDistance","__WEBPACK_IMPORTED_MODULE_2__extent_js__","getExtent","getRevision","Math","sqrt","__WEBPACK_IMPORTED_MODULE_7__geom_flat_closest_js__","getsMaxSquaredDelta","stride","getsClosestPoint","getCoordinateAtM","m","opt_extrapolate","opt_interpolate","__WEBPACK_IMPORTED_MODULE_3__geom_GeometryLayout_js__","XYM","XYZM","extrapolate","interpolate","__WEBPACK_IMPORTED_MODULE_10__geom_flat_interpolate_js__","lineStringsCoordinateAtM","__WEBPACK_IMPORTED_MODULE_9__geom_flat_inflate_js__","coordinatess","getEnds","getLineString","index","__WEBPACK_IMPORTED_MODULE_5__geom_LineString_js__","getLineStrings","ends","lineStrings","offset","end","getFlatMidpoints","midpoints","midpoint","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","simplifiedEnds","douglasPeuckers","simplifiedMultiLineString","XY","__WEBPACK_IMPORTED_MODULE_4__geom_GeometryType_js__","MULTI_LINE_STRING","intersectsExtent","extent","__WEBPACK_IMPORTED_MODULE_11__geom_flat_intersectsextent_js__","setLayout","__WEBPACK_IMPORTED_MODULE_8__geom_flat_deflate_js__","setFlatCoordinatesInternal","setLineStrings","getLayout","_AttributeType","exports","attribute","exec","ngeoFormatAttributeType","GEOMETRY","geomType","__WEBPACK_IMPORTED_MODULE_1__string_js__","XSD","readBoolean","node","s","__WEBPACK_IMPORTED_MODULE_0__xml_js__","getAllTextContent","readBooleanString","string","readDateTime","dateTime","Date","isNaN","readDecimal","readDecimalString","parseFloat","readNonNegativeInteger","readNonNegativeIntegerString","parseInt","readString","trim","writeBooleanTextNode","bool","writeStringTextNode","writeCDATASection","appendChild","DOCUMENT","createCDATASection","writeDateTimeTextNode","date","getUTCFullYear","padNumber","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","createTextNode","writeDecimalTextNode","decimal","toPrecision","writeNonNegativeIntegerTextNode","nonNegativeInteger","toString","__WEBPACK_IMPORTED_MODULE_9__math_js__","appendPoint","point","multiPoint","j","squaredDistance","__WEBPACK_IMPORTED_MODULE_8__geom_flat_inflate_js__","getPoint","n","__WEBPACK_IMPORTED_MODULE_5__geom_Point_js__","getPoints","points","MULTI_POINT","__WEBPACK_IMPORTED_MODULE_7__geom_flat_deflate_js__","__WEBPACK_IMPORTED_MODULE_17__geom_flat_simplify_js__","__WEBPACK_IMPORTED_MODULE_7__geom_SimpleGeometry_js__","endss_","flatInteriorPointsRevision_","flatInteriorPoints_","orientedRevision_","orientedFlatCoordinates_","appendPolygon","polygon","multiPolygon","len","newEndss","Array","__WEBPACK_IMPORTED_MODULE_10__geom_flat_closest_js__","getssMaxSquaredDelta","getssClosestPoint","getOrientedFlatCoordinates","containsXY","__WEBPACK_IMPORTED_MODULE_11__geom_flat_contains_js__","linearRingssContainsXY","getArea","__WEBPACK_IMPORTED_MODULE_8__geom_flat_area_js__","linearRingss","opt_right","__WEBPACK_IMPORTED_MODULE_16__geom_flat_orient_js__","orientLinearRingss","__WEBPACK_IMPORTED_MODULE_13__geom_flat_inflate_js__","coordinatesss","getEndss","getFlatInteriorPoints","flatCenters","__WEBPACK_IMPORTED_MODULE_9__geom_flat_center_js__","__WEBPACK_IMPORTED_MODULE_14__geom_flat_interiorpoint_js__","getInteriorPoints","interiorPoints","__WEBPACK_IMPORTED_MODULE_5__geom_MultiPoint_js__","linearRingssAreOriented","simplifiedEndss","quantizess","simplifiedMultiPolygon","getPolygon","prevEnds","__WEBPACK_IMPORTED_MODULE_6__geom_Polygon_js__","getPolygons","endss","polygons","jj","MULTI_POLYGON","__WEBPACK_IMPORTED_MODULE_15__geom_flat_intersectsextent_js__","__WEBPACK_IMPORTED_MODULE_12__geom_flat_deflate_js__","lastEnds","setPolygons","olBase","olArray","$http","$injector","$q","ngeoLayerHelper","gettextCatalog","gmfThemesOptions","olEventsEventTarget","addBlankBackgroundLayer_","addBlankBackgroundLayer","$q_","$http_","treeUrl_","has","get","cacheVersion_","ngeoLocation_","layerHelper_","deferred_","defer","promise_","promise","loaded","bgLayerPromise_","inherits","findGroupByLayerNodeName","themes","theme","children","group","childNodes","getFlatNodes","findObjectByName","findGroupByName","internalNodes","getFlatInternalNodes","objectName","find","findThemeByName","themeName","nodes","getBgLayers","appDimensions","_this","layerHelper","callback","item","layer","set","metadata","dimensions","ids","getIds","array","getUid","forEach","child","layerLayerCreationFn","ogcServers","gmfLayer","gmfLayerWMTS","googAsserts","assert","url","createWMTSLayerFromCapabilitites","then","bind","response","message","console","error","resolve","gmfLayerWMS","ogcServer","server","imageType","createBasicWMSLayer","layers","credential","fail","promiseSuccessFn","data","promises","background_layers","itemType","reverse","all","collection","filter","l","olCollection","createBasicGroup","layerGroupCreationFn","values","getString","olLayerTile","label","thumbnail","getThemeObject","getThemesObject","getBackgroundLayersObject","getOgcServersObject","hasEditableLayers","hasEditableLayers_","_this2","some","hasNodeEditableLayers_","editable","getSnappingConfig","snappingConfig","getNodeMaxResolution","maxResolution","maxResolutionHint","getNodeMinResolution","minResolution","minResolutionHint","loadThemes","opt_roleId","_this3","params","role","cache_version","cache","withCredentials","errors","join","hasParam","window","alert","dispatchEvent","reject","NodeType","MIXED_GROUP","NOT_MIXED_GROUP","WMTS","WMS","module","angular","ngeoMapLayerHelper","value","service","requires","olUri","gmfLayersUrl","http_","baseUrl_","getFeaturesInExtent","layerIds","appendParams","bbox","handleGetFeatures_","getFeaturesWithComparisonFilters","filters","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","property","operator","err","return","resp","olFormatGeoJSON","insertFeatures","layerId","geoJSON","post","headers","Content-Type","updateFeature","put","deleteFeature","delete","gmfBase","olFormatXML","read","readFromDocument","doc","nodeType","Node","DOCUMENT_NODE","firstChild","nextSibling","ELEMENT_NODE","readFromNode","localName","elements","getElementsByTagName","attributes","readFromElementNode_","getAttribute","assertString","alias","nillable","required","ngeoFormatAttribute","setGeometryType","setAttributeByXsdType_","enumerations","SELECT","choices","restrictions","restrictionNode","maxLengths","maxLength","Number","BOOLEAN","DATE","DATETIME","TIME","NUMBER","numType","NumberType","FLOAT","INTEGER","TEXT","getGeometryAttribute","geomAttribute","promises_","getAttributes","handleGetAttributes_","ngeoFormatXSDAttribute","__WEBPACK_IMPORTED_MODULE_4__xml_js__","XMLFeature","xmlSerializer_","XMLSerializer","__WEBPACK_IMPORTED_MODULE_2__format_Feature_js__","__WEBPACK_IMPORTED_MODULE_3__format_FormatType_js__","XML","isDocument","readFeatureFromDocument","isNode","readFeatureFromNode","readFeaturesFromDocument","readFeaturesFromNode","readGeometryFromDocument","readGeometryFromNode","readProjectionFromDocument","readProjectionFromNode","writeFeatureNode","serializeToString","writeFeaturesNode","writeGeometryNode","gmfEditFeature","ngeoLocation","q_","gmfEditFeature_","getFeatureDefered_","getFeature","getParam","Param","GEOM_TYPE","ID","LAYER","PROPERTY","THEME","getGeomType","getLayerNodeId","getParamAsInt","key","featureProperties","olFeature","gmfEditingEditFeature","ngeoStatemanagerLocation","__WEBPACK_IMPORTED_MODULE_15__xml_js__","GMLBase","featureType","featureNS","srsName","schemaLocation","FEATURE_COLLECTION_PARSERS","GMLNS","featureMember","makeReplacer","readFeaturesInternal","featureMembers","__WEBPACK_IMPORTED_MODULE_4__format_XMLFeature_js__","ONLY_WHITESPACE_RE_","objectStack","namespaceURI","pushParseAndPop","context","prefix","defaultPrefix","ft","nodeName","split","pop","indexOf","count","uri","candidate","ns","parsersNS","featureTypes","isArray","p","parsers","makeArrayPusher","readFeatureElement","readGeometryElement","firstElementChild","GEOMETRY_PARSERS_","__WEBPACK_IMPORTED_MODULE_3__format_Feature_js__","fid","getAttributeNS","nextElementSibling","test","__WEBPACK_IMPORTED_MODULE_2__Feature_js__","readPoint","readFlatCoordinatesFromNode_","__WEBPACK_IMPORTED_MODULE_11__geom_Point_js__","__WEBPACK_IMPORTED_MODULE_5__geom_GeometryLayout_js__","XYZ","readMultiPoint","MULTIPOINT_PARSERS_","__WEBPACK_IMPORTED_MODULE_9__geom_MultiPoint_js__","readMultiLineString","MULTILINESTRING_PARSERS_","__WEBPACK_IMPORTED_MODULE_8__geom_MultiLineString_js__","readMultiPolygon","MULTIPOLYGON_PARSERS_","__WEBPACK_IMPORTED_MODULE_10__geom_MultiPolygon_js__","pointMemberParser_","parseNode","POINTMEMBER_PARSERS_","lineStringMemberParser_","LINESTRINGMEMBER_PARSERS_","polygonMemberParser_","POLYGONMEMBER_PARSERS_","readLineString","__WEBPACK_IMPORTED_MODULE_6__geom_LineString_js__","readFlatLinearRing_","ring","GEOMETRY_FLAT_COORDINATES_PARSERS_","readLinearRing","__WEBPACK_IMPORTED_MODULE_7__geom_LinearRing_js__","readPolygon","flatLinearRings","FLAT_LINEAR_RINGS_PARSERS_","__WEBPACK_IMPORTED_MODULE_12__geom_Polygon_js__","http://www.opengis.net/gml","pointMember","pointMembers","lineStringMember","lineStringMembers","polygonMember","polygonMembers","RING_PARSERS","LinearRing","__WEBPACK_IMPORTED_MODULE_13__obj_js__","__WEBPACK_IMPORTED_MODULE_14__proj_js__","olObj","GROUP_KEY","REFRESH_PARAM","sourceURL","sourceLayersName","sourceFormat","opt_serverType","opt_time","opt_params","opt_crossOrigin","FORMAT","LAYERS","olServerType","replace","olSourceImageWMS","serverType","crossOrigin","updateParams","olLayerImage","createBasicWMSLayerFromDataSource","dataSource","wmsUrl","layerNames","getOGCLayerNames","ogcServerType","ogcImageType","setVisible","visible","capabilitiesURL","layerName","opt_dimensions","parser","olFormatWMTSCapabilities","preload","Infinity","result","olSourceWMTS","optionsFromCapabilities","isEmpty","updateDimensions","setSource","elt","createWMTSLayerFromCapabilititesObj","capabilities","layerCap","capabilitiesStyles","opt_layers","olLayerGroup","setLayers","getGroupFromMap","groupName","getLayerGroup","getLayers","getArray","existingGroup","addLayer","getFlatLayers","getFlatLayers_","getLayerByName","found","sublayers","getWMTSLegendURL","styles","legendURL","getWMSLegendURL","opt_scale","opt_legendRule","queryString","TRANSPARENT","SERVICE","VERSION","REQUEST","isLayerVisible","getVisible","currentResolution","getView","getResolution","getMinResolution","getMaxResolution","refreshWMSLayer","source_","getSource","olSourceTileWMS","getParams","random","updateWMSLayerState","names","getQuerySourceIds","ngeoBase","gmfEditingXSDAttributes","gmfObjecteditingManager","gmfThemeThemes","constant","MainController","$scope","gmfThemes","gmfXSDAttributes","gmfThemes_","gmfXSDAttributes_","urls","viewerUrlDev_","viewerUrlHosted_","selectedUrl","gmfServers_","gmfServer_","gmfLayerNodes","selectedGmfLayerNode","featuresCache_","selectedFeature","geomTypeCache_","selectedGeomType","$watch","newVal","oldVal","getFeatures_","getGeometryType_","handleGetGeometryType_","groupNode","gmfServer","wfsSupport","urlWfs","identifierAttributeField","runEditor","open","runViewerDev","runViewer_","runViewerHosted","baseUrl","nodeId","nodeIdAttrFieldName","gmfLayerNode","getFeaturesDeferred_","getFeaturesFromCache_","issueGetFeatures_","TYPENAME","olFormatWFS","getGeometryTypeDeferred_","getGeometryTypeFromCache_","issueGetAttributesRequest_","geomAttr","keyParams","keys","k","encodeURIComponent","qs","controller","__WEBPACK_IMPORTED_MODULE_8__xml_js__","GML2","__WEBPACK_IMPORTED_MODULE_3__format_GMLBase_js__","schemaLocation_","readFlatCoordinates_","containerSrs","axisOrientation","__WEBPACK_IMPORTED_MODULE_7__proj_js__","getAxisOrientation","coordsGroups","z","coords","substr","readBox_","BOX_PARSERS_","__WEBPACK_IMPORTED_MODULE_1__extent_js__","innerBoundaryIsParser_","flatLinearRing","outerBoundaryIsParser_","innerBoundaryIs","outerBoundaryIs","Box","GEOMETRY_NODE_FACTORY_","opt_nodeName","multiSurface","surface","multiCurve","createElementNS","writeFeatureElement","setAttribute","serializers","__WEBPACK_IMPORTED_MODULE_5__geom_Geometry_js__","makeChildAppender","writeGeometryElement","__WEBPACK_IMPORTED_MODULE_4__format_XSD_js__","__WEBPACK_IMPORTED_MODULE_6__obj_js__","pushSerializeAndPop","makeSimpleNodeFactory","dataProjection","GEOMETRY_SERIALIZERS_","writeCurveOrLineString_","createCoordinatesNode_","writeCoordinates_","segments","writeCurveSegments_","hasZ","parts","getCoords_","line","writeSurfaceOrPolygon_","rings","getLinearRings","RING_SERIALIZERS_","RING_NODE_FACTORY_","patches","writeSurfacePatches_","parentNode","exteriorWritten","writeRing_","linearRing","writeLinearRing_","opt_srsName","opt_hasZ","writeMultiCurveOrLineString_","curve","lines","LINESTRINGORCURVEMEMBER_SERIALIZERS_","MULTIGEOMETRY_MEMBER_NODE_FACTORY_","writePoint_","coord","writeMultiPoint_","POINTMEMBER_SERIALIZERS_","writePointMember_","writeLineStringOrCurveMember_","writeMultiSurfaceOrPolygon_","SURFACEORPOLYGONMEMBER_SERIALIZERS_","writeSurfaceOrPolygonMember_","writeEnvelope","ENVELOPE_SERIALIZERS_","OBJECT_PROPERTY_NODE_FACTORY","Curve","MultiCurve","Surface","MultiSurface","Envelope","curveMember","MULTIGEOMETRY_TO_MEMBER_NODENAME_","surfaceMember","lowerCorner","upperCorner","multiGeom","olGeomPoint","olGeomMultiPoint","olGeomLineString","olGeomMultiLineString","olGeomPolygon","olGeomMultiPolygon","navigator","userAgent","hex","rgb","r","g","b","Error","colorZeroPadding","queryData","pairs","substring","pair","indexOfEquals","decodeURIComponent","queryItem","event","olEventsCondition","noModifierKeys","singleClick","XLink","readHref","_ol_Image_","resolution","pixelRatio","src","imageLoadFunction","ImageBase","ImageState","IDLE","src_","image_","Image","imageListenerKeys_","state","imageLoadFunction_","getImage","handleImageError_","ERROR","unlistenImage_","handleImageLoad_","ol_extent","height","LOADED","load","LOADING","events","listenOnce","EventType","LOAD","setImage","image","unlistenByKey","ol_Image","ImageWMS","source_Image","attributions","resolutions","crossOrigin_","url_","defaultImageLoadFunction","params_","v13_","updateV13_","serverType_","hidpi_","hidpi","imageSize_","renderedRevision_","ratio_","ratio","GETFEATUREINFO_IMAGE_SIZE_","getGetFeatureInfoUrl","coordinate","projectionObj","sourceProjectionObj","getProjection","reproj","calculateSourceResolution","baseParams","common","QUERY_LAYERS","floor","getRequestUrl_","getImageInternal","findNearestResolution","imageResolution","center","viewWidth","ceil","viewHeight","viewExtent","requestWidth","requestHeight","requestExtent","getPixelRatio","round","listen","CHANGE","handleImageChange","getImageLoadFunction","size","getCode","WMSServerType","GEOSERVER","dpi","MAPSERVER","CARMENTA_SERVER","QGIS","getUrl","setImageLoadFunction","setUrl","version","compareVersions","__WEBPACK_IMPORTED_MODULE_11__xml_js__","WFS","featureType_","featureNS_","gmlFormat_","gmlFormat","__WEBPACK_IMPORTED_MODULE_3__format_GML3_js__","SCHEMA_LOCATIONS","DEFAULT_VERSION","__WEBPACK_IMPORTED_MODULE_6__format_XMLFeature_js__","FEATURE_PREFIX","XMLNS","OGCNS","WFSNS","FESNS","1.1.0","1.0.0","getFeatureType","setFeatureType","__WEBPACK_IMPORTED_MODULE_9__obj_js__","__WEBPACK_IMPORTED_MODULE_4__format_GMLBase_js__","readTransactionResponse","readTransactionResponseFromDocument","readTransactionResponseFromNode","readFeatureCollectionMetadata","readFeatureCollectionMetadataFromDocument","readFeatureCollectionMetadataFromNode","FEATURE_COLLECTION_PARSERS_","boundedBy","makeObjectPropertySetter","__WEBPACK_IMPORTED_MODULE_7__format_XSD_js__","TRANSACTION_SUMMARY_PARSERS_","http://www.opengis.net/wfs","totalInserted","totalUpdated","totalDeleted","readTransactionSummary_","OGC_FID_PARSERS_","http://www.opengis.net/ogc","FeatureId","fidParser_","INSERT_RESULTS_PARSERS_","readInsertResults_","TRANSACTION_RESPONSE_PARSERS_","TransactionSummary","InsertResults","QUERY_SERIALIZERS_","PropertyName","writeFeature_","gmlVersion","__WEBPACK_IMPORTED_MODULE_2__format_GML2_js__","writeOgcFidFilter_","getTypeName_","featurePrefix","writeDelete_","__WEBPACK_IMPORTED_MODULE_1__asserts_js__","typeName","setAttributeNS","writeUpdate_","getKeys","__WEBPACK_IMPORTED_MODULE_8__geom_Geometry_js__","TRANSACTION_SERIALIZERS_","writeProperty_","writeNative_","nativeElement","vendorId","safeToIgnore","Insert","Update","Delete","Property","Native","writeQuery_","propertyNames","writeFilterCondition_","GETFEATURE_SERIALIZERS_","getTagName","writeBboxFilter_","writeOgcPropertyName_","writeContainsFilter_","writeIntersectsFilter_","writeWithinFilter_","writeDuringFilter_","valueReference","propertyName","timePeriod","begin","writeTimeInstant_","writeLogicalFilter_","conditions","condition","writeNotFilter_","writeComparisonFilter_","matchCase","writeOgcLiteral_","expression","writeIsNullFilter_","writeIsBetweenFilter_","lowerBoundary","upperBoundary","writeIsLikeFilter_","wildCard","singleChar","escapeChar","pattern","writeOgcExpression_","tagName","time","timeInstant","timePosition","Query","During","And","Or","Not","BBOX","Contains","Intersects","Within","PropertyIsEqualTo","PropertyIsNotEqualTo","PropertyIsLessThan","PropertyIsLessThanOrEqualTo","PropertyIsGreaterThan","PropertyIsGreaterThanOrEqualTo","PropertyIsNull","PropertyIsBetween","PropertyIsLike","writeFilter","writeGetFeature_","writeGetFeature","handle","outputFormat","maxFeatures","resultType","startIndex","__WEBPACK_IMPORTED_MODULE_5__format_filter_js__","and","writeTransaction","inserts","updates","deletes","baseObj","gmlOptions","nativeElements","__WEBPACK_IMPORTED_MODULE_10__proj_js__","__WEBPACK_IMPORTED_MODULE_13__uri_js__","TileWMS","transparent","__WEBPACK_IMPORTED_MODULE_9__source_TileImage_js__","cacheSize","opaque","reprojectionErrorThreshold","tileClass","tileGrid","tileLoadFunction","wrapX","transition","gutter_","gutter","tmpExtent_","__WEBPACK_IMPORTED_MODULE_3__extent_js__","setKey","getKeyForParams_","__WEBPACK_IMPORTED_MODULE_1__index_js__","__WEBPACK_IMPORTED_MODULE_6__proj_js__","getTileGrid","getTileGridForProjection","tileCoord","getTileCoordForCoordAndResolution","getResolutions","tileResolution","tileExtent","getTileCoordExtent","tileSize","__WEBPACK_IMPORTED_MODULE_8__size_js__","toSize","getTileSize","tmpSize","buffer","__WEBPACK_IMPORTED_MODULE_7__reproj_js__","__WEBPACK_IMPORTED_MODULE_0__common_js__","__WEBPACK_IMPORTED_MODULE_4__obj_js__","getGutterInternal","__WEBPACK_IMPORTED_MODULE_10__source_WMSServerType_js__","__WEBPACK_IMPORTED_MODULE_2__asserts_js__","tmp","__WEBPACK_IMPORTED_MODULE_5__math_js__","__WEBPACK_IMPORTED_MODULE_11__tilecoord_js__","hash","getTilePixelRatio","res","fixedTileUrlFunction","scale","__WEBPACK_IMPORTED_MODULE_12__string_js__","location","history","history_","schema_","protocol","domain_","hostname","port_","port","path_","pathname","queryData_","ngeoUtils","decodeQueryString","search","fragment_","replaceState","getPath","getUriString","out","String","charAt","encodedQueryData","encodeQueryString","encodedFragment","hasFragmentParam","getFragmentParam","goog","valueAsInt","getParamAsFloat","valueAsFloat","getFragmentParamAsInt","getParamKeys","getFragmentParamKeys","getParamKeysWithPrefix","getFragmentParamKeysWithPrefix","updateFragmentParams","deleteParam","deleteFragmentParam","refresh","setPath","path","LocationFactory","$rootScope","$window","lastUri","newUri","$evalAsync","$broadcast","MockProvider","$locationProvider","absUrl","opt_path","host","opt_search","opt_paramValue","opt_url","factory","__WEBPACK_IMPORTED_MODULE_14__xml_js__","GML3","surface_","curve_","multiCurve_","multiSurface_","readMultiCurve_","MULTICURVE_PARSERS_","__WEBPACK_IMPORTED_MODULE_9__geom_MultiLineString_js__","readMultiSurface_","MULTISURFACE_PARSERS_","curveMemberParser_","CURVEMEMBER_PARSERS_","surfaceMemberParser_","SURFACEMEMBER_PARSERS_","readPatch_","PATCHES_PARSERS_","readSegment_","SEGMENTS_PARSERS_","readPolygonPatch_","readLineStringSegment_","interiorParser_","exteriorParser_","readSurface_","SURFACE_PARSERS_","__WEBPACK_IMPORTED_MODULE_11__geom_Polygon_js__","__WEBPACK_IMPORTED_MODULE_7__geom_GeometryLayout_js__","readCurve_","CURVE_PARSERS_","__WEBPACK_IMPORTED_MODULE_8__geom_LineString_js__","readEnvelope_","ENVELOPE_PARSERS_","readFlatPos_","re","__WEBPACK_IMPORTED_MODULE_13__proj_js__","readFlatPosList_","contextDimension","dim","__WEBPACK_IMPORTED_MODULE_5__format_XSD_js__","pos","posList","interior","exterior","curveMembers","surfaceMembers","PolygonPatch","LineStringSegment","writePos_","srsDimension","writePosList_","__WEBPACK_IMPORTED_MODULE_12__obj_js__","__WEBPACK_IMPORTED_MODULE_6__geom_Geometry_js__","writeFeatureMembers_","geom","opt_geometries","__WEBPACK_IMPORTED_MODULE_4__geom_Geometry_js__","geometries_","listenGeometriesChange_","cloneGeometries_","clonedGeometries","unlistenGeometriesChange_","__WEBPACK_IMPORTED_MODULE_1__events_js__","unlisten","__WEBPACK_IMPORTED_MODULE_2__events_EventType_js__","geometryCollection","setGeometries","computeExtent","getGeometries","getSimplifiedGeometry","simplifiedGeometryRevision","simplifiedGeometryCache","simplifiedGeometryMaxMinSquaredTolerance","hasOwnProperty","simplifiedGeometries","simplified","simplifiedGeometry","simplifiedGeometryCollection","setGeometriesArray","__WEBPACK_IMPORTED_MODULE_5__geom_GeometryType_js__","GEOMETRY_COLLECTION","rotate","angle","anchor","sx","opt_sy","opt_anchor","applyTransform","transformFn","translate","deltaX","deltaY","disposeInternal","OWS","owsObject","xml","PARSERS_","readAddress_","ADDRESS_PARSERS_","readAllowedValues_","ALLOWED_VALUES_PARSERS_","readConstraint_","CONSTRAINT_PARSERS_","readContactInfo_","CONTACT_INFO_PARSERS_","readDcp_","DCP_PARSERS_","readGet_","href","REQUEST_METHOD_PARSERS_","readHttp_","HTTP_PARSERS_","readOperation_","OPERATION_PARSERS_","readOperationsMetadata_","OPERATIONS_METADATA_PARSERS_","readPhone_","PHONE_PARSERS_","readServiceIdentification_","SERVICE_IDENTIFICATION_PARSERS_","readServiceContact_","SERVICE_CONTACT_PARSERS_","readServiceProvider_","SERVICE_PROVIDER_PARSERS_","readValue_","NAMESPACE_URIS_","makeStructureNS","ServiceIdentification","ServiceProvider","OperationsMetadata","DeliveryPoint","City","AdministrativeArea","PostalCode","Country","ElectronicMailAddress","Value","makeObjectPropertyPusher","AllowedValues","Phone","Address","HTTP","Get","Post","DCP","Operation","Voice","Facsimile","Constraint","IndividualName","PositionName","ContactInfo","Abstract","AccessConstraints","Fees","Title","ServiceTypeVersion","ServiceType","ProviderName","ProviderSite","ServiceContact","format_OWS","WMTSCapabilities","owsParser_","WMTSCapabilityObject","readContents_","CONTENTS_PARSERS_","readLayer_","LAYER_PARSERS_","readTileMatrixSet_","TMS_PARSERS_","readStyle_","style","STYLE_PARSERS_","isDefault","readTileMatrixSetLink_","TMS_LINKS_PARSERS_","readDimensions_","DIMENSION_PARSERS_","readResourceUrl_","format","template","resourceType","resource","readWgs84BoundingBox_","WGS84_BBOX_READERS_","readLegendUrl_","legend","readCoordinates_","readTileMatrix_","TM_PARSERS_","readTileMatrixLimitsList_","TMS_LIMITS_LIST_PARSERS_","readTileMatrixLimits_","TMS_LIMITS_PARSERS_","OWS_NAMESPACE_URIS_","Contents","Layer","TileMatrixSet","Style","Format","TileMatrixSetLink","Dimension","ResourceURL","WGS84BoundingBox","Identifier","LegendURL","TileMatrixSetLimits","TileMatrixLimits","TileMatrix","MinTileRow","MaxTileRow","MinTileCol","MaxTileCol","Default","LowerCorner","UpperCorner","WellKnownScaleSet","SupportedCRS","TopLeftCorner","ScaleDenominator","TileWidth","TileHeight","MatrixWidth","MatrixHeight","Filter","tagName_","filter_Filter","LogicalNary","arguments","filter_LogicalNary","concat","apply","filter_And","Bbox","filter_Bbox","Spatial","filter_Spatial","filter_Contains","Comparison","filter_Comparison","filter_During","ComparisonBinary","opt_matchCase","filter_ComparisonBinary","EqualTo","filter_EqualTo","GreaterThan","filter_GreaterThan","GreaterThanOrEqualTo","filter_GreaterThanOrEqualTo","filter_Intersects","IsBetween","filter_IsBetween","IsLike","opt_wildCard","opt_singleChar","opt_escapeChar","filter_IsLike","IsNull","filter_IsNull","LessThan","filter_LessThan","LessThanOrEqualTo","filter_LessThanOrEqualTo","filter_Not","NotEqualTo","filter_NotEqualTo","filter_Or","filter_Within","_ol_format_filter_","Function","or","not","contains","intersects","within","equalTo","notEqualTo","lessThan","lessThanOrEqualTo","greaterThan","greaterThanOrEqualTo","isNull","between","like","during"],"mappings":"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","file":"objecteditinghub.34c3707521dae7cef7ee.js","sourcesContent":["/**\n * @module ol/format/JSONFeature\n */\nimport {inherits} from '../index.js';\nimport FeatureFormat from '../format/Feature.js';\nimport FormatType from '../format/FormatType.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for JSON feature formats.\n *\n * @constructor\n * @abstract\n * @extends {ol.format.Feature}\n */\nconst JSONFeature = function() {\n  FeatureFormat.call(this);\n};\n\ninherits(JSONFeature, FeatureFormat);\n\n\n/**\n * @param {Document|Node|Object|string} source Source.\n * @return {Object} Object.\n */\nfunction getObject(source) {\n  if (typeof source === 'string') {\n    const object = JSON.parse(source);\n    return object ? /** @type {Object} */ (object) : null;\n  } else if (source !== null) {\n    return source;\n  } else {\n    return null;\n  }\n}\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.getType = function() {\n  return FormatType.JSON;\n};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.readFeature = function(source, opt_options) {\n  return this.readFeatureFromObject(\n    getObject(source), this.getReadOptions(source, opt_options));\n};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.readFeatures = function(source, opt_options) {\n  return this.readFeaturesFromObject(\n    getObject(source), this.getReadOptions(source, opt_options));\n};\n\n\n/**\n * @abstract\n * @param {Object} object Object.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @protected\n * @return {ol.Feature} Feature.\n */\nJSONFeature.prototype.readFeatureFromObject = function(object, opt_options) {};\n\n\n/**\n * @abstract\n * @param {Object} object Object.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @protected\n * @return {Array.<ol.Feature>} Features.\n */\nJSONFeature.prototype.readFeaturesFromObject = function(object, opt_options) {};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.readGeometry = function(source, opt_options) {\n  return this.readGeometryFromObject(\n    getObject(source), this.getReadOptions(source, opt_options));\n};\n\n\n/**\n * @abstract\n * @param {Object} object Object.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @protected\n * @return {ol.geom.Geometry} Geometry.\n */\nJSONFeature.prototype.readGeometryFromObject = function(object, opt_options) {};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.readProjection = function(source) {\n  return this.readProjectionFromObject(getObject(source));\n};\n\n\n/**\n * @abstract\n * @param {Object} object Object.\n * @protected\n * @return {ol.proj.Projection} Projection.\n */\nJSONFeature.prototype.readProjectionFromObject = function(object) {};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.writeFeature = function(feature, opt_options) {\n  return JSON.stringify(this.writeFeatureObject(feature, opt_options));\n};\n\n\n/**\n * @abstract\n * @param {ol.Feature} feature Feature.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {Object} Object.\n */\nJSONFeature.prototype.writeFeatureObject = function(feature, opt_options) {};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.writeFeatures = function(features, opt_options) {\n  return JSON.stringify(this.writeFeaturesObject(features, opt_options));\n};\n\n\n/**\n * @abstract\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {Object} Object.\n */\nJSONFeature.prototype.writeFeaturesObject = function(features, opt_options) {};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.writeGeometry = function(geometry, opt_options) {\n  return JSON.stringify(this.writeGeometryObject(geometry, opt_options));\n};\n\n\n/**\n * @abstract\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {Object} Object.\n */\nJSONFeature.prototype.writeGeometryObject = function(geometry, opt_options) {};\nexport default JSONFeature;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/JSONFeature.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/GeoJSON\n */\n// TODO: serialize dataProjection as crs member when writing\n// see https://github.com/openlayers/openlayers/issues/2078\n\nimport {inherits} from '../index.js';\nimport {assert} from '../asserts.js';\nimport Feature from '../Feature.js';\nimport {transformWithOptions} from '../format/Feature.js';\nimport JSONFeature from '../format/JSONFeature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assign, isEmpty} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @constructor\n * @extends {ol.format.JSONFeature}\n * @param {olx.format.GeoJSONOptions=} opt_options Options.\n * @api\n */\nconst GeoJSON = function(opt_options) {\n\n  const options = opt_options ? opt_options : {};\n\n  JSONFeature.call(this);\n\n  /**\n   * @inheritDoc\n   */\n  this.defaultDataProjection = getProjection(\n    options.defaultDataProjection ?\n      options.defaultDataProjection : 'EPSG:4326');\n\n\n  if (options.featureProjection) {\n    this.defaultFeatureProjection = getProjection(options.featureProjection);\n  }\n\n  /**\n   * Name of the geometry attribute for features.\n   * @type {string|undefined}\n   * @private\n   */\n  this.geometryName_ = options.geometryName;\n\n  /**\n   * Look for the geometry name in the feature GeoJSON\n   * @type {boolean|undefined}\n   * @private\n   */\n  this.extractGeometryName_ = options.extractGeometryName;\n\n};\n\ninherits(GeoJSON, JSONFeature);\n\n\n/**\n * @const\n * @type {Object.<string, function(GeoJSONObject): ol.geom.Geometry>}\n */\nconst GEOMETRY_READERS = {\n  'Point': readPointGeometry,\n  'LineString': readLineStringGeometry,\n  'Polygon': readPolygonGeometry,\n  'MultiPoint': readMultiPointGeometry,\n  'MultiLineString': readMultiLineStringGeometry,\n  'MultiPolygon': readMultiPolygonGeometry,\n  'GeometryCollection': readGeometryCollectionGeometry\n};\n\n\n/**\n * @const\n * @type {Object.<string, function(ol.geom.Geometry, olx.format.WriteOptions=): (GeoJSONGeometry|GeoJSONGeometryCollection)>}\n */\nconst GEOMETRY_WRITERS = {\n  'Point': writePointGeometry,\n  'LineString': writeLineStringGeometry,\n  'Polygon': writePolygonGeometry,\n  'MultiPoint': writeMultiPointGeometry,\n  'MultiLineString': writeMultiLineStringGeometry,\n  'MultiPolygon': writeMultiPolygonGeometry,\n  'GeometryCollection': writeGeometryCollectionGeometry,\n  'Circle': writeEmptyGeometryCollectionGeometry\n};\n\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.geom.Geometry} Geometry.\n */\nfunction readGeometry(object, opt_options) {\n  if (!object) {\n    return null;\n  }\n  const geometryReader = GEOMETRY_READERS[object.type];\n  return (\n    /** @type {ol.geom.Geometry} */ transformWithOptions(\n      geometryReader(object), false, opt_options)\n  );\n}\n\n\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.geom.GeometryCollection} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, opt_options) {\n  const geometries = object.geometries.map(\n    /**\n       * @param {GeoJSONGeometry} geometry Geometry.\n       * @return {ol.geom.Geometry} geometry Geometry.\n       */\n    function(geometry) {\n      return readGeometry(geometry, opt_options);\n    });\n  return new GeometryCollection(geometries);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {ol.geom.Point} Point.\n */\nfunction readPointGeometry(object) {\n  return new Point(object.coordinates);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {ol.geom.LineString} LineString.\n */\nfunction readLineStringGeometry(object) {\n  return new LineString(object.coordinates);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {ol.geom.MultiLineString} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n  return new MultiLineString(object.coordinates);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {ol.geom.MultiPoint} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n  return new MultiPoint(object.coordinates);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {ol.geom.MultiPolygon} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n  return new MultiPolygon(object.coordinates);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {ol.geom.Polygon} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  return new Polygon(object.coordinates);\n}\n\n\n/**\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry|GeoJSONGeometryCollection} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, opt_options) {\n  const geometryWriter = GEOMETRY_WRITERS[geometry.getType()];\n  return geometryWriter(/** @type {ol.geom.Geometry} */ (\n    transformWithOptions(geometry, true, opt_options)), opt_options);\n}\n\n\n/**\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {GeoJSONGeometryCollection} Empty GeoJSON geometry collection.\n */\nfunction writeEmptyGeometryCollectionGeometry(geometry) {\n  return /** @type {GeoJSONGeometryCollection} */ ({\n    type: 'GeometryCollection',\n    geometries: []\n  });\n}\n\n\n/**\n * @param {ol.geom.GeometryCollection} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, opt_options) {\n  const geometries = geometry.getGeometriesArray().map(function(geometry) {\n    const options = assign({}, opt_options);\n    delete options.featureProjection;\n    return writeGeometry(geometry, options);\n  });\n  return /** @type {GeoJSONGeometryCollection} */ ({\n    type: 'GeometryCollection',\n    geometries: geometries\n  });\n}\n\n\n/**\n * @param {ol.geom.LineString} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'LineString',\n    coordinates: geometry.getCoordinates()\n  });\n}\n\n\n/**\n * @param {ol.geom.MultiLineString} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates()\n  });\n}\n\n\n/**\n * @param {ol.geom.MultiPoint} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates()\n  });\n}\n\n\n/**\n * @param {ol.geom.MultiPolygon} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n  let right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right)\n  });\n}\n\n\n/**\n * @param {ol.geom.Point} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'Point',\n    coordinates: geometry.getCoordinates()\n  });\n}\n\n\n/**\n * @param {ol.geom.Polygon} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, opt_options) {\n  let right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right)\n  });\n}\n\n\n/**\n * Read a feature from a GeoJSON Feature source.  Only works for Feature or\n * geometry types.  Use {@link ol.format.GeoJSON#readFeatures} to read\n * FeatureCollection source. If feature at source has an id, it will be used\n * as Feature id by calling {@link ol.Feature#setId} internally.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.Feature} Feature.\n * @api\n */\nGeoJSON.prototype.readFeature;\n\n\n/**\n * Read all features from a GeoJSON source.  Works for all GeoJSON types.\n * If the source includes only geometries, features will be created with those\n * geometries.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {Array.<ol.Feature>} Features.\n * @api\n */\nGeoJSON.prototype.readFeatures;\n\n\n/**\n * @inheritDoc\n */\nGeoJSON.prototype.readFeatureFromObject = function(object, opt_options) {\n  /**\n   * @type {GeoJSONFeature}\n   */\n  let geoJSONFeature = null;\n  if (object.type === 'Feature') {\n    geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\n  } else {\n    geoJSONFeature = /** @type {GeoJSONFeature} */ ({\n      type: 'Feature',\n      geometry: /** @type {GeoJSONGeometry|GeoJSONGeometryCollection} */ (object)\n    });\n  }\n\n  const geometry = readGeometry(geoJSONFeature.geometry, opt_options);\n  const feature = new Feature();\n  if (this.geometryName_) {\n    feature.setGeometryName(this.geometryName_);\n  } else if (this.extractGeometryName_ && geoJSONFeature.geometry_name !== undefined) {\n    feature.setGeometryName(geoJSONFeature.geometry_name);\n  }\n  feature.setGeometry(geometry);\n  if (geoJSONFeature.id !== undefined) {\n    feature.setId(geoJSONFeature.id);\n  }\n  if (geoJSONFeature.properties) {\n    feature.setProperties(geoJSONFeature.properties);\n  }\n  return feature;\n};\n\n\n/**\n * @inheritDoc\n */\nGeoJSON.prototype.readFeaturesFromObject = function(object, opt_options) {\n  const geoJSONObject = /** @type {GeoJSONObject} */ (object);\n  /** @type {Array.<ol.Feature>} */\n  let features = null;\n  if (geoJSONObject.type === 'FeatureCollection') {\n    const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */\n        (object);\n    features = [];\n    const geoJSONFeatures = geoJSONFeatureCollection.features;\n    let i, ii;\n    for (i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n      features.push(this.readFeatureFromObject(geoJSONFeatures[i],\n        opt_options));\n    }\n  } else {\n    features = [this.readFeatureFromObject(object, opt_options)];\n  }\n  return features;\n};\n\n\n/**\n * Read a geometry from a GeoJSON source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.geom.Geometry} Geometry.\n * @api\n */\nGeoJSON.prototype.readGeometry;\n\n\n/**\n * @inheritDoc\n */\nGeoJSON.prototype.readGeometryFromObject = function(object, opt_options) {\n  return readGeometry(/** @type {GeoJSONGeometry} */ (object), opt_options);\n};\n\n\n/**\n * Read the projection from a GeoJSON source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @return {ol.proj.Projection} Projection.\n * @api\n */\nGeoJSON.prototype.readProjection;\n\n\n/**\n * @inheritDoc\n */\nGeoJSON.prototype.readProjectionFromObject = function(object) {\n  const geoJSONObject = /** @type {GeoJSONObject} */ (object);\n  const crs = geoJSONObject.crs;\n  let projection;\n  if (crs) {\n    if (crs.type == 'name') {\n      projection = getProjection(crs.properties.name);\n    } else {\n      assert(false, 36); // Unknown SRS type\n    }\n  } else {\n    projection = this.defaultDataProjection;\n  }\n  return /** @type {ol.proj.Projection} */ (projection);\n};\n\n\n/**\n * Encode a feature as a GeoJSON Feature string.\n *\n * @function\n * @param {ol.Feature} feature Feature.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {string} GeoJSON.\n * @override\n * @api\n */\nGeoJSON.prototype.writeFeature;\n\n\n/**\n * Encode a feature as a GeoJSON Feature object.\n *\n * @param {ol.Feature} feature Feature.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONFeature} Object.\n * @override\n * @api\n */\nGeoJSON.prototype.writeFeatureObject = function(feature, opt_options) {\n  opt_options = this.adaptOptions(opt_options);\n\n  const object = /** @type {GeoJSONFeature} */ ({\n    'type': 'Feature'\n  });\n  const id = feature.getId();\n  if (id !== undefined) {\n    object.id = id;\n  }\n  const geometry = feature.getGeometry();\n  if (geometry) {\n    object.geometry = writeGeometry(geometry, opt_options);\n  } else {\n    object.geometry = null;\n  }\n  const properties = feature.getProperties();\n  delete properties[feature.getGeometryName()];\n  if (!isEmpty(properties)) {\n    object.properties = properties;\n  } else {\n    object.properties = null;\n  }\n  return object;\n};\n\n\n/**\n * Encode an array of features as GeoJSON.\n *\n * @function\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {string} GeoJSON.\n * @api\n */\nGeoJSON.prototype.writeFeatures;\n\n\n/**\n * Encode an array of features as a GeoJSON object.\n *\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONFeatureCollection} GeoJSON Object.\n * @override\n * @api\n */\nGeoJSON.prototype.writeFeaturesObject = function(features, opt_options) {\n  opt_options = this.adaptOptions(opt_options);\n  const objects = [];\n  let i, ii;\n  for (i = 0, ii = features.length; i < ii; ++i) {\n    objects.push(this.writeFeatureObject(features[i], opt_options));\n  }\n  return /** @type {GeoJSONFeatureCollection} */ ({\n    type: 'FeatureCollection',\n    features: objects\n  });\n};\n\n\n/**\n * Encode a geometry as a GeoJSON string.\n *\n * @function\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {string} GeoJSON.\n * @api\n */\nGeoJSON.prototype.writeGeometry;\n\n\n/**\n * Encode a geometry as a GeoJSON object.\n *\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n * @override\n * @api\n */\nGeoJSON.prototype.writeGeometryObject = function(geometry, opt_options) {\n  return writeGeometry(geometry, this.adaptOptions(opt_options));\n};\nexport default GeoJSON;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/GeoJSON.js\n// module id = null\n// module chunks = ","/**\n * @module ol/geom/MultiLineString\n */\nimport {inherits} from '../index.js';\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport LineString from '../geom/LineString.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport _ol_geom_flat_closest_ from '../geom/flat/closest.js';\nimport _ol_geom_flat_deflate_ from '../geom/flat/deflate.js';\nimport _ol_geom_flat_inflate_ from '../geom/flat/inflate.js';\nimport _ol_geom_flat_interpolate_ from '../geom/flat/interpolate.js';\nimport _ol_geom_flat_intersectsextent_ from '../geom/flat/intersectsextent.js';\nimport _ol_geom_flat_simplify_ from '../geom/flat/simplify.js';\n\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @constructor\n * @extends {ol.geom.SimpleGeometry}\n * @param {Array.<Array.<ol.Coordinate>>} coordinates Coordinates.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @api\n */\nconst MultiLineString = function(coordinates, opt_layout) {\n\n  SimpleGeometry.call(this);\n\n  /**\n   * @type {Array.<number>}\n   * @private\n   */\n  this.ends_ = [];\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.maxDelta_ = -1;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.maxDeltaRevision_ = -1;\n\n  this.setCoordinates(coordinates, opt_layout);\n\n};\n\ninherits(MultiLineString, SimpleGeometry);\n\n\n/**\n * Append the passed linestring to the multilinestring.\n * @param {ol.geom.LineString} lineString LineString.\n * @api\n */\nMultiLineString.prototype.appendLineString = function(lineString) {\n  if (!this.flatCoordinates) {\n    this.flatCoordinates = lineString.getFlatCoordinates().slice();\n  } else {\n    extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n  }\n  this.ends_.push(this.flatCoordinates.length);\n  this.changed();\n};\n\n\n/**\n * Make a complete copy of the geometry.\n * @return {!ol.geom.MultiLineString} Clone.\n * @override\n * @api\n */\nMultiLineString.prototype.clone = function() {\n  const multiLineString = new MultiLineString(null);\n  multiLineString.setFlatCoordinates(\n    this.layout, this.flatCoordinates.slice(), this.ends_.slice());\n  return multiLineString;\n};\n\n\n/**\n * @inheritDoc\n */\nMultiLineString.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {\n  if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n    return minSquaredDistance;\n  }\n  if (this.maxDeltaRevision_ != this.getRevision()) {\n    this.maxDelta_ = Math.sqrt(_ol_geom_flat_closest_.getsMaxSquaredDelta(\n      this.flatCoordinates, 0, this.ends_, this.stride, 0));\n    this.maxDeltaRevision_ = this.getRevision();\n  }\n  return _ol_geom_flat_closest_.getsClosestPoint(\n    this.flatCoordinates, 0, this.ends_, this.stride,\n    this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n};\n\n\n/**\n * Returns the coordinate at `m` using linear interpolation, or `null` if no\n * such coordinate exists.\n *\n * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n * M will return the first coordinate and Ms greater than the last M will\n * return the last coordinate.\n *\n * `opt_interpolate` controls interpolation between consecutive LineStrings\n * within the MultiLineString. If `opt_interpolate` is `true` the coordinates\n * will be linearly interpolated between the last coordinate of one LineString\n * and the first coordinate of the next LineString.  If `opt_interpolate` is\n * `false` then the function will return `null` for Ms falling between\n * LineStrings.\n *\n * @param {number} m M.\n * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.\n * @param {boolean=} opt_interpolate Interpolate. Default is `false`.\n * @return {ol.Coordinate} Coordinate.\n * @api\n */\nMultiLineString.prototype.getCoordinateAtM = function(m, opt_extrapolate, opt_interpolate) {\n  if ((this.layout != GeometryLayout.XYM &&\n       this.layout != GeometryLayout.XYZM) ||\n      this.flatCoordinates.length === 0) {\n    return null;\n  }\n  const extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n  const interpolate = opt_interpolate !== undefined ? opt_interpolate : false;\n  return _ol_geom_flat_interpolate_.lineStringsCoordinateAtM(this.flatCoordinates, 0,\n    this.ends_, this.stride, m, extrapolate, interpolate);\n};\n\n\n/**\n * Return the coordinates of the multilinestring.\n * @return {Array.<Array.<ol.Coordinate>>} Coordinates.\n * @override\n * @api\n */\nMultiLineString.prototype.getCoordinates = function() {\n  return _ol_geom_flat_inflate_.coordinatess(\n    this.flatCoordinates, 0, this.ends_, this.stride);\n};\n\n\n/**\n * @return {Array.<number>} Ends.\n */\nMultiLineString.prototype.getEnds = function() {\n  return this.ends_;\n};\n\n\n/**\n * Return the linestring at the specified index.\n * @param {number} index Index.\n * @return {ol.geom.LineString} LineString.\n * @api\n */\nMultiLineString.prototype.getLineString = function(index) {\n  if (index < 0 || this.ends_.length <= index) {\n    return null;\n  }\n  const lineString = new LineString(null);\n  lineString.setFlatCoordinates(this.layout, this.flatCoordinates.slice(\n    index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]));\n  return lineString;\n};\n\n\n/**\n * Return the linestrings of this multilinestring.\n * @return {Array.<ol.geom.LineString>} LineStrings.\n * @api\n */\nMultiLineString.prototype.getLineStrings = function() {\n  const flatCoordinates = this.flatCoordinates;\n  const ends = this.ends_;\n  const layout = this.layout;\n  /** @type {Array.<ol.geom.LineString>} */\n  const lineStrings = [];\n  let offset = 0;\n  let i, ii;\n  for (i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const lineString = new LineString(null);\n    lineString.setFlatCoordinates(layout, flatCoordinates.slice(offset, end));\n    lineStrings.push(lineString);\n    offset = end;\n  }\n  return lineStrings;\n};\n\n\n/**\n * @return {Array.<number>} Flat midpoints.\n */\nMultiLineString.prototype.getFlatMidpoints = function() {\n  const midpoints = [];\n  const flatCoordinates = this.flatCoordinates;\n  let offset = 0;\n  const ends = this.ends_;\n  const stride = this.stride;\n  let i, ii;\n  for (i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const midpoint = _ol_geom_flat_interpolate_.lineString(\n      flatCoordinates, offset, end, stride, 0.5);\n    extend(midpoints, midpoint);\n    offset = end;\n  }\n  return midpoints;\n};\n\n\n/**\n * @inheritDoc\n */\nMultiLineString.prototype.getSimplifiedGeometryInternal = function(squaredTolerance) {\n  const simplifiedFlatCoordinates = [];\n  const simplifiedEnds = [];\n  simplifiedFlatCoordinates.length = _ol_geom_flat_simplify_.douglasPeuckers(\n    this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance,\n    simplifiedFlatCoordinates, 0, simplifiedEnds);\n  const simplifiedMultiLineString = new MultiLineString(null);\n  simplifiedMultiLineString.setFlatCoordinates(\n    GeometryLayout.XY, simplifiedFlatCoordinates, simplifiedEnds);\n  return simplifiedMultiLineString;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nMultiLineString.prototype.getType = function() {\n  return GeometryType.MULTI_LINE_STRING;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nMultiLineString.prototype.intersectsExtent = function(extent) {\n  return _ol_geom_flat_intersectsextent_.lineStrings(\n    this.flatCoordinates, 0, this.ends_, this.stride, extent);\n};\n\n\n/**\n * Set the coordinates of the multilinestring.\n * @param {Array.<Array.<ol.Coordinate>>} coordinates Coordinates.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @override\n * @api\n */\nMultiLineString.prototype.setCoordinates = function(coordinates, opt_layout) {\n  if (!coordinates) {\n    this.setFlatCoordinates(GeometryLayout.XY, null, this.ends_);\n  } else {\n    this.setLayout(opt_layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = _ol_geom_flat_deflate_.coordinatess(\n      this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n};\n\n\n/**\n * @param {ol.geom.GeometryLayout} layout Layout.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {Array.<number>} ends Ends.\n */\nMultiLineString.prototype.setFlatCoordinates = function(layout, flatCoordinates, ends) {\n  this.setFlatCoordinatesInternal(layout, flatCoordinates);\n  this.ends_ = ends;\n  this.changed();\n};\n\n\n/**\n * @param {Array.<ol.geom.LineString>} lineStrings LineStrings.\n */\nMultiLineString.prototype.setLineStrings = function(lineStrings) {\n  let layout = this.getLayout();\n  const flatCoordinates = [];\n  const ends = [];\n  let i, ii;\n  for (i = 0, ii = lineStrings.length; i < ii; ++i) {\n    const lineString = lineStrings[i];\n    if (i === 0) {\n      layout = lineString.getLayout();\n    }\n    extend(flatCoordinates, lineString.getFlatCoordinates());\n    ends.push(flatCoordinates.length);\n  }\n  this.setFlatCoordinates(layout, flatCoordinates, ends);\n};\nexport default MultiLineString;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/geom/MultiLineString.js\n// module id = 17\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23","/**\n * @module ngeo.format.Attribute\n*/\nconst exports = {};\nimport ngeoFormatAttributeType from 'ngeo/format/AttributeType.js';\n\n\n/**\n * Set the `type` and `geomType` properties of an attribute if the given\n * type is a geometry one.\n *\n * @param {ngeox.AttributeBase} attribute Attribute.\n * @param {string} type Type.\n * @return {boolean} Whether both attribute type and geomType were set.\n */\nexports.setGeometryType = function(attribute, type) {\n  const geomRegex =\n    /gml:((Multi)?(Point|Line|Polygon|Curve|Surface|Geometry)).*/;\n  if (geomRegex.exec(type)) {\n    attribute.type = ngeoFormatAttributeType.GEOMETRY;\n    if (/^gml:Point/.exec(type)) {\n      attribute.geomType = 'Point';\n    } else if (/^gml:LineString|^gml:Curve/.exec(type)) {\n      attribute.geomType = 'LineString';\n    } else if (/^gml:Polygon|^gml:Surface/.exec(type)) {\n      attribute.geomType = 'Polygon';\n    } else if (/^gml:MultiPoint/.exec(type)) {\n      attribute.geomType = 'MultiPoint';\n    } else if (/^gml:MultiLineString|^gml:MultiCurve/.exec(type)) {\n      attribute.geomType = 'MultiLineString';\n    } else if (/^gml:MultiPolygon|^gml:MultiSurface/.exec(type)) {\n      attribute.geomType = 'MultiPolygon';\n    }\n  }\n  return !!attribute.type && !!attribute.geomType;\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/Attribute.js","/**\n * @module ol/format/XSD\n */\nimport _ol_xml_ from '../xml.js';\nimport _ol_string_ from '../string.js';\nconst XSD = {};\n\n\n/**\n * @param {Node} node Node.\n * @return {boolean|undefined} Boolean.\n */\nXSD.readBoolean = function(node) {\n  const s = _ol_xml_.getAllTextContent(node, false);\n  return XSD.readBooleanString(s);\n};\n\n\n/**\n * @param {string} string String.\n * @return {boolean|undefined} Boolean.\n */\nXSD.readBooleanString = function(string) {\n  const m = /^\\s*(true|1)|(false|0)\\s*$/.exec(string);\n  if (m) {\n    return m[1] !== undefined || false;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} DateTime in seconds.\n */\nXSD.readDateTime = function(node) {\n  const s = _ol_xml_.getAllTextContent(node, false);\n  const dateTime = Date.parse(s);\n  return isNaN(dateTime) ? undefined : dateTime / 1000;\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Decimal.\n */\nXSD.readDecimal = function(node) {\n  const s = _ol_xml_.getAllTextContent(node, false);\n  return XSD.readDecimalString(s);\n};\n\n\n/**\n * @param {string} string String.\n * @return {number|undefined} Decimal.\n */\nXSD.readDecimalString = function(string) {\n  // FIXME check spec\n  const m = /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)\\s*$/i.exec(string);\n  if (m) {\n    return parseFloat(m[1]);\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Non negative integer.\n */\nXSD.readNonNegativeInteger = function(node) {\n  const s = _ol_xml_.getAllTextContent(node, false);\n  return XSD.readNonNegativeIntegerString(s);\n};\n\n\n/**\n * @param {string} string String.\n * @return {number|undefined} Non negative integer.\n */\nXSD.readNonNegativeIntegerString = function(string) {\n  const m = /^\\s*(\\d+)\\s*$/.exec(string);\n  if (m) {\n    return parseInt(m[1], 10);\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {string|undefined} String.\n */\nXSD.readString = function(node) {\n  return _ol_xml_.getAllTextContent(node, false).trim();\n};\n\n\n/**\n * @param {Node} node Node to append a TextNode with the boolean to.\n * @param {boolean} bool Boolean.\n */\nXSD.writeBooleanTextNode = function(node, bool) {\n  XSD.writeStringTextNode(node, (bool) ? '1' : '0');\n};\n\n\n/**\n * @param {Node} node Node to append a CDATA Section with the string to.\n * @param {string} string String.\n */\nXSD.writeCDATASection = function(node, string) {\n  node.appendChild(_ol_xml_.DOCUMENT.createCDATASection(string));\n};\n\n\n/**\n * @param {Node} node Node to append a TextNode with the dateTime to.\n * @param {number} dateTime DateTime in seconds.\n */\nXSD.writeDateTimeTextNode = function(node, dateTime) {\n  const date = new Date(dateTime * 1000);\n  const string = date.getUTCFullYear() + '-' +\n      _ol_string_.padNumber(date.getUTCMonth() + 1, 2) + '-' +\n      _ol_string_.padNumber(date.getUTCDate(), 2) + 'T' +\n      _ol_string_.padNumber(date.getUTCHours(), 2) + ':' +\n      _ol_string_.padNumber(date.getUTCMinutes(), 2) + ':' +\n      _ol_string_.padNumber(date.getUTCSeconds(), 2) + 'Z';\n  node.appendChild(_ol_xml_.DOCUMENT.createTextNode(string));\n};\n\n\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} decimal Decimal.\n */\nXSD.writeDecimalTextNode = function(node, decimal) {\n  const string = decimal.toPrecision();\n  node.appendChild(_ol_xml_.DOCUMENT.createTextNode(string));\n};\n\n\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} nonNegativeInteger Non negative integer.\n */\nXSD.writeNonNegativeIntegerTextNode = function(node, nonNegativeInteger) {\n  const string = nonNegativeInteger.toString();\n  node.appendChild(_ol_xml_.DOCUMENT.createTextNode(string));\n};\n\n\n/**\n * @param {Node} node Node to append a TextNode with the string to.\n * @param {string} string String.\n */\nXSD.writeStringTextNode = function(node, string) {\n  node.appendChild(_ol_xml_.DOCUMENT.createTextNode(string));\n};\nexport default XSD;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/XSD.js\n// module id = 18\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module ol/geom/MultiPoint\n */\nimport {inherits} from '../index.js';\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY, containsXY} from '../extent.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport _ol_geom_flat_deflate_ from '../geom/flat/deflate.js';\nimport _ol_geom_flat_inflate_ from '../geom/flat/inflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @constructor\n * @extends {ol.geom.SimpleGeometry}\n * @param {Array.<ol.Coordinate>} coordinates Coordinates.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @api\n */\nconst MultiPoint = function(coordinates, opt_layout) {\n  SimpleGeometry.call(this);\n  this.setCoordinates(coordinates, opt_layout);\n};\n\ninherits(MultiPoint, SimpleGeometry);\n\n\n/**\n * Append the passed point to this multipoint.\n * @param {ol.geom.Point} point Point.\n * @api\n */\nMultiPoint.prototype.appendPoint = function(point) {\n  if (!this.flatCoordinates) {\n    this.flatCoordinates = point.getFlatCoordinates().slice();\n  } else {\n    extend(this.flatCoordinates, point.getFlatCoordinates());\n  }\n  this.changed();\n};\n\n\n/**\n * Make a complete copy of the geometry.\n * @return {!ol.geom.MultiPoint} Clone.\n * @override\n * @api\n */\nMultiPoint.prototype.clone = function() {\n  const multiPoint = new MultiPoint(null);\n  multiPoint.setFlatCoordinates(this.layout, this.flatCoordinates.slice());\n  return multiPoint;\n};\n\n\n/**\n * @inheritDoc\n */\nMultiPoint.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {\n  if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n    return minSquaredDistance;\n  }\n  const flatCoordinates = this.flatCoordinates;\n  const stride = this.stride;\n  let i, ii, j;\n  for (i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n    const squaredDistance = squaredDx(\n      x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (j = 0; j < stride; ++j) {\n        closestPoint[j] = flatCoordinates[i + j];\n      }\n      closestPoint.length = stride;\n    }\n  }\n  return minSquaredDistance;\n};\n\n\n/**\n * Return the coordinates of the multipoint.\n * @return {Array.<ol.Coordinate>} Coordinates.\n * @override\n * @api\n */\nMultiPoint.prototype.getCoordinates = function() {\n  return _ol_geom_flat_inflate_.coordinates(\n    this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n};\n\n\n/**\n * Return the point at the specified index.\n * @param {number} index Index.\n * @return {ol.geom.Point} Point.\n * @api\n */\nMultiPoint.prototype.getPoint = function(index) {\n  const n = !this.flatCoordinates ?\n    0 : this.flatCoordinates.length / this.stride;\n  if (index < 0 || n <= index) {\n    return null;\n  }\n  const point = new Point(null);\n  point.setFlatCoordinates(this.layout, this.flatCoordinates.slice(\n    index * this.stride, (index + 1) * this.stride));\n  return point;\n};\n\n\n/**\n * Return the points of this multipoint.\n * @return {Array.<ol.geom.Point>} Points.\n * @api\n */\nMultiPoint.prototype.getPoints = function() {\n  const flatCoordinates = this.flatCoordinates;\n  const layout = this.layout;\n  const stride = this.stride;\n  /** @type {Array.<ol.geom.Point>} */\n  const points = [];\n  let i, ii;\n  for (i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n    const point = new Point(null);\n    point.setFlatCoordinates(layout, flatCoordinates.slice(i, i + stride));\n    points.push(point);\n  }\n  return points;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nMultiPoint.prototype.getType = function() {\n  return GeometryType.MULTI_POINT;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nMultiPoint.prototype.intersectsExtent = function(extent) {\n  const flatCoordinates = this.flatCoordinates;\n  const stride = this.stride;\n  let i, ii, x, y;\n  for (i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n    x = flatCoordinates[i];\n    y = flatCoordinates[i + 1];\n    if (containsXY(extent, x, y)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Set the coordinates of the multipoint.\n * @param {Array.<ol.Coordinate>} coordinates Coordinates.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @override\n * @api\n */\nMultiPoint.prototype.setCoordinates = function(coordinates, opt_layout) {\n  if (!coordinates) {\n    this.setFlatCoordinates(GeometryLayout.XY, null);\n  } else {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = _ol_geom_flat_deflate_.coordinates(\n      this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  }\n};\n\n\n/**\n * @param {ol.geom.GeometryLayout} layout Layout.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n */\nMultiPoint.prototype.setFlatCoordinates = function(layout, flatCoordinates) {\n  this.setFlatCoordinatesInternal(layout, flatCoordinates);\n  this.changed();\n};\nexport default MultiPoint;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/geom/MultiPoint.js\n// module id = 19\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23","/**\n * @module ol/geom/MultiPolygon\n */\nimport {inherits} from '../index.js';\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport Polygon from '../geom/Polygon.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport _ol_geom_flat_area_ from '../geom/flat/area.js';\nimport _ol_geom_flat_center_ from '../geom/flat/center.js';\nimport _ol_geom_flat_closest_ from '../geom/flat/closest.js';\nimport _ol_geom_flat_contains_ from '../geom/flat/contains.js';\nimport _ol_geom_flat_deflate_ from '../geom/flat/deflate.js';\nimport _ol_geom_flat_inflate_ from '../geom/flat/inflate.js';\nimport _ol_geom_flat_interiorpoint_ from '../geom/flat/interiorpoint.js';\nimport _ol_geom_flat_intersectsextent_ from '../geom/flat/intersectsextent.js';\nimport _ol_geom_flat_orient_ from '../geom/flat/orient.js';\nimport _ol_geom_flat_simplify_ from '../geom/flat/simplify.js';\n\n/**\n * @classdesc\n * Multi-polygon geometry.\n *\n * @constructor\n * @extends {ol.geom.SimpleGeometry}\n * @param {Array.<Array.<Array.<ol.Coordinate>>>} coordinates Coordinates.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @api\n */\nconst MultiPolygon = function(coordinates, opt_layout) {\n\n  SimpleGeometry.call(this);\n\n  /**\n   * @type {Array.<Array.<number>>}\n   * @private\n   */\n  this.endss_ = [];\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.flatInteriorPointsRevision_ = -1;\n\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n  this.flatInteriorPoints_ = null;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.maxDelta_ = -1;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.maxDeltaRevision_ = -1;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.orientedRevision_ = -1;\n\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n  this.orientedFlatCoordinates_ = null;\n\n  this.setCoordinates(coordinates, opt_layout);\n\n};\n\ninherits(MultiPolygon, SimpleGeometry);\n\n\n/**\n * Append the passed polygon to this multipolygon.\n * @param {ol.geom.Polygon} polygon Polygon.\n * @api\n */\nMultiPolygon.prototype.appendPolygon = function(polygon) {\n  /** @type {Array.<number>} */\n  let ends;\n  if (!this.flatCoordinates) {\n    this.flatCoordinates = polygon.getFlatCoordinates().slice();\n    ends = polygon.getEnds().slice();\n    this.endss_.push();\n  } else {\n    const offset = this.flatCoordinates.length;\n    extend(this.flatCoordinates, polygon.getFlatCoordinates());\n    ends = polygon.getEnds().slice();\n    let i, ii;\n    for (i = 0, ii = ends.length; i < ii; ++i) {\n      ends[i] += offset;\n    }\n  }\n  this.endss_.push(ends);\n  this.changed();\n};\n\n\n/**\n * Make a complete copy of the geometry.\n * @return {!ol.geom.MultiPolygon} Clone.\n * @override\n * @api\n */\nMultiPolygon.prototype.clone = function() {\n  const multiPolygon = new MultiPolygon(null);\n\n  const len = this.endss_.length;\n  const newEndss = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    newEndss[i] = this.endss_[i].slice();\n  }\n\n  multiPolygon.setFlatCoordinates(\n    this.layout, this.flatCoordinates.slice(), newEndss);\n  return multiPolygon;\n};\n\n\n/**\n * @inheritDoc\n */\nMultiPolygon.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {\n  if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n    return minSquaredDistance;\n  }\n  if (this.maxDeltaRevision_ != this.getRevision()) {\n    this.maxDelta_ = Math.sqrt(_ol_geom_flat_closest_.getssMaxSquaredDelta(\n      this.flatCoordinates, 0, this.endss_, this.stride, 0));\n    this.maxDeltaRevision_ = this.getRevision();\n  }\n  return _ol_geom_flat_closest_.getssClosestPoint(\n    this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride,\n    this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n};\n\n\n/**\n * @inheritDoc\n */\nMultiPolygon.prototype.containsXY = function(x, y) {\n  return _ol_geom_flat_contains_.linearRingssContainsXY(\n    this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, x, y);\n};\n\n\n/**\n * Return the area of the multipolygon on projected plane.\n * @return {number} Area (on projected plane).\n * @api\n */\nMultiPolygon.prototype.getArea = function() {\n  return _ol_geom_flat_area_.linearRingss(\n    this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);\n};\n\n\n/**\n * Get the coordinate array for this geometry.  This array has the structure\n * of a GeoJSON coordinate array for multi-polygons.\n *\n * @param {boolean=} opt_right Orient coordinates according to the right-hand\n *     rule (counter-clockwise for exterior and clockwise for interior rings).\n *     If `false`, coordinates will be oriented according to the left-hand rule\n *     (clockwise for exterior and counter-clockwise for interior rings).\n *     By default, coordinate orientation will depend on how the geometry was\n *     constructed.\n * @return {Array.<Array.<Array.<ol.Coordinate>>>} Coordinates.\n * @override\n * @api\n */\nMultiPolygon.prototype.getCoordinates = function(opt_right) {\n  let flatCoordinates;\n  if (opt_right !== undefined) {\n    flatCoordinates = this.getOrientedFlatCoordinates().slice();\n    _ol_geom_flat_orient_.orientLinearRingss(\n      flatCoordinates, 0, this.endss_, this.stride, opt_right);\n  } else {\n    flatCoordinates = this.flatCoordinates;\n  }\n\n  return _ol_geom_flat_inflate_.coordinatesss(\n    flatCoordinates, 0, this.endss_, this.stride);\n};\n\n\n/**\n * @return {Array.<Array.<number>>} Endss.\n */\nMultiPolygon.prototype.getEndss = function() {\n  return this.endss_;\n};\n\n\n/**\n * @return {Array.<number>} Flat interior points.\n */\nMultiPolygon.prototype.getFlatInteriorPoints = function() {\n  if (this.flatInteriorPointsRevision_ != this.getRevision()) {\n    const flatCenters = _ol_geom_flat_center_.linearRingss(\n      this.flatCoordinates, 0, this.endss_, this.stride);\n    this.flatInteriorPoints_ = _ol_geom_flat_interiorpoint_.linearRingss(\n      this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride,\n      flatCenters);\n    this.flatInteriorPointsRevision_ = this.getRevision();\n  }\n  return this.flatInteriorPoints_;\n};\n\n\n/**\n * Return the interior points as {@link ol.geom.MultiPoint multipoint}.\n * @return {ol.geom.MultiPoint} Interior points as XYM coordinates, where M is\n * the length of the horizontal intersection that the point belongs to.\n * @api\n */\nMultiPolygon.prototype.getInteriorPoints = function() {\n  const interiorPoints = new MultiPoint(null);\n  interiorPoints.setFlatCoordinates(GeometryLayout.XYM,\n    this.getFlatInteriorPoints().slice());\n  return interiorPoints;\n};\n\n\n/**\n * @return {Array.<number>} Oriented flat coordinates.\n */\nMultiPolygon.prototype.getOrientedFlatCoordinates = function() {\n  if (this.orientedRevision_ != this.getRevision()) {\n    const flatCoordinates = this.flatCoordinates;\n    if (_ol_geom_flat_orient_.linearRingssAreOriented(\n      flatCoordinates, 0, this.endss_, this.stride)) {\n      this.orientedFlatCoordinates_ = flatCoordinates;\n    } else {\n      this.orientedFlatCoordinates_ = flatCoordinates.slice();\n      this.orientedFlatCoordinates_.length =\n          _ol_geom_flat_orient_.orientLinearRingss(\n            this.orientedFlatCoordinates_, 0, this.endss_, this.stride);\n    }\n    this.orientedRevision_ = this.getRevision();\n  }\n  return this.orientedFlatCoordinates_;\n};\n\n\n/**\n * @inheritDoc\n */\nMultiPolygon.prototype.getSimplifiedGeometryInternal = function(squaredTolerance) {\n  const simplifiedFlatCoordinates = [];\n  const simplifiedEndss = [];\n  simplifiedFlatCoordinates.length = _ol_geom_flat_simplify_.quantizess(\n    this.flatCoordinates, 0, this.endss_, this.stride,\n    Math.sqrt(squaredTolerance),\n    simplifiedFlatCoordinates, 0, simplifiedEndss);\n  const simplifiedMultiPolygon = new MultiPolygon(null);\n  simplifiedMultiPolygon.setFlatCoordinates(\n    GeometryLayout.XY, simplifiedFlatCoordinates, simplifiedEndss);\n  return simplifiedMultiPolygon;\n};\n\n\n/**\n * Return the polygon at the specified index.\n * @param {number} index Index.\n * @return {ol.geom.Polygon} Polygon.\n * @api\n */\nMultiPolygon.prototype.getPolygon = function(index) {\n  if (index < 0 || this.endss_.length <= index) {\n    return null;\n  }\n  let offset;\n  if (index === 0) {\n    offset = 0;\n  } else {\n    const prevEnds = this.endss_[index - 1];\n    offset = prevEnds[prevEnds.length - 1];\n  }\n  const ends = this.endss_[index].slice();\n  const end = ends[ends.length - 1];\n  if (offset !== 0) {\n    let i, ii;\n    for (i = 0, ii = ends.length; i < ii; ++i) {\n      ends[i] -= offset;\n    }\n  }\n  const polygon = new Polygon(null);\n  polygon.setFlatCoordinates(\n    this.layout, this.flatCoordinates.slice(offset, end), ends);\n  return polygon;\n};\n\n\n/**\n * Return the polygons of this multipolygon.\n * @return {Array.<ol.geom.Polygon>} Polygons.\n * @api\n */\nMultiPolygon.prototype.getPolygons = function() {\n  const layout = this.layout;\n  const flatCoordinates = this.flatCoordinates;\n  const endss = this.endss_;\n  const polygons = [];\n  let offset = 0;\n  let i, ii, j, jj;\n  for (i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i].slice();\n    const end = ends[ends.length - 1];\n    if (offset !== 0) {\n      for (j = 0, jj = ends.length; j < jj; ++j) {\n        ends[j] -= offset;\n      }\n    }\n    const polygon = new Polygon(null);\n    polygon.setFlatCoordinates(\n      layout, flatCoordinates.slice(offset, end), ends);\n    polygons.push(polygon);\n    offset = end;\n  }\n  return polygons;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nMultiPolygon.prototype.getType = function() {\n  return GeometryType.MULTI_POLYGON;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nMultiPolygon.prototype.intersectsExtent = function(extent) {\n  return _ol_geom_flat_intersectsextent_.linearRingss(\n    this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, extent);\n};\n\n\n/**\n * Set the coordinates of the multipolygon.\n * @param {Array.<Array.<Array.<ol.Coordinate>>>} coordinates Coordinates.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @override\n * @api\n */\nMultiPolygon.prototype.setCoordinates = function(coordinates, opt_layout) {\n  if (!coordinates) {\n    this.setFlatCoordinates(GeometryLayout.XY, null, this.endss_);\n  } else {\n    this.setLayout(opt_layout, coordinates, 3);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const endss = _ol_geom_flat_deflate_.coordinatesss(\n      this.flatCoordinates, 0, coordinates, this.stride, this.endss_);\n    if (endss.length === 0) {\n      this.flatCoordinates.length = 0;\n    } else {\n      const lastEnds = endss[endss.length - 1];\n      this.flatCoordinates.length = lastEnds.length === 0 ?\n        0 : lastEnds[lastEnds.length - 1];\n    }\n    this.changed();\n  }\n};\n\n\n/**\n * @param {ol.geom.GeometryLayout} layout Layout.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {Array.<Array.<number>>} endss Endss.\n */\nMultiPolygon.prototype.setFlatCoordinates = function(layout, flatCoordinates, endss) {\n  this.setFlatCoordinatesInternal(layout, flatCoordinates);\n  this.endss_ = endss;\n  this.changed();\n};\n\n\n/**\n * @param {Array.<ol.geom.Polygon>} polygons Polygons.\n */\nMultiPolygon.prototype.setPolygons = function(polygons) {\n  let layout = this.getLayout();\n  const flatCoordinates = [];\n  const endss = [];\n  for (let i = 0, ii = polygons.length; i < ii; ++i) {\n    const polygon = polygons[i];\n    if (i === 0) {\n      layout = polygon.getLayout();\n    }\n    const offset = flatCoordinates.length;\n    const ends = polygon.getEnds();\n    for (let j = 0, jj = ends.length; j < jj; ++j) {\n      ends[j] += offset;\n    }\n    extend(flatCoordinates, polygon.getFlatCoordinates());\n    endss.push(ends);\n  }\n  this.setFlatCoordinates(layout, flatCoordinates, endss);\n};\n\nexport default MultiPolygon;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/geom/MultiPolygon.js\n// module id = 20\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23","/**\n * @module gmf.theme.Themes\n*/\nimport googAsserts from 'goog/asserts.js';\nimport gmfBase from 'gmf/index.js';\nimport ngeoMapLayerHelper from 'ngeo/map/LayerHelper.js';\nimport * as olBase from 'ol/index.js';\nimport * as olArray from 'ol/array.js';\nimport olCollection from 'ol/Collection.js';\nimport olEventsEventTarget from 'ol/events/EventTarget.js';\nimport olLayerTile from 'ol/layer/Tile.js';\n\n/**\n * The Themes service. This service interacts\n * with c2cgeoportal's \"themes\" web service and exposes functions that return\n * objects in the tree returned by the \"themes\" web service.\n *\n * @constructor\n * @struct\n * @extends {ol.events.EventTarget}\n * @param {angular.$http} $http Angular http service.\n * @param {angular.$injector} $injector Main injector.\n * @param {angular.$q} $q Angular q service\n * @param {ngeo.map.LayerHelper} ngeoLayerHelper Ngeo Layer Helper.\n * @param {angularGettext.Catalog} gettextCatalog Gettext catalog.\n * @param {gmfx.ThemesOptions} gmfThemesOptions Themes options.\n * @ngInject\n * @ngdoc service\n * @ngname gmfThemes\n */\nconst exports = function($http, $injector, $q, ngeoLayerHelper, gettextCatalog, gmfThemesOptions) {\n\n  olEventsEventTarget.call(this);\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.addBlankBackgroundLayer_ = true;\n  if (gmfThemesOptions.addBlankBackgroundLayer !== undefined) {\n    this.addBlankBackgroundLayer_ = gmfThemesOptions.addBlankBackgroundLayer;\n  }\n\n  /**\n   * @type {angular.$q}\n   * @private\n   */\n  this.$q_ = $q;\n\n  /**\n   * @type {angular.$http}\n   * @private\n   */\n  this.$http_ = $http;\n\n  /**\n   * @type {string|undefined}\n   * @private\n   */\n  this.treeUrl_ = undefined;\n  if ($injector.has('gmfTreeUrl')) {\n    this.treeUrl_ = $injector.get('gmfTreeUrl');\n  }\n\n  this.cacheVersion_ = '0';\n  if ($injector.has('cacheVersion')) {\n    this.cacheVersion_ = $injector.get('cacheVersion');\n  }\n\n  /**\n   * @type {?ngeo.statemanager.Location}\n   * @private\n   */\n  this.ngeoLocation_ = null;\n  if ($injector.has('ngeoLocation')) {\n    this.ngeoLocation_ = $injector.get('ngeoLocation');\n  }\n\n  /**\n   * @type {ngeo.map.LayerHelper}\n   * @private\n   */\n  this.layerHelper_ = ngeoLayerHelper;\n\n  /**\n   * @type {angularGettext.Catalog}\n   * @private\n   */\n  this.gettextCatalog = gettextCatalog;\n\n  /**\n   * @type {angular.$q.Deferred}\n   * @private\n   */\n  this.deferred_ = $q.defer();\n\n  /**\n   * @type {angular.$q.Promise}\n   * @private\n   */\n  this.promise_ = this.deferred_.promise;\n\n  /**\n   * @type {boolean}\n   */\n  this.loaded = false;\n\n  /**\n   * @type {angular.$q.Promise}\n   * @private\n   */\n  this.bgLayerPromise_ = null;\n};\n\nolBase.inherits(exports, olEventsEventTarget);\n\n\n/**\n * @param {Array.<gmfThemes.GmfTheme>} themes Array of \"theme\" objects.\n * @param {string} name The layer name.\n * @return {gmfThemes.GmfGroup} The group.\n */\nexports.findGroupByLayerNodeName = function(themes, name) {\n  for (let i = 0, ii = themes.length; i < ii; i++) {\n    const theme = themes[i];\n    for (let j = 0, jj = theme.children.length; j < jj; j++) {\n      const group = theme.children[j];\n      const childNodes = [];\n      exports.getFlatNodes(group, childNodes);\n      if (exports.findObjectByName(childNodes, name)) {\n        return group;\n      }\n    }\n  }\n  return null;\n};\n\n/**\n * Find a layer group object by its name. Return null if not found.\n * @param {Array.<gmfThemes.GmfTheme>} themes Array of \"theme\" objects.\n * @param {string} name The group name.\n * @return {gmfThemes.GmfGroup} The group.\n */\nexports.findGroupByName = function(themes, name) {\n  for (let i = 0, ii = themes.length; i < ii; i++) {\n    const theme = themes[i];\n    for (let j = 0, jj = theme.children.length; j < jj; j++) {\n      const group = theme.children[j];\n      const internalNodes = [];\n      exports.getFlatInternalNodes(group, internalNodes);\n      if (exports.findObjectByName(internalNodes, name)) {\n        return group;\n      }\n    }\n  }\n  return null;\n};\n\n\n/**\n * Find an object by its name. Return null if not found.\n * @param {Array.<T>} objects Array of objects with a 'name' attribute.\n * @param {string} objectName The object name.\n * @return {T} The object or null.\n * @template T\n */\nexports.findObjectByName = function(objects, objectName) {\n  return olArray.find(objects, object => object['name'] === objectName);\n};\n\n\n/**\n * Find a theme object by its name. Return null if not found.\n * @param {Array.<gmfThemes.GmfTheme>} themes Array of \"theme\" objects.\n * @param {string} themeName The theme name.\n * @return {gmfThemes.GmfTheme} The theme object or null.\n */\nexports.findThemeByName = function(themes, themeName) {\n  return exports.findObjectByName(themes, themeName);\n};\n\n\n/**\n * Fill the given \"nodes\" array with all internal nodes (non-leaf nones) in\n * the given node.\n *\n * @param {gmfThemes.GmfGroup|gmfThemes.GmfLayer} node Layertree node.\n * @param {Array.<gmfThemes.GmfGroup|gmfThemes.GmfLayer>} nodes An array.\n */\nexports.getFlatInternalNodes = function(node, nodes) {\n  const children = node.children;\n  if (children !== undefined) {\n    nodes.push(node);\n    for (let i = 0; i < children.length; i++) {\n      exports.getFlatInternalNodes(children[i], nodes);\n    }\n  }\n};\n\n\n/**\n * Fill the given \"nodes\" array with all leaf nodes in the given node.\n *\n * @param {gmfThemes.GmfGroup|gmfThemes.GmfLayer} node Layertree node.\n * @param {Array.<gmfThemes.GmfGroup|gmfThemes.GmfLayer>} nodes An array.\n */\nexports.getFlatNodes = function(node, nodes) {\n  let i;\n  const children = node.children;\n  if (children !== undefined) {\n    for (i = 0; i < children.length; i++) {\n      exports.getFlatNodes(children[i], nodes);\n    }\n  } else {\n    nodes.push(node);\n  }\n};\n\n\n/**\n * Get background layers.\n * @param {!Object.<string, string>} appDimensions Dimensions.\n * @return {!angular.$q.Promise.<!Array.<!ol.layer.Base>>} Promise.\n */\nexports.prototype.getBgLayers = function(appDimensions) {\n  const gettextCatalog = this.gettextCatalog;\n  if (this.bgLayerPromise_) {\n    return this.bgLayerPromise_;\n  }\n  const $q = this.$q_;\n  const layerHelper = this.layerHelper_;\n\n  /**\n   * @param {gmfThemes.GmfGroup|gmfThemes.GmfLayer} item A group or a leaf.\n   * @param {Array.<number>} array Array of ids;\n   */\n  const getIds = function(item, array) {\n    array.push(olBase.getUid(item));\n    const children = item.children || [];\n    children.forEach((child) => {\n      getIds(child, array);\n    });\n  };\n\n  /**\n   * @param {gmfThemes.GmfGroup|gmfThemes.GmfLayer} item The item.\n   * @param {ol.layer.Base} layer The layer.\n   * @return {ol.layer.Base} the provided layer.\n   */\n  const callback = function(item, layer) {\n    layer.set('label', item.name);\n    layer.set('metadata', item.metadata);\n    layer.set('dimensions', item.dimensions);\n    const ids = [];\n    getIds(item, ids);\n    layer.set('querySourceIds', ids);\n    return layer;\n  };\n\n  /**\n   * @param {gmfThemes.GmfOgcServers} ogcServers The ogc servers.\n   * @param {gmfThemes.GmfGroup|gmfThemes.GmfLayer} gmfLayer The item.\n   * @return {angular.$q.Promise.<ol.layer.Base>|ol.layer.Base} the created layer.\n   */\n  const layerLayerCreationFn = function(ogcServers, gmfLayer) {\n    if (gmfLayer.type === 'WMTS') {\n      const gmfLayerWMTS = /** @type gmfThemes.GmfLayerWMTS */ (gmfLayer);\n      googAsserts.assert(gmfLayerWMTS.url, 'Layer URL is required');\n      return layerHelper.createWMTSLayerFromCapabilitites(\n        gmfLayerWMTS.url,\n        gmfLayerWMTS.layer || '',\n        gmfLayer.dimensions\n      ).then(callback.bind(null, gmfLayer)).then(null, (response) => {\n        let message = `Unable to build layer \"${gmfLayerWMTS.layer}\" from WMTSCapabilities: ${gmfLayerWMTS.url}\\n`;\n        message += `OpenLayers error is \"${response['message']}`;\n        console.error(message);\n        // Continue even if some layers have failed loading.\n        return $q.resolve(undefined);\n      });\n    } else if (gmfLayer.type === 'WMS') {\n      const gmfLayerWMS = /** @type gmfThemes.GmfLayerWMS */ (gmfLayer);\n      googAsserts.assert(gmfLayerWMS.ogcServer, 'An OGC server is required');\n      const server = ogcServers[gmfLayerWMS.ogcServer];\n      googAsserts.assert(server, 'The OGC server was not found');\n      googAsserts.assert(server.url, 'The server URL is required');\n      googAsserts.assert(server.imageType, 'The server image type is required');\n      return callback(gmfLayer, layerHelper.createBasicWMSLayer(\n        server.url,\n        gmfLayerWMS.layers || '',\n        server.imageType,\n        server.type,\n        undefined, // time\n        gmfLayer.dimensions,\n        server.credential ? 'use-credentials' : 'anonymous'\n      ));\n    }\n    googAsserts.fail(`Unsupported type: ${gmfLayer.type}`);\n  };\n\n  /**\n   * @param {gmfThemes.GmfOgcServers} ogcServers The ogc servers.\n   * @param {gmfThemes.GmfGroup} item The item.\n   * @return {angular.$q.Promise.<ol.layer.Group>} the created layer.\n   */\n  const layerGroupCreationFn = function(ogcServers, item) {\n    // We assume no child is a layer group.\n    const orderedChildren = item.children.map(x => x).reverse(); // the order of insertion in OL3 is the contrary of the theme\n    const promises = orderedChildren.map(layerLayerCreationFn.bind(null, ogcServers));\n    return $q.all(promises).then((layers) => {\n      let collection;\n      if (layers) {\n        layers = layers.filter(l => l);\n        collection = new olCollection(layers);\n      }\n      const group = layerHelper.createBasicGroup(collection);\n      callback(item, group);\n      return group;\n    });\n  };\n\n  /**\n   * @param {gmfThemes.GmfThemesResponse} data The \"themes\" web service\n   *     response.\n   * @return {angular.$q.Promise.<Array.<ol.layer.Base>>} Promise.\n   */\n  const promiseSuccessFn = function(data) {\n    const promises = data.background_layers.map((item) => {\n      const itemType = item.type;\n      if (itemType === 'WMTS' || itemType === 'WMS') {\n        return layerLayerCreationFn(data.ogcServers, item);\n      } else if (item.children) {\n        // group of layers\n        return layerGroupCreationFn(data.ogcServers, item);\n      } else {\n        return undefined;\n      }\n    }, this);\n    return $q.all(promises);\n  }.bind(this);\n\n  this.bgLayerPromise_ = this.promise_.then(promiseSuccessFn).then((values) => {\n    const layers = [];\n\n    // (1) add a blank layer\n    if (this.addBlankBackgroundLayer_) {\n      // For i18n string collection\n      gettextCatalog.getString('blank');\n      layers.push(new olLayerTile({\n        'label': 'blank',\n        'metadata': {'thumbnail': ''}\n      }));\n    }\n\n    // (2) add layers that were returned\n    values.forEach((layer) => {\n      if (layer) {\n        layers.push(layer);\n      }\n    });\n    return layers;\n  });\n\n  return this.bgLayerPromise_;\n};\n\n\n/**\n * Get a theme object by its name.\n * @param {string} themeName Theme name.\n * @return {angular.$q.Promise.<gmfThemes.GmfTheme>} Promise.\n * @export\n */\nexports.prototype.getThemeObject = function(themeName) {\n  return this.promise_.then(\n    /**\n       * @param {gmfThemes.GmfThemesResponse} data The \"themes\" web service\n       *     response.\n       * @return {gmfThemes.GmfTheme?} The theme object for themeName, or null\n       *     if not found.\n       */\n    data => exports.findThemeByName(data.themes, themeName));\n};\n\n\n/**\n * Get an array of theme objects.\n * @return {angular.$q.Promise.<!Array.<!gmfThemes.GmfTheme>>} Promise.\n * @export\n */\nexports.prototype.getThemesObject = function() {\n  return this.promise_.then(\n    /**\n       * @param {!gmfThemes.GmfThemesResponse} data The \"themes\" web service\n       *     response.\n       * @return {!Array.<!gmfThemes.GmfTheme>} The themes object.\n       */\n    data => data.themes);\n};\n\n\n/**\n * Get an array of background layer objects.\n * @return {angular.$q.Promise.<!Array.<!gmfThemes.GmfLayer>>} Promise.\n */\nexports.prototype.getBackgroundLayersObject = function() {\n  googAsserts.assert(this.promise_ !== null);\n  return this.promise_.then(\n    /**\n       * @param {!gmfThemes.GmfThemesResponse} data The \"themes\" web service\n       *     response.\n       * @return {!Array.<!gmfThemes.GmfLayer>} The background layers object.\n       */\n    data => data.background_layers\n  );\n};\n\n\n/**\n * Get the `ogcServers` object.\n * @return {angular.$q.Promise.<!gmfThemes.GmfOgcServers>} Promise.\n * @export\n */\nexports.prototype.getOgcServersObject = function() {\n  googAsserts.assert(this.promise_ !== null);\n  return this.promise_.then(\n    /**\n       * @param {gmfThemes.GmfThemesResponse} data The \"themes\" web service\n       *     response.\n       * @return {gmfThemes.GmfOgcServers} The `ogcServers` object.\n       */\n    data => data.ogcServers);\n};\n\n\n/**\n * Returns a promise to check if one of the layers in the themes is editable.\n * @return {angular.$q.Promise.<boolean>} Promise.\n */\nexports.prototype.hasEditableLayers = function() {\n  googAsserts.assert(this.promise_ !== null);\n  return this.promise_.then(this.hasEditableLayers_.bind(this));\n};\n\n\n/**\n * Returns if one of the layers in the themes is editable.\n * @param {gmfThemes.GmfThemesResponse} data The \"themes\" web service response.\n * @return {boolean} Editable layers?\n */\nexports.prototype.hasEditableLayers_ = function(data) {\n  return data.themes.some((theme) => {\n    const hasEditableLayers = theme.children.some(this.hasNodeEditableLayers_.bind(this));\n    return hasEditableLayers;\n  });\n};\n\n\n/**\n * @param {gmfThemes.GmfGroup|gmfThemes.GmfLayer} node Theme node\n * @return {boolean} Editable layers?\n */\nexports.prototype.hasNodeEditableLayers_ = function(node) {\n  if (node.editable) {\n    return true;\n  }\n\n  let hasEditableLayers = false;\n  const children = node.children;\n  if (children && children.length) {\n    hasEditableLayers = children.some(this.hasNodeEditableLayers_.bind(this));\n  }\n  return hasEditableLayers;\n};\n\n\n/**\n * Get the snapping configuration object from a Layertree controller\n * @param {gmfThemes.GmfLayer} node Layer node from the theme.\n * @return {?gmfThemes.GmfSnappingConfig} Snapping configuration, if found.\n * @export\n */\nexports.getSnappingConfig = function(node) {\n  const config = (node.metadata && node.metadata.snappingConfig !== undefined) ?\n    node.metadata.snappingConfig : null;\n  return config;\n};\n\n\n/**\n * Get the maximal resolution defined for this layer. Looks in the\n *     layer itself before to look into its metadata.\n * @param {gmfThemes.GmfLayerWMS} gmfLayer the GeoMapFish Layer. WMTS layer is\n *     also allowed (the type is defined as GmfLayerWMS only to avoid some\n *     useless tests to know if a maxResolutionHint property can exist\n *     on the node).\n * @return {number|undefined} the max resolution or undefined if any.\n */\nexports.getNodeMaxResolution = function(gmfLayer) {\n  const metadata = gmfLayer.metadata;\n  let maxResolution = gmfLayer.maxResolutionHint;\n  if (maxResolution === undefined && metadata !== undefined) {\n    maxResolution = metadata.maxResolution;\n  }\n  return maxResolution;\n};\n\n\n/**\n * Get the minimal resolution defined for this layer. Looks in the\n *     layer itself before to look into its metadata.\n * @param {gmfThemes.GmfLayerWMS} gmfLayer the GeoMapFish Layer. WMTS layer is\n *     also allowed (the type is defined as GmfLayerWMS only to avoid some\n *     useless tests to know if a minResolutionHint property can exist\n *     on the node).\n * @return {number|undefined} the min resolution or undefined if any.\n */\nexports.getNodeMinResolution = function(gmfLayer) {\n  const metadata = gmfLayer.metadata;\n  let minResolution = gmfLayer.minResolutionHint;\n  if (minResolution === undefined && metadata !== undefined) {\n    minResolution = metadata.minResolution;\n  }\n  return minResolution;\n};\n\n\n/**\n * @param {number=} opt_roleId The role id to send in the request.\n * Load themes from the \"themes\" service.\n * @export\n */\nexports.prototype.loadThemes = function(opt_roleId) {\n\n  googAsserts.assert(this.treeUrl_, 'gmfTreeUrl should be defined.');\n\n  if (this.loaded) {\n    // reload the themes\n    this.deferred_ = this.$q_.defer();\n    this.promise_ = this.deferred_.promise;\n    this.bgLayerPromise_ = null;\n    this.loaded = false;\n  }\n\n  this.$http_.get(this.treeUrl_, {\n    params: opt_roleId !== undefined ? {\n      'role': opt_roleId,\n      'cache_version': this.cacheVersion_\n    } : {\n      'cache_version': this.cacheVersion_\n    },\n    cache: false,\n    withCredentials: true\n  }).then((response) => {\n    if (response.data.errors.length != 0) {\n      const message = `The themes contain some errors:\\n${\n        response.data.errors.join('\\n')}`;\n      console.error(message);\n      if (this.ngeoLocation_ !== null && this.ngeoLocation_.hasParam('debug')) {\n        window.alert(message);\n      }\n    }\n    this.deferred_.resolve(response.data);\n    this.dispatchEvent('change');\n    this.loaded = true;\n  }, (response) => {\n    this.deferred_.reject(response);\n  });\n};\n\n\n/**\n * @enum {string}\n */\nexports.NodeType = {\n  MIXED_GROUP: 'MixedGroup',\n  NOT_MIXED_GROUP: 'NotMixedGroup',\n  WMTS: 'WMTS',\n  WMS: 'WMS'\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('gmfThemes', [\n  ngeoMapLayerHelper.module.name,\n]);\nexports.module.value('gmfThemesOptions', {});\nexports.module.service('gmfThemes', exports);\nexports.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/theme/Themes.js","/**\n * @module gmf.editing.EditFeature\n*/\nimport gmfBase from 'gmf/index.js';\nimport olFormatGeoJSON from 'ol/format/GeoJSON.js';\nimport * as olUri from 'ol/uri.js';\n\n/**\n * Service that provides methods to get, insert, update and delete vector\n * features with the use of a GeoMapFish Protocol as back-end.\n *\n * The GeoJSON format is used when obtaining or sending features.\n *\n * @constructor\n * @struct\n * @param {angular.$http} $http Angular http service.\n * @param {string} gmfLayersUrl Url to the GeoMapFish layers service.\n * @ngInject\n */\nconst exports = function($http, gmfLayersUrl) {\n\n  /**\n   * @type {angular.$http}\n   * @private\n   */\n  this.http_ = $http;\n\n  /**\n   * Url to the GeoMapFish layers service. Required in applications that use:\n   * - the editfeature tools\n   * - the objectediting tools\n   *\n   * @type {string}\n   * @private\n   */\n  this.baseUrl_ = gmfLayersUrl;\n\n};\n\n\n/**\n * Build a query to the MapFish protocol to fetch features from a list\n * of layer ids inside a specified extent.\n *\n * @param {Array.<number>} layerIds List of layer ids to get the features from.\n * @param {ol.Extent} extent The extent where to get the features from.\n * @return {angular.$q.Promise} Promise.\n * @export\n */\nexports.prototype.getFeaturesInExtent = function(layerIds, extent) {\n  const url = olUri.appendParams(\n    `${this.baseUrl_}/${layerIds.join(',')}`,\n    {\n      'bbox': extent.join(',')\n    }\n  );\n  return this.http_.get(url).then(this.handleGetFeatures_.bind(this));\n};\n\n\n/**\n * Build a query to the MapFish protocol to fetch features from a list\n * of layer ids and a list of comparison filters.\n *\n * This method is called in the ObjectEditing service, which is injected in\n * the permalink service, i.e. it's always called. Since we don't have to\n * define the url to the GMF Protocol (layers) a dummy promise returns an\n * empty array of features if the url is not defined.\n *\n * @param {!Array.<number>} layerIds List of layer ids to get the features from.\n * @param {!Array.<!gmfx.ComparisonFilter>} filters List of comparison filters\n * @return {angular.$q.Promise} Promise.\n */\nexports.prototype.getFeaturesWithComparisonFilters = function(\n  layerIds, filters\n) {\n  const properties = [];\n  const params = {};\n\n  for (const filter of filters) {\n    params[`${filter.property}__${filter.operator}`] = filter.value;\n    properties.push(filter.property);\n  }\n\n  params['queryable'] = properties.join(',');\n\n  const url = olUri.appendParams(`${this.baseUrl_}/${layerIds.join(',')}`, params);\n  return this.http_.get(url).then(this.handleGetFeatures_.bind(this));\n};\n\n\n/**\n * @param {angular.$http.Response} resp Ajax response.\n * @return {Array.<ol.Feature>} List of features.\n * @private\n */\nexports.prototype.handleGetFeatures_ = function(resp) {\n  return new olFormatGeoJSON().readFeatures(resp.data);\n};\n\n\n/**\n * @param {number} layerId The layer id that contains the feature.\n * @param {Array.<ol.Feature>} features List of features to insert.\n * @return {angular.$q.Promise} Promise.\n * @export\n */\nexports.prototype.insertFeatures = function(layerId, features) {\n  const url = `${this.baseUrl_}/${layerId}`;\n  const geoJSON = new olFormatGeoJSON().writeFeatures(features);\n  return this.http_.post(url, geoJSON, {\n    headers: {'Content-Type': 'application/json'},\n    withCredentials: true\n  });\n};\n\n\n/**\n * @param {number} layerId The layer id that contains the feature.\n * @param {ol.Feature} feature The feature to update.\n * @return {angular.$q.Promise} Promise.\n * @export\n */\nexports.prototype.updateFeature = function(layerId, feature) {\n  const url = `${this.baseUrl_}/${layerId.toString()}/${feature.getId()}`;\n  const geoJSON = new olFormatGeoJSON().writeFeature(feature);\n  return this.http_.put(url, geoJSON, {\n    headers: {'Content-Type': 'application/json'},\n    withCredentials: true\n  });\n};\n\n\n/**\n * @param {number} layerId The layer id that contains the feature.\n * @param {ol.Feature} feature The feature to delete.\n * @return {angular.$q.Promise} Promise.\n * @export\n */\nexports.prototype.deleteFeature = function(layerId, feature) {\n  const url = `${this.baseUrl_}/${layerId.toString()}/${feature.getId()}`;\n  return this.http_.delete(url, {\n    headers: {'Content-Type': 'application/json'},\n    withCredentials: true\n  });\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('gmfEditFeature', []);\nexports.module.service('gmfEditFeature', exports);\ngmfBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/editing/EditFeature.js","/**\n * @module ngeo.format.XSDAttribute\n*/\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoFormatAttribute from 'ngeo/format/Attribute.js';\nimport ngeoFormatAttributeType from 'ngeo/format/AttributeType.js';\nimport * as olBase from 'ol/index.js';\nimport olFormatXML from 'ol/format/XML.js';\nimport googAsserts from 'goog/asserts.js';\n\n/**\n * @classdesc\n * Reads attributes that are defined in XSD format and return them as a list.\n *\n * @constructor\n * @struct\n * @extends {ol.format.XML}\n */\nconst exports = function() {\n  olFormatXML.call(this);\n};\n\nolBase.inherits(exports, olFormatXML);\n\n\n/**\n * @param {Document|Node|string} source Source.\n * @return {Array.<ngeox.Attribute>} The parsed result.\n * @override\n */\nexports.prototype.read = function(source) {\n  return (\n    /** @type {Array.<ngeox.Attribute>} */ olFormatXML.prototype.read.call(this, source)\n  );\n};\n\n\n/**\n * @param {Document} doc Document.\n * @return {Array.<ngeox.Attribute>} List of attributes.\n * @override\n */\nexports.prototype.readFromDocument = function(doc) {\n  googAsserts.assert(doc.nodeType == Node.DOCUMENT_NODE,\n    'doc.nodeType should be DOCUMENT');\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readFromNode(n);\n    }\n  }\n  return null;\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {Array.<ngeox.Attribute>} List of attributes.\n * @override\n */\nexports.prototype.readFromNode = function(node) {\n  googAsserts.assert(node.nodeType == Node.ELEMENT_NODE,\n    'node.nodeType should be ELEMENT');\n  googAsserts.assert(node.localName == 'schema',\n    'localName should be schema');\n\n  let elements = node.getElementsByTagName('element');\n  if (!elements.length) {\n    elements = node.getElementsByTagName('xsd:element');\n  }\n  const attributes = [];\n\n  let attribute;\n  for (let i = 0, ii = elements.length; i < ii; i++) {\n    attribute = this.readFromElementNode_(elements[i]);\n    if (attribute) {\n      attributes.push(attribute);\n    }\n  }\n\n  return attributes;\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {?ngeox.Attribute} An attribute object.\n * @private\n */\nexports.prototype.readFromElementNode_ = function(node) {\n\n  const name = node.getAttribute('name');\n  googAsserts.assertString(name, 'name should be defined in element node.');\n\n  const alias = node.getAttribute('alias');\n  const nillable = node.getAttribute('nillable');\n  const required = !(nillable === true || nillable === 'true');\n\n  const attribute = {\n    name,\n    alias,\n    required\n  };\n\n  const type = node.getAttribute('type');\n  if (type) {\n    if (!ngeoFormatAttribute.setGeometryType(attribute, type)) {\n      this.setAttributeByXsdType_(attribute, type);\n    }\n  } else {\n\n    // Attribute has no type defined on 'element' node.  Try:\n\n    // (1) Enumerations\n    let enumerations = node.getElementsByTagName('enumeration');\n    if (!enumerations.length) {\n      enumerations = node.getElementsByTagName('xsd:enumeration');\n    }\n    if (enumerations.length) {\n      attribute.type = ngeoFormatAttributeType.SELECT;\n      const choices = [];\n      for (let i = 0, ii = enumerations.length; i < ii; i++) {\n        choices.push(enumerations[i].getAttribute('value'));\n      }\n      attribute.choices = choices;\n    } else {\n      // (2) Other types with restrictions\n      let restrictions = node.getElementsByTagName('restriction');\n      if (!restrictions.length) {\n        restrictions = node.getElementsByTagName('xsd:restriction');\n      }\n      if (restrictions.length && restrictions[0]) {\n        const restrictionNode = restrictions[0];\n        this.setAttributeByXsdType_(\n          attribute,\n          restrictionNode.getAttribute('base')\n        );\n        // MaxLength\n        let maxLengths = node.getElementsByTagName('maxLength');\n        if (!maxLengths.length) {\n          maxLengths = node.getElementsByTagName('xsd:maxLength');\n        }\n        if (maxLengths.length && maxLengths[0]) {\n          attribute.maxLength = Number(maxLengths[0].getAttribute('value'));\n        }\n      }\n    }\n  }\n\n  if (!attribute.type) {\n    return null;\n  }\n\n  googAsserts.assert(attribute.type);\n\n  return attribute;\n};\n\n\n/**\n * Set the `type` and `numType` properties of an attribute depending on the\n * given xsdType.\n *\n * @param {ngeox.AttributeBase} attribute Attribute.\n * @param {string} type The xsd type.\n * @private\n */\nexports.prototype.setAttributeByXsdType_ = function(\n  attribute, type\n) {\n  if (type === 'xsd:boolean') {\n    attribute.type = ngeoFormatAttributeType.BOOLEAN;\n  } else if (type === 'xsd:date') {\n    attribute.type = ngeoFormatAttributeType.DATE;\n  } else if (type === 'xsd:dateTime') {\n    attribute.type = ngeoFormatAttributeType.DATETIME;\n  } else if (type === 'xsd:time') {\n    attribute.type = ngeoFormatAttributeType.TIME;\n  } else if (type === 'xsd:decimal') {\n    attribute.type = ngeoFormatAttributeType.NUMBER;\n    attribute.numType = exports.NumberType.FLOAT;\n  } else if (type === 'xsd:integer') {\n    attribute.type = ngeoFormatAttributeType.NUMBER;\n    attribute.numType = exports.NumberType.INTEGER;\n  } else if (type === 'xsd:string') {\n    attribute.type = ngeoFormatAttributeType.TEXT;\n  }\n};\n\n\n/**\n * Returns the first geometry attribute among a given list of attributes.\n * @param {Array.<ngeox.Attribute>} attributes The list of attributes.\n * @return {?ngeox.Attribute} A geometry attribute object.\n */\nexports.getGeometryAttribute = function(attributes) {\n  let geomAttribute = null;\n  for (let i = 0, ii = attributes.length; i < ii; i++) {\n    if (attributes[i].type === ngeoFormatAttributeType.GEOMETRY) {\n      geomAttribute = attributes[i];\n      break;\n    }\n  }\n  return geomAttribute;\n};\n\n\n/**\n * @enum {string}\n * @export\n */\nexports.NumberType = {\n  /**\n   * @type {string}\n   * @export\n   */\n  FLOAT: 'float',\n  /**\n   * @type {string}\n   * @export\n   */\n  INTEGER: 'integer'\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/XSDAttribute.js","/**\n * @module gmf.editing.XSDAttributes\n*/\nimport gmfBase from 'gmf/index.js';\nimport ngeoFormatXSDAttribute from 'ngeo/format/XSDAttribute.js';\n\n/**\n * An service used to fetch the XSD attribute definition of layers using their\n * id from a GeoMapFish server.\n *\n * @constructor\n * @struct\n * @param {angular.$http} $http Angular http service.\n * @param {string} gmfLayersUrl Url to the GeoMapFish layers service.\n * @ngInject\n */\nconst exports = function($http, gmfLayersUrl) {\n\n  /**\n   * @type {angular.$http}\n   * @private\n   */\n  this.http_ = $http;\n\n  /**\n   * @type {string}\n   * @private\n   */\n  this.baseUrl_ = gmfLayersUrl;\n\n  /**\n   * @type {Object.<number, !angular.$q.Promise>}\n   * @private\n   */\n  this.promises_ = {};\n\n};\n\n\n/**\n * @param {number} id Layer id.\n * @return {angular.$q.Promise} Promise.\n * @export\n */\nexports.prototype.getAttributes = function(id) {\n  if (!this.promises_[id]) {\n    const url = `${this.baseUrl_}/${id}/md.xsd`;\n    this.promises_[id] = this.http_.get(url).then(\n      this.handleGetAttributes_.bind(this));\n  }\n  return this.promises_[id];\n};\n\n/**\n * @param {angular.$http.Response} resp Ajax response.\n * @return {Array.<ngeox.Attribute>} List of attributes.\n * @export\n */\nexports.prototype.handleGetAttributes_ = function(resp) {\n  return new ngeoFormatXSDAttribute().read(resp.data);\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('gmfXSDAttributes', []);\nexports.module.service('gmfXSDAttributes', exports);\ngmfBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/editing/XSDAttributes.js","/**\n * @module ol/format/XMLFeature\n */\nimport {inherits} from '../index.js';\nimport {extend} from '../array.js';\nimport FeatureFormat from '../format/Feature.js';\nimport FormatType from '../format/FormatType.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for XML feature formats.\n *\n * @constructor\n * @abstract\n * @extends {ol.format.Feature}\n */\nconst XMLFeature = function() {\n\n  /**\n   * @type {XMLSerializer}\n   * @private\n   */\n  this.xmlSerializer_ = new XMLSerializer();\n\n  FeatureFormat.call(this);\n};\n\ninherits(XMLFeature, FeatureFormat);\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.getType = function() {\n  return FormatType.XML;\n};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.readFeature = function(source, opt_options) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readFeatureFromDocument(\n      /** @type {Document} */ (source), opt_options);\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readFeatureFromNode(/** @type {Node} */ (source), opt_options);\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readFeatureFromDocument(doc, opt_options);\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * @param {Document} doc Document.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @return {ol.Feature} Feature.\n */\nXMLFeature.prototype.readFeatureFromDocument = function(\n  doc, opt_options) {\n  const features = this.readFeaturesFromDocument(doc, opt_options);\n  if (features.length > 0) {\n    return features[0];\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @return {ol.Feature} Feature.\n */\nXMLFeature.prototype.readFeatureFromNode = function(node, opt_options) {\n  return null; // not implemented\n};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.readFeatures = function(source, opt_options) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readFeaturesFromDocument(\n      /** @type {Document} */ (source), opt_options);\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readFeaturesFromNode(/** @type {Node} */ (source), opt_options);\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readFeaturesFromDocument(doc, opt_options);\n  } else {\n    return [];\n  }\n};\n\n\n/**\n * @param {Document} doc Document.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @protected\n * @return {Array.<ol.Feature>} Features.\n */\nXMLFeature.prototype.readFeaturesFromDocument = function(\n  doc, opt_options) {\n  /** @type {Array.<ol.Feature>} */\n  const features = [];\n  let n;\n  for (n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      extend(features, this.readFeaturesFromNode(n, opt_options));\n    }\n  }\n  return features;\n};\n\n\n/**\n * @abstract\n * @param {Node} node Node.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @protected\n * @return {Array.<ol.Feature>} Features.\n */\nXMLFeature.prototype.readFeaturesFromNode = function(node, opt_options) {};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.readGeometry = function(source, opt_options) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readGeometryFromDocument(\n      /** @type {Document} */ (source), opt_options);\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readGeometryFromNode(/** @type {Node} */ (source), opt_options);\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readGeometryFromDocument(doc, opt_options);\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * @param {Document} doc Document.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @protected\n * @return {ol.geom.Geometry} Geometry.\n */\nXMLFeature.prototype.readGeometryFromDocument = function(doc, opt_options) {\n  return null; // not implemented\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @protected\n * @return {ol.geom.Geometry} Geometry.\n */\nXMLFeature.prototype.readGeometryFromNode = function(node, opt_options) {\n  return null; // not implemented\n};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.readProjection = function(source) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readProjectionFromDocument(/** @type {Document} */ (source));\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readProjectionFromNode(/** @type {Node} */ (source));\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readProjectionFromDocument(doc);\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * @param {Document} doc Document.\n * @protected\n * @return {ol.proj.Projection} Projection.\n */\nXMLFeature.prototype.readProjectionFromDocument = function(doc) {\n  return this.defaultDataProjection;\n};\n\n\n/**\n * @param {Node} node Node.\n * @protected\n * @return {ol.proj.Projection} Projection.\n */\nXMLFeature.prototype.readProjectionFromNode = function(node) {\n  return this.defaultDataProjection;\n};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.writeFeature = function(feature, opt_options) {\n  const node = this.writeFeatureNode(feature, opt_options);\n  return this.xmlSerializer_.serializeToString(node);\n};\n\n\n/**\n * @param {ol.Feature} feature Feature.\n * @param {olx.format.WriteOptions=} opt_options Options.\n * @protected\n * @return {Node} Node.\n */\nXMLFeature.prototype.writeFeatureNode = function(feature, opt_options) {\n  return null; // not implemented\n};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.writeFeatures = function(features, opt_options) {\n  const node = this.writeFeaturesNode(features, opt_options);\n  return this.xmlSerializer_.serializeToString(node);\n};\n\n\n/**\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Options.\n * @return {Node} Node.\n */\nXMLFeature.prototype.writeFeaturesNode = function(features, opt_options) {\n  return null; // not implemented\n};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.writeGeometry = function(geometry, opt_options) {\n  const node = this.writeGeometryNode(geometry, opt_options);\n  return this.xmlSerializer_.serializeToString(node);\n};\n\n\n/**\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Options.\n * @return {Node} Node.\n */\nXMLFeature.prototype.writeGeometryNode = function(geometry, opt_options) {\n  return null; // not implemented\n};\nexport default XMLFeature;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/XMLFeature.js\n// module id = 28\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22","/**\n * @module gmf.objectediting.Manager\n*/\nimport gmfEditingEditFeature from 'gmf/editing/EditFeature.js';\nimport ngeoStatemanagerLocation from 'ngeo/statemanager/Location.js';\nimport olFeature from 'ol/Feature.js';\n\n/**\n * A service that looks for certain parameters in the url and use them to fetch\n * a feature using the GMF protocol.\n *\n * @param {angular.$q} $q Angular $q service.\n * @param {gmf.editing.EditFeature} gmfEditFeature Gmf edit feature service.\n * @param {ngeo.statemanager.Location} ngeoLocation ngeo location service.\n * @constructor\n * @struct\n * @ngInject\n */\nconst exports = function($q, gmfEditFeature, ngeoLocation) {\n\n  /**\n   * @type {angular.$q}\n   * @private\n   */\n  this.q_ = $q;\n\n  /**\n   * @type {gmf.editing.EditFeature}\n   * @private\n   */\n  this.gmfEditFeature_ = gmfEditFeature;\n\n  /**\n   * @type {ngeo.statemanager.Location}\n   * @private\n   */\n  this.ngeoLocation_ = ngeoLocation;\n\n  /**\n   * @type {angular.$q.Deferred|null}\n   * @private\n   */\n  this.getFeatureDefered_ = null;\n\n};\n\n\n/**\n * Use the EditFeature service to fetch a single feature using parameters in\n * the url. The method returns a promise that has the feature as argument in\n * the callback method. If any parameter in the url is missing, `null` is\n * returned, otherwise the query is made. If the query returns a feature, it\n * is returned, otherwise one is created with empty geometry and with the\n * property set.\n *\n * @return {angular.$q.Promise} Promise.\n * @export\n */\nexports.prototype.getFeature = function() {\n\n  if (!this.getFeatureDefered_) {\n    this.getFeatureDefered_ = this.q_.defer();\n\n    const geomType = this.ngeoLocation_.getParam(\n      exports.Param.GEOM_TYPE);\n    const id = this.ngeoLocation_.getParam(\n      exports.Param.ID);\n    const layer = this.ngeoLocation_.getParam(\n      exports.Param.LAYER);\n    const property = this.ngeoLocation_.getParam(\n      exports.Param.PROPERTY);\n    const theme = this.ngeoLocation_.getParam(\n      exports.Param.THEME);\n\n    if (geomType && id && layer && property && theme) {\n      this.gmfEditFeature_.getFeaturesWithComparisonFilters(\n        [layer],\n        [{\n          operator: 'eq',\n          property: property,\n          value: id\n        }]\n      ).then(this.handleGetFeatures_.bind(this, property, id));\n    } else {\n      this.getFeatureDefered_.resolve(null);\n    }\n  }\n\n  return this.getFeatureDefered_.promise;\n\n};\n\n\n/**\n * @return {string|undefined} The geometry type.\n * @export\n */\nexports.prototype.getGeomType = function() {\n  return this.ngeoLocation_.getParam(\n    exports.Param.GEOM_TYPE);\n};\n\n\n/**\n * @return {number|undefined} The gmf layer node id.\n * @export\n */\nexports.prototype.getLayerNodeId = function() {\n  return this.ngeoLocation_.getParamAsInt(\n    exports.Param.LAYER);\n};\n\n\n/**\n * Called after getting features with comparison filters. Resolve the defered\n * promise with the first returned feature (if any), otherwise resolve it\n * with a feature created with an empty geometry and the property key + value\n * that was used in the attempt to fetch it.\n *\n * @param {string} key Property key.\n * @param {string} value Property value.\n * @param {Array.<ol.Feature>} features List of features.\n * @private\n */\nexports.prototype.handleGetFeatures_ = function(key, value, features) {\n  let feature;\n\n  if (features.length) {\n    feature = features[0];\n  } else {\n    const featureProperties = {};\n    featureProperties[key] = value;\n    featureProperties['geometry'] = null;\n    feature = new olFeature(featureProperties);\n  }\n\n  this.getFeatureDefered_.resolve(feature);\n};\n\n\n/**\n * @enum {string}\n * @export\n */\nexports.Param = {\n  /**\n   * @type {string}\n   * @export\n   */\n  GEOM_TYPE: 'objectediting_geomtype',\n  /**\n   * @type {string}\n   * @export\n   */\n  ID: 'objectediting_id',\n  /**\n   * @type {string}\n   * @export\n   */\n  LAYER: 'objectediting_layer',\n  /**\n   * @type {string}\n   * @export\n   */\n  PROPERTY: 'objectediting_property',\n  /**\n   * @type {string}\n   * @export\n   */\n  THEME: 'objectediting_theme'\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('gmfObjectEditingManager', [\n  gmfEditingEditFeature.module.name,\n  ngeoStatemanagerLocation.module.name,\n]);\nexports.module.service('gmfObjectEditingManager', exports);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/objectediting/Manager.js","/**\n * @module ngeo.format.AttributeType\n*/\n/**\n * @enum {string}\n * @export\n */\nconst exports = {\n  /**\n   * @type {string}\n   */\n  BOOLEAN: 'boolean',\n  /**\n   * @type {string}\n   */\n  DATE: 'date',\n  /**\n   * @type {string}\n   */\n  DATETIME: 'datetime',\n  /**\n   * @type {string}\n   */\n  TIME: 'time',\n  /**\n   * @type {string}\n   */\n  GEOMETRY: 'geometry',\n  /**\n   * @type {string}\n   */\n  NUMBER: 'number',\n  /**\n   * @type {string}\n   */\n  SELECT: 'select',\n  /**\n   * @type {string}\n   */\n  TEXT: 'text'\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/AttributeType.js","/**\n * @module ol/format/GMLBase\n */\n// FIXME Envelopes should not be treated as geometries! readEnvelope_ is part\n// of GEOMETRY_PARSERS_ and methods using GEOMETRY_PARSERS_ do not expect\n// envelopes/extents, only geometries!\nimport {inherits} from '../index.js';\nimport {extend} from '../array.js';\nimport Feature from '../Feature.js';\nimport {transformWithOptions} from '../format/Feature.js';\nimport XMLFeature from '../format/XMLFeature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport LinearRing from '../geom/LinearRing.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Feature base format for reading and writing data in the GML format.\n * This class cannot be instantiated, it contains only base content that\n * is shared with versioned format classes ol.format.GML2 and\n * ol.format.GML3.\n *\n * @constructor\n * @abstract\n * @param {olx.format.GMLOptions=} opt_options\n *     Optional configuration object.\n * @extends {ol.format.XMLFeature}\n */\nconst GMLBase = function(opt_options) {\n  const options = /** @type {olx.format.GMLOptions} */\n      (opt_options ? opt_options : {});\n\n  /**\n   * @protected\n   * @type {Array.<string>|string|undefined}\n   */\n  this.featureType = options.featureType;\n\n  /**\n   * @protected\n   * @type {Object.<string, string>|string|undefined}\n   */\n  this.featureNS = options.featureNS;\n\n  /**\n   * @protected\n   * @type {string}\n   */\n  this.srsName = options.srsName;\n\n  /**\n   * @protected\n   * @type {string}\n   */\n  this.schemaLocation = '';\n\n  /**\n   * @type {Object.<string, Object.<string, Object>>}\n   */\n  this.FEATURE_COLLECTION_PARSERS = {};\n  this.FEATURE_COLLECTION_PARSERS[GMLBase.GMLNS] = {\n    'featureMember': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readFeaturesInternal),\n    'featureMembers': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readFeaturesInternal)\n  };\n\n  XMLFeature.call(this);\n};\n\ninherits(GMLBase, XMLFeature);\n\n\n/**\n * @const\n * @type {string}\n */\nGMLBase.GMLNS = 'http://www.opengis.net/gml';\n\n\n/**\n * A regular expression that matches if a string only contains whitespace\n * characters. It will e.g. match `''`, `' '`, `'\\n'` etc. The non-breaking\n * space (0xa0) is explicitly included as IE doesn't include it in its\n * definition of `\\s`.\n *\n * Information from `goog.string.isEmptyOrWhitespace`: https://github.com/google/closure-library/blob/e877b1e/closure/goog/string/string.js#L156-L160\n *\n * @const\n * @type {RegExp}\n * @private\n */\nGMLBase.ONLY_WHITESPACE_RE_ = /^[\\s\\xa0]*$/;\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Array.<ol.Feature> | undefined} Features.\n */\nGMLBase.prototype.readFeaturesInternal = function(node, objectStack) {\n  const localName = node.localName;\n  let features = null;\n  if (localName == 'FeatureCollection') {\n    if (node.namespaceURI === 'http://www.opengis.net/wfs') {\n      features = _ol_xml_.pushParseAndPop([],\n        this.FEATURE_COLLECTION_PARSERS, node,\n        objectStack, this);\n    } else {\n      features = _ol_xml_.pushParseAndPop(null,\n        this.FEATURE_COLLECTION_PARSERS, node,\n        objectStack, this);\n    }\n  } else if (localName == 'featureMembers' || localName == 'featureMember') {\n    const context = objectStack[0];\n    let featureType = context['featureType'];\n    let featureNS = context['featureNS'];\n    let i, ii;\n    const prefix = 'p';\n    const defaultPrefix = 'p0';\n    if (!featureType && node.childNodes) {\n      featureType = [], featureNS = {};\n      for (i = 0, ii = node.childNodes.length; i < ii; ++i) {\n        const child = node.childNodes[i];\n        if (child.nodeType === 1) {\n          const ft = child.nodeName.split(':').pop();\n          if (featureType.indexOf(ft) === -1) {\n            let key = '';\n            let count = 0;\n            const uri = child.namespaceURI;\n            for (const candidate in featureNS) {\n              if (featureNS[candidate] === uri) {\n                key = candidate;\n                break;\n              }\n              ++count;\n            }\n            if (!key) {\n              key = prefix + count;\n              featureNS[key] = uri;\n            }\n            featureType.push(key + ':' + ft);\n          }\n        }\n      }\n      if (localName != 'featureMember') {\n        // recheck featureType for each featureMember\n        context['featureType'] = featureType;\n        context['featureNS'] = featureNS;\n      }\n    }\n    if (typeof featureNS === 'string') {\n      const ns = featureNS;\n      featureNS = {};\n      featureNS[defaultPrefix] = ns;\n    }\n    const parsersNS = {};\n    const featureTypes = Array.isArray(featureType) ? featureType : [featureType];\n    for (const p in featureNS) {\n      const parsers = {};\n      for (i = 0, ii = featureTypes.length; i < ii; ++i) {\n        const featurePrefix = featureTypes[i].indexOf(':') === -1 ?\n          defaultPrefix : featureTypes[i].split(':')[0];\n        if (featurePrefix === p) {\n          parsers[featureTypes[i].split(':').pop()] =\n              (localName == 'featureMembers') ?\n                _ol_xml_.makeArrayPusher(this.readFeatureElement, this) :\n                _ol_xml_.makeReplacer(this.readFeatureElement, this);\n        }\n      }\n      parsersNS[featureNS[p]] = parsers;\n    }\n    if (localName == 'featureMember') {\n      features = _ol_xml_.pushParseAndPop(undefined, parsersNS, node, objectStack);\n    } else {\n      features = _ol_xml_.pushParseAndPop([], parsersNS, node, objectStack);\n    }\n  }\n  if (features === null) {\n    features = [];\n  }\n  return features;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.Geometry|undefined} Geometry.\n */\nGMLBase.prototype.readGeometryElement = function(node, objectStack) {\n  const context = /** @type {Object} */ (objectStack[0]);\n  context['srsName'] = node.firstElementChild.getAttribute('srsName');\n  context['srsDimension'] = node.firstElementChild.getAttribute('srsDimension');\n  /** @type {ol.geom.Geometry} */\n  const geometry = _ol_xml_.pushParseAndPop(null,\n    this.GEOMETRY_PARSERS_, node, objectStack, this);\n  if (geometry) {\n    return (\n      /** @type {ol.geom.Geometry} */ transformWithOptions(geometry, false, context)\n    );\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.Feature} Feature.\n */\nGMLBase.prototype.readFeatureElement = function(node, objectStack) {\n  let n;\n  const fid = node.getAttribute('fid') ||\n      _ol_xml_.getAttributeNS(node, GMLBase.GMLNS, 'id');\n  const values = {};\n  let geometryName;\n  for (n = node.firstElementChild; n; n = n.nextElementSibling) {\n    const localName = n.localName;\n    // Assume attribute elements have one child node and that the child\n    // is a text or CDATA node (to be treated as text).\n    // Otherwise assume it is a geometry node.\n    if (n.childNodes.length === 0 ||\n        (n.childNodes.length === 1 &&\n        (n.firstChild.nodeType === 3 || n.firstChild.nodeType === 4))) {\n      let value = _ol_xml_.getAllTextContent(n, false);\n      if (GMLBase.ONLY_WHITESPACE_RE_.test(value)) {\n        value = undefined;\n      }\n      values[localName] = value;\n    } else {\n      // boundedBy is an extent and must not be considered as a geometry\n      if (localName !== 'boundedBy') {\n        geometryName = localName;\n      }\n      values[localName] = this.readGeometryElement(n, objectStack);\n    }\n  }\n  const feature = new Feature(values);\n  if (geometryName) {\n    feature.setGeometryName(geometryName);\n  }\n  if (fid) {\n    feature.setId(fid);\n  }\n  return feature;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.Point|undefined} Point.\n */\nGMLBase.prototype.readPoint = function(node, objectStack) {\n  const flatCoordinates =\n      this.readFlatCoordinatesFromNode_(node, objectStack);\n  if (flatCoordinates) {\n    const point = new Point(null);\n    point.setFlatCoordinates(GeometryLayout.XYZ, flatCoordinates);\n    return point;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.MultiPoint|undefined} MultiPoint.\n */\nGMLBase.prototype.readMultiPoint = function(node, objectStack) {\n  /** @type {Array.<Array.<number>>} */\n  const coordinates = _ol_xml_.pushParseAndPop([],\n    this.MULTIPOINT_PARSERS_, node, objectStack, this);\n  if (coordinates) {\n    return new MultiPoint(coordinates);\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.MultiLineString|undefined} MultiLineString.\n */\nGMLBase.prototype.readMultiLineString = function(node, objectStack) {\n  /** @type {Array.<ol.geom.LineString>} */\n  const lineStrings = _ol_xml_.pushParseAndPop([],\n    this.MULTILINESTRING_PARSERS_, node, objectStack, this);\n  if (lineStrings) {\n    const multiLineString = new MultiLineString(null);\n    multiLineString.setLineStrings(lineStrings);\n    return multiLineString;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.MultiPolygon|undefined} MultiPolygon.\n */\nGMLBase.prototype.readMultiPolygon = function(node, objectStack) {\n  /** @type {Array.<ol.geom.Polygon>} */\n  const polygons = _ol_xml_.pushParseAndPop([],\n    this.MULTIPOLYGON_PARSERS_, node, objectStack, this);\n  if (polygons) {\n    const multiPolygon = new MultiPolygon(null);\n    multiPolygon.setPolygons(polygons);\n    return multiPolygon;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGMLBase.prototype.pointMemberParser_ = function(node, objectStack) {\n  _ol_xml_.parseNode(this.POINTMEMBER_PARSERS_,\n    node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGMLBase.prototype.lineStringMemberParser_ = function(node, objectStack) {\n  _ol_xml_.parseNode(this.LINESTRINGMEMBER_PARSERS_,\n    node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGMLBase.prototype.polygonMemberParser_ = function(node, objectStack) {\n  _ol_xml_.parseNode(this.POLYGONMEMBER_PARSERS_, node,\n    objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.LineString|undefined} LineString.\n */\nGMLBase.prototype.readLineString = function(node, objectStack) {\n  const flatCoordinates =\n      this.readFlatCoordinatesFromNode_(node, objectStack);\n  if (flatCoordinates) {\n    const lineString = new LineString(null);\n    lineString.setFlatCoordinates(GeometryLayout.XYZ, flatCoordinates);\n    return lineString;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} LinearRing flat coordinates.\n */\nGMLBase.prototype.readFlatLinearRing_ = function(node, objectStack) {\n  const ring = _ol_xml_.pushParseAndPop(null,\n    this.GEOMETRY_FLAT_COORDINATES_PARSERS_, node,\n    objectStack, this);\n  if (ring) {\n    return ring;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.LinearRing|undefined} LinearRing.\n */\nGMLBase.prototype.readLinearRing = function(node, objectStack) {\n  const flatCoordinates =\n      this.readFlatCoordinatesFromNode_(node, objectStack);\n  if (flatCoordinates) {\n    const ring = new LinearRing(null);\n    ring.setFlatCoordinates(GeometryLayout.XYZ, flatCoordinates);\n    return ring;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.Polygon|undefined} Polygon.\n */\nGMLBase.prototype.readPolygon = function(node, objectStack) {\n  /** @type {Array.<Array.<number>>} */\n  const flatLinearRings = _ol_xml_.pushParseAndPop([null],\n    this.FLAT_LINEAR_RINGS_PARSERS_, node, objectStack, this);\n  if (flatLinearRings && flatLinearRings[0]) {\n    const polygon = new Polygon(null);\n    const flatCoordinates = flatLinearRings[0];\n    const ends = [flatCoordinates.length];\n    let i, ii;\n    for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n      extend(flatCoordinates, flatLinearRings[i]);\n      ends.push(flatCoordinates.length);\n    }\n    polygon.setFlatCoordinates(\n      GeometryLayout.XYZ, flatCoordinates, ends);\n    return polygon;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>} Flat coordinates.\n */\nGMLBase.prototype.readFlatCoordinatesFromNode_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop(null,\n    this.GEOMETRY_FLAT_COORDINATES_PARSERS_, node,\n    objectStack, this);\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGMLBase.prototype.MULTIPOINT_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'pointMember': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.pointMemberParser_),\n    'pointMembers': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.pointMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGMLBase.prototype.MULTILINESTRING_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.lineStringMemberParser_),\n    'lineStringMembers': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.lineStringMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGMLBase.prototype.MULTIPOLYGON_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'polygonMember': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.polygonMemberParser_),\n    'polygonMembers': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.polygonMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGMLBase.prototype.POINTMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Point': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.readFlatCoordinatesFromNode_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGMLBase.prototype.LINESTRINGMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineString': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.readLineString)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGMLBase.prototype.POLYGONMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Polygon': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.readPolygon)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @protected\n */\nGMLBase.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LinearRing': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readFlatLinearRing_)\n  }\n};\n\n\n/**\n * @inheritDoc\n */\nGMLBase.prototype.readGeometryFromNode = function(node, opt_options) {\n  const geometry = this.readGeometryElement(node,\n    [this.getReadOptions(node, opt_options ? opt_options : {})]);\n  return geometry ? geometry : null;\n};\n\n\n/**\n * Read all features from a GML FeatureCollection.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @return {Array.<ol.Feature>} Features.\n * @api\n */\nGMLBase.prototype.readFeatures;\n\n\n/**\n * @inheritDoc\n */\nGMLBase.prototype.readFeaturesFromNode = function(node, opt_options) {\n  const options = {\n    featureType: this.featureType,\n    featureNS: this.featureNS\n  };\n  if (opt_options) {\n    assign(options, this.getReadOptions(node, opt_options));\n  }\n  const features = this.readFeaturesInternal(node, [options]);\n  return features || [];\n};\n\n\n/**\n * @inheritDoc\n */\nGMLBase.prototype.readProjectionFromNode = function(node) {\n  return getProjection(this.srsName ? this.srsName :\n    node.firstElementChild.getAttribute('srsName'));\n};\nexport default GMLBase;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/GMLBase.js\n// module id = 39\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22","/**\n * @module ngeo.map.LayerHelper\n*/\nimport ngeoBase from 'ngeo/index.js';\nimport googAsserts from 'goog/asserts.js';\nimport * as olArray from 'ol/array.js';\nimport olFormatWMTSCapabilities from 'ol/format/WMTSCapabilities.js';\nimport olLayerGroup from 'ol/layer/Group.js';\nimport olLayerImage from 'ol/layer/Image.js';\nimport olLayerTile from 'ol/layer/Tile.js';\nimport * as olObj from 'ol/obj.js';\nimport olSourceImageWMS from 'ol/source/ImageWMS.js';\nimport olSourceTileWMS from 'ol/source/TileWMS.js';\nimport olSourceWMTS from 'ol/source/WMTS.js';\nimport * as olUri from 'ol/uri.js';\n\n/**\n * Provides help functions that helps you to create and manage layers.\n * @param {angular.$q} $q Angular promises/deferred service.\n * @param {angular.$http} $http Angular http service.\n * @constructor\n * @struct\n * @ngdoc service\n * @ngname ngeoLayerHelper\n * @ngInject\n */\nconst exports = function($q, $http) {\n\n  /**\n   * @type {angular.$q}\n   * @private\n   */\n  this.$q_ = $q;\n\n  /**\n   * @type {angular.$http}\n   * @private\n   */\n  this.$http_ = $http;\n};\n\n\n/**\n * @const\n */\nexports.GROUP_KEY = 'groupName';\n\n\n/**\n * @const\n */\nexports.REFRESH_PARAM = 'random';\n\n\n/**\n * Create and return a basic WMS layer with only a source URL and a comma\n * separated layers names (see {@link ol.source.ImageWMS}).\n *\n * @param {string} sourceURL The source URL.\n * @param {string} sourceLayersName A comma separated names string.\n * @param {string} sourceFormat Image format, for example 'image/png'.\n * @param {string=} opt_serverType Type of the server (\"mapserver\",\n *     \"geoserver\", \"qgisserver\", …).\n * @param {string=} opt_time time parameter for layer queryable by time/periode\n * @param {Object.<string, string>=} opt_params WMS parameters.\n * @param {string=} opt_crossOrigin crossOrigin.\n * @return {ol.layer.Image} WMS Layer.\n * @export\n */\nexports.prototype.createBasicWMSLayer = function(sourceURL,\n  sourceLayersName, sourceFormat, opt_serverType, opt_time, opt_params, opt_crossOrigin) {\n\n  const params = {\n    'FORMAT': sourceFormat,\n    'LAYERS': sourceLayersName\n  };\n  let olServerType;\n  if (opt_time) {\n    params['TIME'] = opt_time;\n  }\n  if (opt_serverType) {\n    params['SERVERTYPE'] = opt_serverType;\n    // OpenLayers expects 'qgis' insteads of 'qgisserver'\n    olServerType = opt_serverType.replace('qgisserver', 'qgis');\n  }\n  const source = new olSourceImageWMS({\n    url: sourceURL,\n    params: params,\n    serverType: olServerType,\n    crossOrigin: opt_crossOrigin\n  });\n  if (opt_params) {\n    source.updateParams(opt_params);\n  }\n\n  return new olLayerImage({source});\n};\n\n\n/**\n * Create and return a basic WMS layer using an OGC data source.\n *\n * @param {ngeo.datasource.OGC} dataSource OGC data source.\n * @param {string=} opt_crossOrigin crossOrigin.\n * @return {ol.layer.Image} WMS Layer.\n * @export\n */\nexports.prototype.createBasicWMSLayerFromDataSource = function(\n  dataSource, opt_crossOrigin\n) {\n  const url = dataSource.wmsUrl;\n  googAsserts.assert(url);\n\n  const layerNames = dataSource.getOGCLayerNames().join(',');\n  const serverType = dataSource.ogcServerType;\n  const imageType = dataSource.ogcImageType;\n\n  // (1) Layer creation\n  const layer = this.createBasicWMSLayer(\n    url,\n    layerNames,\n    imageType,\n    serverType,\n    undefined,\n    undefined,\n    opt_crossOrigin\n  );\n\n  // (2) Manage visibility\n  layer.setVisible(dataSource.visible);\n\n  // (3) Reference to the data source\n  layer.set('querySourceIds', [dataSource.id]);\n\n  return layer;\n};\n\n\n/**\n * Create and return a promise that provides a WMTS layer with source on\n * success, no layer else.\n * The WMTS layer source will be configured by the capabilities that are\n * loaded from the given capabilitiesUrl.\n * The style object described in the capabilities for this layer will be added\n * as key 'capabilitiesStyles' as param of the new layer.\n * @param {string} capabilitiesURL The getCapabilities url.\n * @param {string} layerName The name of the layer.\n * @param {Object.<string, string>=} opt_dimensions WMTS dimensions.\n * @return {angular.$q.Promise.<ol.layer.Tile>} A Promise with a layer (with source) on success,\n *     no layer else.\n * @export\n */\nexports.prototype.createWMTSLayerFromCapabilitites = function(capabilitiesURL, layerName, opt_dimensions) {\n  const parser = new olFormatWMTSCapabilities();\n  const layer = new olLayerTile({\n    preload: Infinity\n  });\n  const $q = this.$q_;\n\n  return this.$http_.get(capabilitiesURL, {cache: true}).then((response) => {\n    let result;\n    if (response.data) {\n      result = parser.read(response.data);\n    }\n    if (result) {\n      const options = olSourceWMTS.optionsFromCapabilities(result, {\n        crossOrigin: 'anonymous',\n        layer: layerName\n      });\n      googAsserts.assert(options);\n      const source = new olSourceWMTS(/** @type {olx.source.WMTSOptions} */ (options));\n      if (opt_dimensions && !olObj.isEmpty(opt_dimensions)) {\n        source.updateDimensions(opt_dimensions);\n      }\n      layer.setSource(source);\n\n      // Add styles from capabilities as param of the layer\n      const layers = result['Contents']['Layer'];\n      const l = olArray.find(layers, (elt, index, array) => elt['Identifier'] == layerName);\n      layer.set('capabilitiesStyles', l['Style']);\n\n      return $q.resolve(layer);\n    }\n    return $q.reject(`Failed to get WMTS capabilities from ${capabilitiesURL}`);\n  });\n};\n\n\n/**\n * Create and return a WMTS layer using a formatted capabilities response\n * and a capability layer.\n *\n * @param {!Object} capabilities The complete capabilities object of the service\n * @param {!Object} layerCap The layer capability object\n * @param {Object.<string, string>=} opt_dimensions WMTS dimensions.\n * @return {!ol.layer.Tile} WMTS layer\n * @export\n */\nexports.prototype.createWMTSLayerFromCapabilititesObj = function(\n  capabilities, layerCap, opt_dimensions\n) {\n\n  const options = olSourceWMTS.optionsFromCapabilities(capabilities, {\n    crossOrigin: 'anonymous',\n    layer: layerCap['Identifier']\n  });\n\n  googAsserts.assert(options);\n  const source = new olSourceWMTS(\n    /** @type {olx.source.WMTSOptions} */ (options));\n\n  if (opt_dimensions && !olObj.isEmpty(opt_dimensions)) {\n    source.updateDimensions(opt_dimensions);\n  }\n\n  return new olLayerTile({\n    'capabilitiesStyles': layerCap['Style'],\n    preload: Infinity,\n    source: source\n  });\n};\n\n\n/**\n * Create and return an ol.layer.Group. You can pass a collection of layers to\n * directly add them in the returned group.\n * @param {ol.Collection.<ol.layer.Base>=} opt_layers The layer to add to the\n * returned Group.\n * @return {ol.layer.Group} Layer group.\n * @export\n */\nexports.prototype.createBasicGroup = function(opt_layers) {\n  const group = new olLayerGroup();\n  if (opt_layers) {\n    group.setLayers(opt_layers);\n  }\n  return group;\n};\n\n\n/**\n * Retrieve (or create if it doesn't exist) and return a group of layer from\n * the base array of layers of a map. The given name is used as unique\n * identifier. If the group is created, it will be automatically added to\n * the map.\n * @param {ol.Map} map A map.\n * @param {string} groupName The name of the group.\n * @return {ol.layer.Group} The group corresponding to the given name.\n * @export\n */\nexports.prototype.getGroupFromMap = function(map, groupName) {\n  const groups = map.getLayerGroup().getLayers();\n  let group;\n  groups.getArray().some((existingGroup) => {\n    if (existingGroup.get(exports.GROUP_KEY) === groupName) {\n      group = /** @type {ol.layer.Group} */ (existingGroup);\n      return true;\n    } else {\n      return false;\n    }\n  });\n  if (!group) {\n    group = this.createBasicGroup();\n    group.set(exports.GROUP_KEY, groupName);\n    map.addLayer(group);\n  }\n  return group;\n};\n\n\n/**\n * Get an array of all layers in a group. The group can contain multiple levels\n * of others groups.\n * @param {ol.layer.Base} layer The base layer, mostly a group of layers.\n * @return {Array.<ol.layer.Layer>} Layers.\n * @export\n */\nexports.prototype.getFlatLayers = function(layer) {\n  return this.getFlatLayers_(layer, []);\n};\n\n\n/**\n * Get an array of all layers in a group. The group can contain multiple levels\n * of others groups.\n * @param {ol.layer.Base} layer The base layer, mostly a group of layers.\n * @param {Array.<ol.layer.Base>} array An array to add layers.\n * @return {Array.<ol.layer.Layer>} Layers.\n * @private\n */\nexports.prototype.getFlatLayers_ = function(layer, array) {\n  if (layer instanceof olLayerGroup) {\n    const sublayers = layer.getLayers();\n    sublayers.forEach(function(l) {\n      this.getFlatLayers_(l, array);\n    }, this);\n  } else {\n    if (array.indexOf(layer) < 0) {\n      array.push(layer);\n    }\n  }\n  return array;\n};\n\n\n/**\n * Get a layer that has a `layerName` property equal to a given layer name from\n * an array of layers. If one of the layers in the array is a group, then the\n * layers contained in that group are searched as well.\n * @param {string} layerName The name of the layer we're looking for.\n * @param {Array.<ol.layer.Base>} layers Layers.\n * @return {?ol.layer.Base} Layer.\n * @export\n */\nexports.prototype.getLayerByName = function(layerName, layers) {\n  let found = null;\n  layers.some(function(layer) {\n    if (layer instanceof olLayerGroup) {\n      const sublayers = layer.getLayers().getArray();\n      found = this.getLayerByName(layerName, sublayers);\n    } else if (layer.get('layerNodeName') === layerName) {\n      found = layer;\n    }\n    return !!found;\n  }, this);\n\n  return found;\n};\n\n\n/**\n * Get the WMTS legend URL for the given layer.\n * @param {ol.layer.Tile} layer Tile layer as returned by the\n * ngeo layerHelper service.\n * @return {string|undefined} The legend URL or undefined.\n * @export\n */\nexports.prototype.getWMTSLegendURL = function(layer) {\n  // FIXME case of multiple styles ?  case of multiple legendUrl ?\n  let url;\n  const styles = layer.get('capabilitiesStyles');\n  if (styles !== undefined) {\n    const legendURL = styles[0]['legendURL'];\n    if (legendURL !== undefined) {\n      url = legendURL[0]['href'];\n    }\n  }\n  return url;\n};\n\n\n/**\n * Get the WMS legend URL for the given node.\n * @param {string|undefined} url The base url of the wms service.\n * @param {string} layerName The name of a wms layer.\n * @param {number=} opt_scale A scale.\n * @param {string=} opt_legendRule rule parameters to add to the returned URL.\n * @return {string|undefined} The legend URL or undefined.\n * @export\n */\nexports.prototype.getWMSLegendURL = function(url,\n  layerName, opt_scale, opt_legendRule) {\n  if (!url) {\n    return undefined;\n  }\n  const queryString = {\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true,\n    'SERVICE': 'WMS',\n    'VERSION': '1.1.1',\n    'REQUEST': 'GetLegendGraphic',\n    'LAYER': layerName\n  };\n  if (opt_scale !== undefined) {\n    queryString['SCALE'] = opt_scale;\n  }\n  if (opt_legendRule !== undefined) {\n    queryString['RULE'] = opt_legendRule;\n  }\n  return olUri.appendParams(url, queryString);\n};\n\n\n/**\n * Returns if this layer is visible at the current resolution.\n * @param {ol.layer.Base} layer Layer.\n * @param {ol.Map} map Map.\n * @return {boolean} Is the layer currently visible?\n */\nexports.prototype.isLayerVisible = function(layer, map) {\n  if (!layer.getVisible()) {\n    return false;\n  }\n\n  const currentResolution = map.getView().getResolution();\n  return currentResolution > layer.getMinResolution() &&\n      currentResolution < layer.getMaxResolution();\n};\n\n\n/**\n * Force a WMS layer to refresh using a random value.\n * @param {ol.layer.Image|ol.layer.Tile} layer Layer to refresh.\n */\nexports.prototype.refreshWMSLayer = function(layer) {\n  const source_ = layer.getSource();\n  googAsserts.assert(\n    source_ instanceof olSourceImageWMS ||\n    source_ instanceof olSourceTileWMS\n  );\n  const source = /** @type {ol.source.ImageWMS|ol.source.TileWMS} */ (source_);\n  const params = source.getParams();\n  params[exports.REFRESH_PARAM] = Math.random();\n  source.updateParams(params);\n};\n\n\n/**\n * Update the LAYERS parameter of the source of the given WMS layer.\n * @param {ol.layer.Image} layer The WMS layer.\n * @param {string} names The names that will be used to set\n * the LAYERS parameter.\n * @param {string=} opt_time The start\n * and optionally the end datetime (for time range selection) selected by user\n * in a ISO-8601 string datetime or time interval format\n * @export\n */\nexports.prototype.updateWMSLayerState = function(layer, names, opt_time) {\n  // Don't send layer without parameters, hide layer instead;\n  if (names.length <= 0) {\n    layer.setVisible(false);\n  } else {\n    layer.setVisible(true);\n    const source = /** @type {ol.source.ImageWMS} */ (layer.getSource());\n    if (opt_time) {\n      source.updateParams({'LAYERS': names, 'TIME': opt_time});\n    } else {\n      source.updateParams({'LAYERS': names});\n    }\n  }\n};\n\n\n/**\n * @param {ol.layer.Image} layer The WMS layer.\n * @return {Array.<number>|undefined} List of query source ids, a.k.a.\n *     the data source ids this layer is composed of.\n * @export\n */\nexports.prototype.getQuerySourceIds = function(layer) {\n  return /** @type {Array.<number>|undefined} */ (\n    layer.get('querySourceIds'));\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('ngeoLayerHelper', []);\nexports.module.service('ngeoLayerHelper', exports);\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/map/LayerHelper.js","/**\n * @module gmfapp.objecteditinghub\n*/\nconst exports = {};\n\nimport './objecteditinghub.css';\nimport './common_dependencies.js';\nimport googAsserts from 'goog/asserts.js';\n\nimport gmfBase from 'gmf/index.js';\nimport gmfEditingXSDAttributes from 'gmf/editing/XSDAttributes.js';\nimport gmfObjecteditingManager from 'gmf/objectediting/Manager.js';\nimport gmfThemeThemes from 'gmf/theme/Themes.js';\nimport olFormatWFS from 'ol/format/WFS.js';\nimport ngeoFormatXSDAttribute from 'ngeo/format/XSDAttribute.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('gmfapp', [\n  gmfBase.module.name,\n  gmfEditingXSDAttributes.module.name,\n  gmfObjecteditingManager.module.name,\n  gmfThemeThemes.module.name,\n]);\n\n\nexports.module.value('gmfTreeUrl',\n  'https://geomapfish-demo.camptocamp.net/2.2/wsgi/themes?version=2&background=background');\n\n\nexports.module.value('gmfLayersUrl',\n  'https://geomapfish-demo.camptocamp.net/2.2/wsgi/layers/');\n\nexports.constant('defaultTheme', 'Demo');\nexports.constant('angularLocaleScript', '../build/angular-locale_{{locale}}.js');\n\n\n/**\n * @param {angular.$http} $http Angular $http service.\n * @param {angular.$q} $q Angular $q service.\n * @param {!angular.Scope} $scope Angular scope.\n * @param {gmf.theme.Themes} gmfThemes The gmf themes service.\n * @param {gmf.editing.XSDAttributes} gmfXSDAttributes The gmf XSDAttributes service.\n * @constructor\n * @ngInject\n */\nexports.MainController = function($http, $q, $scope, gmfThemes, gmfXSDAttributes) {\n\n  /**\n   * @type {angular.$http}\n   * @private\n   */\n  this.http_ = $http;\n\n  /**\n   * @type {angular.$q}\n   * @private\n   */\n  this.q_ = $q;\n\n  /**\n   * @type {gmf.theme.Themes}\n   * @private\n   */\n  this.gmfThemes_ = gmfThemes;\n\n  /**\n   * @type {gmf.editing.XSDAttributes}\n   * @private\n   */\n  this.gmfXSDAttributes_ = gmfXSDAttributes;\n\n  /**\n   * @type {Array.<string>} List of example and application urls that contain\n   *     ObjectEditing tools.\n   * @export\n   */\n  this.urls = [\n    {\n      'name': 'oeedit app. (hosted)',\n      'url': 'apps/oeedit/'\n    },\n    {\n      'name': 'oeedit app. (dev)',\n      'url': '../apps/oeedit/'\n    },\n    {\n      'name': 'example',\n      'url': 'objectediting.html'\n    }\n  ];\n\n  /**\n   * @type {string} OE viewer application base url when developping.\n   * @private\n   */\n  this.viewerUrlDev_ = '../apps/oeview/';\n\n  /**\n   * @type {string} OE viewer application base url when hosted.\n   * @private\n   */\n  this.viewerUrlHosted_ = 'apps/oeview/';\n\n  /**\n   * @type {Object.<string, string>}\n   * @export\n   */\n  this.selectedUrl = this.urls[0];\n\n  /**\n   * @type {gmfThemes.GmfOgcServers} ogcServers OGC servers.\n   * @private\n   */\n  this.gmfServers_;\n\n  /**\n   * @type {gmfThemes.GmfOgcServer} ogcServer OGC server to use.\n   * @private\n   */\n  this.gmfServer_;\n\n  /**\n   * @type {Array.<gmfThemes.GmfLayerWMS>}\n   * @export\n   */\n  this.gmfLayerNodes = [];\n\n  /**\n   * @type {?gmfThemes.GmfLayerWMS}\n   * @export\n   */\n  this.selectedGmfLayerNode = null;\n\n  /**\n   * @type {Object.<number, Array.<ol.Feature>>}\n   * @export\n   */\n  this.featuresCache_ = {};\n\n  /**\n   * @type {Array.<ol.Feature>}\n   * @export\n   */\n  this.features = null;\n\n  /**\n   * @type {?ol.Feature}\n   * @export\n   */\n  this.selectedFeature = null;\n\n  /**\n   * @type {Object.<number, string>}\n   * @private\n   */\n  this.geomTypeCache_ = {};\n\n  /**\n   * @type {string|undefined}\n   * @export\n   */\n  this.selectedGeomType = undefined;\n\n  $scope.$watch(\n    () => this.selectedGmfLayerNode,\n    (newVal, oldVal) => {\n      this.selectedFeature = null;\n\n      if (newVal) {\n        this.getFeatures_(newVal).then(\n          this.handleGetFeatures_.bind(this, newVal)\n        );\n        this.getGeometryType_(newVal).then(\n          this.handleGetGeometryType_.bind(this, newVal)\n        );\n      }\n    }\n  );\n\n  /**\n   * @type {string}\n   * @export\n   */\n  this.themeName = 'ObjectEditing';\n\n  this.gmfThemes_.loadThemes();\n\n  this.gmfThemes_.getOgcServersObject().then((ogcServers) => {\n\n    // (1) Set OGC servers\n    this.gmfServers_ = ogcServers;\n\n    this.gmfThemes_.getThemesObject().then((themes) => {\n      if (!themes) {\n        return;\n      }\n\n      let i, ii;\n\n      // (2) Find OE theme\n      let theme;\n      for (i = 0, ii = themes.length; i < ii; i++) {\n        if (themes[i].name === this.themeName) {\n          theme = themes[i];\n          break;\n        }\n      }\n\n      if (!theme) {\n        return;\n      }\n\n      // (3) Get first group node\n      const groupNode = theme.children[0];\n\n      // (4) Set OGC server, which must support WFS for this example to work\n      googAsserts.assert(groupNode.ogcServer);\n      const gmfServer = this.gmfServers_[groupNode.ogcServer];\n      if (gmfServer && gmfServer.wfsSupport === true && gmfServer.urlWfs) {\n        this.gmfServer_ = gmfServer;\n      } else {\n        return;\n      }\n\n      const gmfLayerNodes = [];\n      for (i = 0, ii = groupNode.children.length; i < ii; i++) {\n        if (groupNode.children[i].metadata.identifierAttributeField) {\n          gmfLayerNodes.push(groupNode.children[i]);\n        }\n      }\n\n      // (5) Set layer nodes\n      this.gmfLayerNodes = gmfLayerNodes;\n\n      // (6) Select 'polygon' for the purpose of simplifying the demo\n      this.selectedGmfLayerNode = this.gmfLayerNodes[1];\n\n    });\n  });\n\n};\n\n\n/**\n * @export\n */\nexports.MainController.prototype.runEditor = function() {\n\n  const geomType = this.selectedGeomType;\n  const feature = this.selectedFeature;\n  const layer = this.selectedGmfLayerNode.id;\n  const property = this.selectedGmfLayerNode.metadata.identifierAttributeField;\n  googAsserts.assert(property !== undefined);\n  const id = feature.get(property);\n\n  const params = {};\n  params[gmfObjecteditingManager.Param.GEOM_TYPE] = geomType;\n  params[gmfObjecteditingManager.Param.ID] = id;\n  params[gmfObjecteditingManager.Param.LAYER] = layer;\n  params[gmfObjecteditingManager.Param.THEME] = this.themeName;\n  params[gmfObjecteditingManager.Param.PROPERTY] = property;\n\n  const url = exports.MainController.appendParams(this.selectedUrl['url'], params);\n  window.open(url);\n};\n\n\n/**\n * @export\n */\nexports.MainController.prototype.runViewerDev = function() {\n  this.runViewer_(this.viewerUrlDev_);\n};\n\n\n/**\n * @export\n */\nexports.MainController.prototype.runViewerHosted = function() {\n  this.runViewer_(this.viewerUrlHosted_);\n};\n\n\n/**\n * @param {string} baseUrl Base url of the viewer.\n * @private\n */\nexports.MainController.prototype.runViewer_ = function(baseUrl) {\n\n  const node = this.selectedGmfLayerNode;\n  const nodeId = node.id;\n  const nodeName = node.name;\n  const nodeIdAttrFieldName = node.metadata.identifierAttributeField;\n  googAsserts.assert(nodeIdAttrFieldName !== undefined);\n  const ids = [];\n\n  const features = this.featuresCache_[nodeId];\n  for (let i = 0, ii = features.length; i < ii; i++) {\n    ids.push(\n      features[i].get(nodeIdAttrFieldName)\n    );\n  }\n\n  const params = {};\n  params['wfs_layer'] = nodeName;\n  params[`wfs_${nodeIdAttrFieldName}`] = ids.join(',');\n\n  const url = exports.MainController.appendParams(baseUrl, params);\n  window.open(url);\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @return {angular.$q.Promise} The promise attached to the deferred object.\n * @private\n */\nexports.MainController.prototype.getFeatures_ = function(gmfLayerNode) {\n\n  this.getFeaturesDeferred_ = this.q_.defer();\n\n  const features = this.getFeaturesFromCache_(gmfLayerNode);\n\n  if (features) {\n    this.getFeaturesDeferred_.resolve();\n  } else {\n    this.issueGetFeatures_(gmfLayerNode);\n  }\n\n  return this.getFeaturesDeferred_.promise;\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @private\n */\nexports.MainController.prototype.issueGetFeatures_ = function(gmfLayerNode) {\n\n  const id = gmfLayerNode.id;\n\n  const url = exports.MainController.appendParams(\n    this.gmfServer_.urlWfs,\n    {\n      'SERVICE': 'WFS',\n      'REQUEST': 'GetFeature',\n      'VERSION': '1.1.0',\n      'TYPENAME': gmfLayerNode.layers\n    }\n  );\n\n  this.http_.get(url).then((response) => {\n    const features = new olFormatWFS().readFeatures(response.data);\n    this.featuresCache_[id] = features;\n    this.getFeaturesDeferred_.resolve();\n  });\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @private\n */\nexports.MainController.prototype.handleGetFeatures_ = function(gmfLayerNode) {\n  const features = /** @type Array.<ol.Feature> */ (\n    this.getFeaturesFromCache_(gmfLayerNode));\n  this.features = features;\n  this.selectedFeature = this.features[0];\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @return {?Array.<ol.Feature>} List of features\n * @private\n */\nexports.MainController.prototype.getFeaturesFromCache_ = function(gmfLayerNode) {\n  const id = gmfLayerNode.id;\n  const features = this.featuresCache_[id] || null;\n  return features;\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @return {angular.$q.Promise} The promise attached to the deferred object.\n * @private\n */\nexports.MainController.prototype.getGeometryType_ = function(gmfLayerNode) {\n\n  this.getGeometryTypeDeferred_ = this.q_.defer();\n\n  const geomType = this.getGeometryTypeFromCache_(gmfLayerNode);\n\n  if (geomType) {\n    this.getGeometryTypeDeferred_.resolve();\n  } else {\n    this.issueGetAttributesRequest_(gmfLayerNode);\n  }\n\n  return this.getGeometryTypeDeferred_.promise;\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @private\n */\nexports.MainController.prototype.issueGetAttributesRequest_ = function(\n  gmfLayerNode\n) {\n\n  this.gmfXSDAttributes_.getAttributes(gmfLayerNode.id).then(\n    function(gmfLayerNode, attributes) {\n      // Get geom type from attributes and set\n      const geomAttr = ngeoFormatXSDAttribute.getGeometryAttribute(attributes);\n      if (geomAttr && geomAttr.geomType) {\n        this.geomTypeCache_[gmfLayerNode.id] = geomAttr.geomType;\n        this.getGeometryTypeDeferred_.resolve();\n      }\n    }.bind(this, gmfLayerNode)\n  );\n\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @private\n */\nexports.MainController.prototype.handleGetGeometryType_ = function(gmfLayerNode) {\n  const geomType = this.getGeometryTypeFromCache_(gmfLayerNode);\n  this.selectedGeomType = geomType;\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @return {string|undefined} The type of geometry.\n * @private\n */\nexports.MainController.prototype.getGeometryTypeFromCache_ = function(\n  gmfLayerNode\n) {\n  const id = gmfLayerNode.id;\n  const geomType = this.geomTypeCache_[id];\n  return geomType;\n};\n\n\n/**\n * Appends query parameters to a URI.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.\n * @return {string} The new URI.\n */\nexports.MainController.appendParams = function(uri, params) {\n  const keyParams = [];\n  // Skip any null or undefined parameter values\n  Object.keys(params).forEach((k) => {\n    if (params[k] !== null && params[k] !== undefined) {\n      keyParams.push(`${k}=${encodeURIComponent(params[k])}`);\n    }\n  });\n  const qs = keyParams.join('&');\n  // remove any trailing ? or &\n  uri = uri.replace(/[?&]$/, '');\n  // append ? or & depending on whether uri has existing parameters\n  uri = uri.indexOf('?') === -1 ? `${uri}?` : `${uri}&`;\n  return uri + qs;\n};\n\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/examples/objecteditinghub.js","/**\n * @module ol/format/XML\n */\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Generic format for reading non-feature XML data\n *\n * @constructor\n * @abstract\n * @struct\n */\nconst XML = function() {\n};\n\n\n/**\n * @param {Document|Node|string} source Source.\n * @return {Object} The parsed result.\n */\nXML.prototype.read = function(source) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readFromDocument(/** @type {Document} */ (source));\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readFromNode(/** @type {Node} */ (source));\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readFromDocument(doc);\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * @abstract\n * @param {Document} doc Document.\n * @return {Object} Object\n */\nXML.prototype.readFromDocument = function(doc) {};\n\n\n/**\n * @abstract\n * @param {Node} node Node.\n * @return {Object} Object\n */\nXML.prototype.readFromNode = function(node) {};\nexport default XML;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/XML.js\n// module id = 44\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module ol/format/GML2\n */\nimport {inherits} from '../index.js';\nimport {createOrUpdate} from '../extent.js';\nimport {transformWithOptions} from '../format/Feature.js';\nimport GMLBase from '../format/GMLBase.js';\nimport XSD from '../format/XSD.js';\nimport Geometry from '../geom/Geometry.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection, transformExtent} from '../proj.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format,\n * version 2.1.2.\n *\n * @constructor\n * @param {olx.format.GMLOptions=} opt_options Optional configuration object.\n * @extends {ol.format.GMLBase}\n * @api\n */\nconst GML2 = function(opt_options) {\n  const options = /** @type {olx.format.GMLOptions} */\n      (opt_options ? opt_options : {});\n\n  GMLBase.call(this, options);\n\n  this.FEATURE_COLLECTION_PARSERS[GMLBase.GMLNS][\n    'featureMember'] =\n      _ol_xml_.makeArrayPusher(GMLBase.prototype.readFeaturesInternal);\n\n  /**\n   * @inheritDoc\n   */\n  this.schemaLocation = options.schemaLocation ?\n    options.schemaLocation : GML2.schemaLocation_;\n\n};\n\ninherits(GML2, GMLBase);\n\n\n/**\n * @const\n * @type {string}\n * @private\n */\nGML2.schemaLocation_ = GMLBase.GMLNS +\n    ' http://schemas.opengis.net/gml/2.1.2/feature.xsd';\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} Flat coordinates.\n */\nGML2.prototype.readFlatCoordinates_ = function(node, objectStack) {\n  const s = _ol_xml_.getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n  const context = /** @type {ol.XmlNodeStackItem} */ (objectStack[0]);\n  const containerSrs = context['srsName'];\n  let axisOrientation = 'enu';\n  if (containerSrs) {\n    const proj = getProjection(containerSrs);\n    if (proj) {\n      axisOrientation = proj.getAxisOrientation();\n    }\n  }\n  const coordsGroups = s.trim().split(/\\s+/);\n  let x, y, z;\n  const flatCoordinates = [];\n  for (let i = 0, ii = coordsGroups.length; i < ii; i++) {\n    const coords = coordsGroups[i].split(/,+/);\n    x = parseFloat(coords[0]);\n    y = parseFloat(coords[1]);\n    z = (coords.length === 3) ? parseFloat(coords[2]) : 0;\n    if (axisOrientation.substr(0, 2) === 'en') {\n      flatCoordinates.push(x, y, z);\n    } else {\n      flatCoordinates.push(y, x, z);\n    }\n  }\n  return flatCoordinates;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {ol.Extent|undefined} Envelope.\n */\nGML2.prototype.readBox_ = function(node, objectStack) {\n  /** @type {Array.<number>} */\n  const flatCoordinates = _ol_xml_.pushParseAndPop([null],\n    this.BOX_PARSERS_, node, objectStack, this);\n  return createOrUpdate(flatCoordinates[1][0],\n    flatCoordinates[1][1], flatCoordinates[1][3],\n    flatCoordinates[1][4]);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML2.prototype.innerBoundaryIsParser_ = function(node, objectStack) {\n  /** @type {Array.<number>|undefined} */\n  const flatLinearRing = _ol_xml_.pushParseAndPop(undefined,\n    this.RING_PARSERS, node, objectStack, this);\n  if (flatLinearRing) {\n    const flatLinearRings = /** @type {Array.<Array.<number>>} */\n        (objectStack[objectStack.length - 1]);\n    flatLinearRings.push(flatLinearRing);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML2.prototype.outerBoundaryIsParser_ = function(node, objectStack) {\n  /** @type {Array.<number>|undefined} */\n  const flatLinearRing = _ol_xml_.pushParseAndPop(undefined,\n    this.RING_PARSERS, node, objectStack, this);\n  if (flatLinearRing) {\n    const flatLinearRings = /** @type {Array.<Array.<number>>} */\n        (objectStack[objectStack.length - 1]);\n    flatLinearRings[0] = flatLinearRing;\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'coordinates': _ol_xml_.makeReplacer(\n      GML2.prototype.readFlatCoordinates_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML2.prototype.FLAT_LINEAR_RINGS_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'innerBoundaryIs': GML2.prototype.innerBoundaryIsParser_,\n    'outerBoundaryIs': GML2.prototype.outerBoundaryIsParser_\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML2.prototype.BOX_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'coordinates': _ol_xml_.makeArrayPusher(\n      GML2.prototype.readFlatCoordinates_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML2.prototype.GEOMETRY_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Point': _ol_xml_.makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readMultiPoint),\n    'LineString': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readLineString),\n    'MultiLineString': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readMultiLineString),\n    'LinearRing': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readLinearRing),\n    'Polygon': _ol_xml_.makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readMultiPolygon),\n    'Box': _ol_xml_.makeReplacer(GML2.prototype.readBox_)\n  }\n};\n\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node|undefined} Node.\n * @private\n */\nGML2.prototype.GEOMETRY_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const context = objectStack[objectStack.length - 1];\n  const multiSurface = context['multiSurface'];\n  const surface = context['surface'];\n  const multiCurve = context['multiCurve'];\n  let nodeName;\n  if (!Array.isArray(value)) {\n    nodeName = /** @type {ol.geom.Geometry} */ (value).getType();\n    if (nodeName === 'MultiPolygon' && multiSurface === true) {\n      nodeName = 'MultiSurface';\n    } else if (nodeName === 'Polygon' && surface === true) {\n      nodeName = 'Surface';\n    } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n      nodeName = 'MultiCurve';\n    }\n  } else {\n    nodeName = 'Envelope';\n  }\n  return _ol_xml_.createElementNS('http://www.opengis.net/gml',\n    nodeName);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Feature} feature Feature.\n * @param {Array.<*>} objectStack Node stack.\n */\nGML2.prototype.writeFeatureElement = function(node, feature, objectStack) {\n  const fid = feature.getId();\n  if (fid) {\n    node.setAttribute('fid', fid);\n  }\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const featureNS = context['featureNS'];\n  const geometryName = feature.getGeometryName();\n  if (!context.serializers) {\n    context.serializers = {};\n    context.serializers[featureNS] = {};\n  }\n  const properties = feature.getProperties();\n  const keys = [];\n  const values = [];\n  for (const key in properties) {\n    const value = properties[key];\n    if (value !== null) {\n      keys.push(key);\n      values.push(value);\n      if (key == geometryName || value instanceof Geometry) {\n        if (!(key in context.serializers[featureNS])) {\n          context.serializers[featureNS][key] = _ol_xml_.makeChildAppender(\n            this.writeGeometryElement, this);\n        }\n      } else {\n        if (!(key in context.serializers[featureNS])) {\n          context.serializers[featureNS][key] = _ol_xml_.makeChildAppender(\n            XSD.writeStringTextNode);\n        }\n      }\n    }\n  }\n  const item = assign({}, context);\n  item.node = node;\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    (item), context.serializers,\n    _ol_xml_.makeSimpleNodeFactory(undefined, featureNS),\n    values,\n    objectStack, keys);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Geometry|ol.Extent} geometry Geometry.\n * @param {Array.<*>} objectStack Node stack.\n */\nGML2.prototype.writeGeometryElement = function(node, geometry, objectStack) {\n  const context = /** @type {olx.format.WriteOptions} */ (objectStack[objectStack.length - 1]);\n  const item = assign({}, context);\n  item.node = node;\n  let value;\n  if (Array.isArray(geometry)) {\n    if (context.dataProjection) {\n      value = transformExtent(\n        geometry, context.featureProjection, context.dataProjection);\n    } else {\n      value = geometry;\n    }\n  } else {\n    value = transformWithOptions(/** @type {ol.geom.Geometry} */ (geometry), true, context);\n  }\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    (item), GML2.GEOMETRY_SERIALIZERS_,\n    this.GEOMETRY_NODE_FACTORY_, [value],\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString} geometry LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeCurveOrLineString_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (node.nodeName !== 'LineStringSegment' && srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (node.nodeName === 'LineString' ||\n      node.nodeName === 'LineStringSegment') {\n    const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n    node.appendChild(coordinates);\n    this.writeCoordinates_(coordinates, geometry, objectStack);\n  } else if (node.nodeName === 'Curve') {\n    const segments = _ol_xml_.createElementNS(node.namespaceURI, 'segments');\n    node.appendChild(segments);\n    this.writeCurveSegments_(segments,\n      geometry, objectStack);\n  }\n};\n\n\n/**\n * @param {string} namespaceURI XML namespace.\n * @returns {Node} coordinates node.\n * @private\n */\nGML2.prototype.createCoordinatesNode_ = function(namespaceURI) {\n  const coordinates = _ol_xml_.createElementNS(namespaceURI, 'coordinates');\n  coordinates.setAttribute('decimal', '.');\n  coordinates.setAttribute('cs', ',');\n  coordinates.setAttribute('ts', ' ');\n\n  return coordinates;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString|ol.geom.LinearRing} value Geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeCoordinates_ = function(node, value, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  // only 2d for simple features profile\n  const points = value.getCoordinates();\n  const len = points.length;\n  const parts = new Array(len);\n  let point;\n  for (let i = 0; i < len; ++i) {\n    point = points[i];\n    parts[i] = this.getCoords_(point, srsName, hasZ);\n  }\n  XSD.writeStringTextNode(node, parts.join(' '));\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString} line LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeCurveSegments_ = function(node, line, objectStack) {\n  const child = _ol_xml_.createElementNS(node.namespaceURI,\n    'LineStringSegment');\n  node.appendChild(child);\n  this.writeCurveOrLineString_(child, line, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Polygon} geometry Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeSurfaceOrPolygon_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  if (node.nodeName !== 'PolygonPatch' && srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n    const rings = geometry.getLinearRings();\n    _ol_xml_.pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName},\n      GML2.RING_SERIALIZERS_,\n      this.RING_NODE_FACTORY_,\n      rings, objectStack, undefined, this);\n  } else if (node.nodeName === 'Surface') {\n    const patches = _ol_xml_.createElementNS(node.namespaceURI, 'patches');\n    node.appendChild(patches);\n    this.writeSurfacePatches_(\n      patches, geometry, objectStack);\n  }\n};\n\n\n/**\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node} Node.\n * @private\n */\nGML2.prototype.RING_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const context = objectStack[objectStack.length - 1];\n  const parentNode = context.node;\n  const exteriorWritten = context['exteriorWritten'];\n  if (exteriorWritten === undefined) {\n    context['exteriorWritten'] = true;\n  }\n  return _ol_xml_.createElementNS(parentNode.namespaceURI,\n    exteriorWritten !== undefined ? 'innerBoundaryIs' : 'outerBoundaryIs');\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Polygon} polygon Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeSurfacePatches_ = function(node, polygon, objectStack) {\n  const child = _ol_xml_.createElementNS(node.namespaceURI, 'PolygonPatch');\n  node.appendChild(child);\n  this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LinearRing} ring LinearRing geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeRing_ = function(node, ring, objectStack) {\n  const linearRing = _ol_xml_.createElementNS(node.namespaceURI, 'LinearRing');\n  node.appendChild(linearRing);\n  this.writeLinearRing_(linearRing, ring, objectStack);\n};\n\n\n/**\n * @param {Array.<number>} point Point geometry.\n * @param {string=} opt_srsName Optional srsName\n * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.\n * @return {string} The coords string.\n * @private\n */\nGML2.prototype.getCoords_ = function(point, opt_srsName, opt_hasZ) {\n  let axisOrientation = 'enu';\n  if (opt_srsName) {\n    axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n  }\n  let coords = ((axisOrientation.substr(0, 2) === 'en') ?\n    point[0] + ',' + point[1] :\n    point[1] + ',' + point[0]);\n  if (opt_hasZ) {\n    // For newly created points, Z can be undefined.\n    const z = point[2] || 0;\n    coords += ',' + z;\n  }\n\n  return coords;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.MultiLineString} geometry MultiLineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeMultiCurveOrLineString_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  const curve = context['curve'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const lines = geometry.getLineStrings();\n  _ol_xml_.pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n    GML2.LINESTRINGORCURVEMEMBER_SERIALIZERS_,\n    this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Point} geometry Point geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writePoint_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n  node.appendChild(coordinates);\n  const point = geometry.getCoordinates();\n  const coord = this.getCoords_(point, srsName, hasZ);\n  XSD.writeStringTextNode(coordinates, coord);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.MultiPoint} geometry MultiPoint geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeMultiPoint_ = function(node, geometry,\n  objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const points = geometry.getPoints();\n  _ol_xml_.pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName},\n    GML2.POINTMEMBER_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('pointMember'), points,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Point} point Point geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writePointMember_ = function(node, point, objectStack) {\n  const child = _ol_xml_.createElementNS(node.namespaceURI, 'Point');\n  node.appendChild(child);\n  this.writePoint_(child, point, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString} line LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeLineStringOrCurveMember_ = function(node, line, objectStack) {\n  const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n  if (child) {\n    node.appendChild(child);\n    this.writeCurveOrLineString_(child, line, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LinearRing} geometry LinearRing geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeLinearRing_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n  node.appendChild(coordinates);\n  this.writeCoordinates_(coordinates, geometry, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.MultiPolygon} geometry MultiPolygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeMultiSurfaceOrPolygon_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  const surface = context['surface'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const polygons = geometry.getPolygons();\n  _ol_xml_.pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n    GML2.SURFACEORPOLYGONMEMBER_SERIALIZERS_,\n    this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Polygon} polygon Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeSurfaceOrPolygonMember_ = function(node, polygon, objectStack) {\n  const child = this.GEOMETRY_NODE_FACTORY_(\n    polygon, objectStack);\n  if (child) {\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Extent} extent Extent.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeEnvelope = function(node, extent, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const keys = ['lowerCorner', 'upperCorner'];\n  const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    ({node: node}), GML2.ENVELOPE_SERIALIZERS_,\n    _ol_xml_.OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack, keys, this);\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML2.GEOMETRY_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'Curve': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeCurveOrLineString_),\n    'MultiCurve': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeMultiCurveOrLineString_),\n    'Point': _ol_xml_.makeChildAppender(GML2.prototype.writePoint_),\n    'MultiPoint': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeMultiPoint_),\n    'LineString': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeCurveOrLineString_),\n    'MultiLineString': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeMultiCurveOrLineString_),\n    'LinearRing': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeLinearRing_),\n    'Polygon': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygon_),\n    'MultiPolygon': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeMultiSurfaceOrPolygon_),\n    'Surface': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygon_),\n    'MultiSurface': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeMultiSurfaceOrPolygon_),\n    'Envelope': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeEnvelope)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML2.RING_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'outerBoundaryIs': _ol_xml_.makeChildAppender(GML2.prototype.writeRing_),\n    'innerBoundaryIs': _ol_xml_.makeChildAppender(GML2.prototype.writeRing_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML2.POINTMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'pointMember': _ol_xml_.makeChildAppender(\n      GML2.prototype.writePointMember_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML2.LINESTRINGORCURVEMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeLineStringOrCurveMember_),\n    'curveMember': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeLineStringOrCurveMember_)\n  }\n};\n\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node|undefined} Node.\n * @private\n */\nGML2.prototype.MULTIGEOMETRY_MEMBER_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const parentNode = objectStack[objectStack.length - 1].node;\n  return _ol_xml_.createElementNS('http://www.opengis.net/gml',\n    GML2.MULTIGEOMETRY_TO_MEMBER_NODENAME_[parentNode.nodeName]);\n};\n\n/**\n * @const\n * @type {Object.<string, string>}\n * @private\n */\nGML2.MULTIGEOMETRY_TO_MEMBER_NODENAME_ = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML2.SURFACEORPOLYGONMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygonMember_),\n    'polygonMember': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygonMember_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML2.ENVELOPE_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': _ol_xml_.makeChildAppender(XSD.writeStringTextNode),\n    'upperCorner': _ol_xml_.makeChildAppender(XSD.writeStringTextNode)\n  }\n};\nexport default GML2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/GML2.js\n// module id = 45\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22","/**\n * @module ngeo.utils\n*/\nconst exports = {};\nimport olEventsCondition from 'ol/events/condition.js';\nimport olGeomLineString from 'ol/geom/LineString.js';\nimport olGeomMultiPoint from 'ol/geom/MultiPoint.js';\nimport olGeomMultiLineString from 'ol/geom/MultiLineString.js';\nimport olGeomMultiPolygon from 'ol/geom/MultiPolygon.js';\nimport olGeomPoint from 'ol/geom/Point.js';\nimport olGeomPolygon from 'ol/geom/Polygon.js';\n\n\n/**\n * Utility method that converts a simple geometry to its multi equivalent. If\n * the geometry itself is already multi, it is returned as-is.\n * @param {ol.geom.Geometry} geometry A geometry\n * @return {ol.geom.Geometry} A multi geometry\n */\nexports.toMulti = function(geometry) {\n  let multiGeom;\n  if (geometry instanceof olGeomPoint) {\n    multiGeom = new olGeomMultiPoint([]);\n    multiGeom.appendPoint(geometry);\n  } else if (geometry instanceof olGeomLineString) {\n    multiGeom = new olGeomMultiLineString([]);\n    multiGeom.appendLineString(geometry);\n  } else if (geometry instanceof olGeomPolygon) {\n    multiGeom = new olGeomMultiPolygon([]);\n    multiGeom.appendPolygon(geometry);\n  } else {\n    multiGeom = geometry;\n  }\n  return multiGeom;\n};\n\n/**\n * Checks if on Safari.\n * @return {boolean} True if on Safari.\n */\nexports.isSafari = function() {\n  return navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1;\n};\n\n/**\n * Takes a hex value and prepends a zero if it's a single digit.\n * @param {string} hex Hex value to prepend if single digit.\n * @return {string} hex value prepended with zero if it was single digit,\n *     otherwise the same value that was passed in.\n */\nexports.colorZeroPadding = function(hex) {\n  return hex.length == 1 ? `0${hex}` : hex;\n};\n\n/**\n * Converts a color from RGB to hex representation.\n * @param {!Array.<number>} rgb rgb representation of the color.\n * @return {string} hex representation of the color.\n */\nexports.rgbArrayToHex = function(rgb) {\n  const r = rgb[0];\n  const g = rgb[1];\n  const b = rgb[2];\n  if (r != (r & 255) || g != (g & 255) || b != (b & 255)) {\n    throw Error(`\"(${r},${g},${b})\" is not a valid RGB color`);\n  }\n  const hexR = exports.colorZeroPadding(r.toString(16));\n  const hexG = exports.colorZeroPadding(g.toString(16));\n  const hexB = exports.colorZeroPadding(b.toString(16));\n  return `#${hexR}${hexG}${hexB}`;\n};\n\n/**\n * Decode the encoded query string into a query data dictionary.\n * @param {string|undefined} queryString The queryString.\n * @return {!Object.<string, string>} The result.\n */\nexports.decodeQueryString = function(queryString) {\n  const queryData = {};\n  if (queryString) {\n    const pairs = queryString.substring(1).split('&');\n    for (const pair of pairs) {\n      const indexOfEquals = pair.indexOf('=');\n      if (indexOfEquals >= 0) {\n        const name = pair.substring(0, indexOfEquals);\n        const value = pair.substring(indexOfEquals + 1);\n        queryData[decodeURIComponent(name)] = decodeURIComponent(value);\n      } else {\n        queryData[pair] = '';\n      }\n    }\n  }\n  return queryData;\n};\n\n/**\n * Encode the query data dictionary into an encoded query string.\n * @param {!Object.<string, string>} queryData The queryData,\n * @return {string} The result.\n */\nexports.encodeQueryString = function(queryData) {\n  const queryItem = [];\n  for (const key in queryData) {\n    const value = queryData[key];\n    queryItem.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);\n  }\n  return queryItem.join('&');\n};\n\n\n/**\n * Delete condition passed to the modify interaction\n * @param {ol.MapBrowserEvent} event Browser event.\n * @return {boolean} The result.\n */\nexports.deleteCondition = function(event) {\n  return olEventsCondition.noModifierKeys(event) && olEventsCondition.singleClick(event);\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils.js","/**\n * @module ol/format/XLink\n */\nconst XLink = {};\n\n\n/**\n * @const\n * @type {string}\n */\nconst NAMESPACE_URI = 'http://www.w3.org/1999/xlink';\n\n\n/**\n * @param {Node} node Node.\n * @return {boolean|undefined} Boolean.\n */\nXLink.readHref = function(node) {\n  return node.getAttributeNS(NAMESPACE_URI, 'href');\n};\nexport default XLink;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/XLink.js\n// module id = 53\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module ol/Image\n */\nimport {inherits} from './index.js';\nimport _ol_ImageBase_ from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport _ol_events_ from './events.js';\nimport EventType from './events/EventType.js';\nimport {getHeight} from './extent.js';\n\n/**\n * @constructor\n * @extends {ol.ImageBase}\n * @param {ol.Extent} extent Extent.\n * @param {number|undefined} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {string} src Image source URI.\n * @param {?string} crossOrigin Cross origin.\n * @param {ol.ImageLoadFunctionType} imageLoadFunction Image load function.\n */\nconst _ol_Image_ = function(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {\n\n  _ol_ImageBase_.call(this, extent, resolution, pixelRatio, ImageState.IDLE);\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.src_ = src;\n\n  /**\n   * @private\n   * @type {HTMLCanvasElement|Image|HTMLVideoElement}\n   */\n  this.image_ = new Image();\n  if (crossOrigin !== null) {\n    this.image_.crossOrigin = crossOrigin;\n  }\n\n  /**\n   * @private\n   * @type {Array.<ol.EventsKey>}\n   */\n  this.imageListenerKeys_ = null;\n\n  /**\n   * @protected\n   * @type {ol.ImageState}\n   */\n  this.state = ImageState.IDLE;\n\n  /**\n   * @private\n   * @type {ol.ImageLoadFunctionType}\n   */\n  this.imageLoadFunction_ = imageLoadFunction;\n\n};\n\ninherits(_ol_Image_, _ol_ImageBase_);\n\n\n/**\n * @inheritDoc\n * @api\n */\n_ol_Image_.prototype.getImage = function() {\n  return this.image_;\n};\n\n\n/**\n * Tracks loading or read errors.\n *\n * @private\n */\n_ol_Image_.prototype.handleImageError_ = function() {\n  this.state = ImageState.ERROR;\n  this.unlistenImage_();\n  this.changed();\n};\n\n\n/**\n * Tracks successful image load.\n *\n * @private\n */\n_ol_Image_.prototype.handleImageLoad_ = function() {\n  if (this.resolution === undefined) {\n    this.resolution = getHeight(this.extent) / this.image_.height;\n  }\n  this.state = ImageState.LOADED;\n  this.unlistenImage_();\n  this.changed();\n};\n\n\n/**\n * Load the image or retry if loading previously failed.\n * Loading is taken care of by the tile queue, and calling this method is\n * only needed for preloading or for reloading in case of an error.\n * @override\n * @api\n */\n_ol_Image_.prototype.load = function() {\n  if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n    this.state = ImageState.LOADING;\n    this.changed();\n    this.imageListenerKeys_ = [\n      _ol_events_.listenOnce(this.image_, EventType.ERROR,\n        this.handleImageError_, this),\n      _ol_events_.listenOnce(this.image_, EventType.LOAD,\n        this.handleImageLoad_, this)\n    ];\n    this.imageLoadFunction_(this, this.src_);\n  }\n};\n\n\n/**\n * @param {HTMLCanvasElement|Image|HTMLVideoElement} image Image.\n */\n_ol_Image_.prototype.setImage = function(image) {\n  this.image_ = image;\n};\n\n\n/**\n * Discards event handlers which listen for load completion or errors.\n *\n * @private\n */\n_ol_Image_.prototype.unlistenImage_ = function() {\n  this.imageListenerKeys_.forEach(_ol_events_.unlistenByKey);\n  this.imageListenerKeys_ = null;\n};\nexport default _ol_Image_;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/Image.js\n// module id = null\n// module chunks = ","/**\n * @module ol/source/ImageWMS\n */\n\nimport {DEFAULT_WMS_VERSION} from './common.js';\nimport {inherits} from '../index.js';\nimport _ol_Image_ from '../Image.js';\nimport {assert} from '../asserts.js';\nimport _ol_events_ from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {containsExtent, getCenter, getForViewAndSize, getHeight, getWidth} from '../extent.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection, transform} from '../proj.js';\nimport _ol_reproj_ from '../reproj.js';\nimport ImageSource from '../source/Image.js';\nimport WMSServerType from '../source/WMSServerType.js';\nimport _ol_string_ from '../string.js';\nimport {appendParams} from '../uri.js';\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @constructor\n * @fires ol.source.Image.Event\n * @extends {ol.source.Image}\n * @param {olx.source.ImageWMSOptions=} opt_options Options.\n * @api\n */\nconst ImageWMS = function(opt_options) {\n\n  const options = opt_options || {};\n\n  ImageSource.call(this, {\n    attributions: options.attributions,\n    projection: options.projection,\n    resolutions: options.resolutions\n  });\n\n  /**\n   * @private\n   * @type {?string}\n   */\n  this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n  this.url_ = options.url;\n\n  /**\n   * @private\n   * @type {ol.ImageLoadFunctionType}\n   */\n  this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?\n    options.imageLoadFunction : ImageSource.defaultImageLoadFunction;\n\n  /**\n   * @private\n   * @type {!Object}\n   */\n  this.params_ = options.params || {};\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.v13_ = true;\n  this.updateV13_();\n\n  /**\n   * @private\n   * @type {ol.source.WMSServerType|undefined}\n   */\n  this.serverType_ = /** @type {ol.source.WMSServerType|undefined} */ (options.serverType);\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n  /**\n   * @private\n   * @type {ol.Image}\n   */\n  this.image_ = null;\n\n  /**\n   * @private\n   * @type {ol.Size}\n   */\n  this.imageSize_ = [0, 0];\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.renderedRevision_ = 0;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n\n};\n\ninherits(ImageWMS, ImageSource);\n\n\n/**\n * @const\n * @type {ol.Size}\n * @private\n */\nImageWMS.GETFEATUREINFO_IMAGE_SIZE_ = [101, 101];\n\n\n/**\n * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n * constructed.\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {number} resolution Resolution.\n * @param {ol.ProjectionLike} projection Projection.\n * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n *     in the `LAYERS` parameter will be used. `VERSION` should not be\n *     specified here.\n * @return {string|undefined} GetFeatureInfo URL.\n * @api\n */\nImageWMS.prototype.getGetFeatureInfoUrl = function(coordinate, resolution, projection, params) {\n  if (this.url_ === undefined) {\n    return undefined;\n  }\n  const projectionObj = getProjection(projection);\n  const sourceProjectionObj = this.getProjection();\n\n  if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n    resolution = _ol_reproj_.calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, resolution);\n    coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n  }\n\n  const extent = getForViewAndSize(coordinate, resolution, 0,\n    ImageWMS.GETFEATUREINFO_IMAGE_SIZE_);\n\n  const baseParams = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_WMS_VERSION,\n    'REQUEST': 'GetFeatureInfo',\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true,\n    'QUERY_LAYERS': this.params_['LAYERS']\n  };\n  assign(baseParams, this.params_, params);\n\n  const x = Math.floor((coordinate[0] - extent[0]) / resolution);\n  const y = Math.floor((extent[3] - coordinate[1]) / resolution);\n  baseParams[this.v13_ ? 'I' : 'X'] = x;\n  baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n  return this.getRequestUrl_(\n    extent, ImageWMS.GETFEATUREINFO_IMAGE_SIZE_,\n    1, sourceProjectionObj || projectionObj, baseParams);\n};\n\n\n/**\n * Get the user-provided params, i.e. those passed to the constructor through\n * the \"params\" option, and possibly updated using the updateParams method.\n * @return {Object} Params.\n * @api\n */\nImageWMS.prototype.getParams = function() {\n  return this.params_;\n};\n\n\n/**\n * @inheritDoc\n */\nImageWMS.prototype.getImageInternal = function(extent, resolution, pixelRatio, projection) {\n\n  if (this.url_ === undefined) {\n    return null;\n  }\n\n  resolution = this.findNearestResolution(resolution);\n\n  if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n    pixelRatio = 1;\n  }\n\n  const imageResolution = resolution / pixelRatio;\n\n  const center = getCenter(extent);\n  const viewWidth = Math.ceil(getWidth(extent) / imageResolution);\n  const viewHeight = Math.ceil(getHeight(extent) / imageResolution);\n  const viewExtent = getForViewAndSize(center, imageResolution, 0,\n    [viewWidth, viewHeight]);\n  const requestWidth = Math.ceil(this.ratio_ * getWidth(extent) / imageResolution);\n  const requestHeight = Math.ceil(this.ratio_ * getHeight(extent) / imageResolution);\n  const requestExtent = getForViewAndSize(center, imageResolution, 0,\n    [requestWidth, requestHeight]);\n\n  const image = this.image_;\n  if (image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), viewExtent)) {\n    return image;\n  }\n\n  const params = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_WMS_VERSION,\n    'REQUEST': 'GetMap',\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true\n  };\n  assign(params, this.params_);\n\n  this.imageSize_[0] = Math.round(getWidth(requestExtent) / imageResolution);\n  this.imageSize_[1] = Math.round(getHeight(requestExtent) / imageResolution);\n\n  const url = this.getRequestUrl_(requestExtent, this.imageSize_, pixelRatio,\n    projection, params);\n\n  this.image_ = new _ol_Image_(requestExtent, resolution, pixelRatio,\n    url, this.crossOrigin_, this.imageLoadFunction_);\n\n  this.renderedRevision_ = this.getRevision();\n\n  _ol_events_.listen(this.image_, EventType.CHANGE,\n    this.handleImageChange, this);\n\n  return this.image_;\n\n};\n\n\n/**\n * Return the image load function of the source.\n * @return {ol.ImageLoadFunctionType} The image load function.\n * @api\n */\nImageWMS.prototype.getImageLoadFunction = function() {\n  return this.imageLoadFunction_;\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {ol.Size} size Size.\n * @param {number} pixelRatio Pixel ratio.\n * @param {ol.proj.Projection} projection Projection.\n * @param {Object} params Params.\n * @return {string} Request URL.\n * @private\n */\nImageWMS.prototype.getRequestUrl_ = function(extent, size, pixelRatio, projection, params) {\n\n  assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\n\n  params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n  if (!('STYLES' in this.params_)) {\n    params['STYLES'] = '';\n  }\n\n  if (pixelRatio != 1) {\n    switch (this.serverType_) {\n      case WMSServerType.GEOSERVER:\n        const dpi = (90 * pixelRatio + 0.5) | 0;\n        if ('FORMAT_OPTIONS' in params) {\n          params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n        } else {\n          params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n        }\n        break;\n      case WMSServerType.MAPSERVER:\n        params['MAP_RESOLUTION'] = 90 * pixelRatio;\n        break;\n      case WMSServerType.CARMENTA_SERVER:\n      case WMSServerType.QGIS:\n        params['DPI'] = 90 * pixelRatio;\n        break;\n      default:\n        assert(false, 8); // Unknown `serverType` configured\n        break;\n    }\n  }\n\n  params['WIDTH'] = size[0];\n  params['HEIGHT'] = size[1];\n\n  const axisOrientation = projection.getAxisOrientation();\n  let bbox;\n  if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n    bbox = [extent[1], extent[0], extent[3], extent[2]];\n  } else {\n    bbox = extent;\n  }\n  params['BBOX'] = bbox.join(',');\n\n  return appendParams(/** @type {string} */ (this.url_), params);\n};\n\n\n/**\n * Return the URL used for this WMS source.\n * @return {string|undefined} URL.\n * @api\n */\nImageWMS.prototype.getUrl = function() {\n  return this.url_;\n};\n\n\n/**\n * Set the image load function of the source.\n * @param {ol.ImageLoadFunctionType} imageLoadFunction Image load function.\n * @api\n */\nImageWMS.prototype.setImageLoadFunction = function(\n  imageLoadFunction) {\n  this.image_ = null;\n  this.imageLoadFunction_ = imageLoadFunction;\n  this.changed();\n};\n\n\n/**\n * Set the URL to use for requests.\n * @param {string|undefined} url URL.\n * @api\n */\nImageWMS.prototype.setUrl = function(url) {\n  if (url != this.url_) {\n    this.url_ = url;\n    this.image_ = null;\n    this.changed();\n  }\n};\n\n\n/**\n * Update the user-provided params.\n * @param {Object} params Params.\n * @api\n */\nImageWMS.prototype.updateParams = function(params) {\n  assign(this.params_, params);\n  this.updateV13_();\n  this.image_ = null;\n  this.changed();\n};\n\n\n/**\n * @private\n */\nImageWMS.prototype.updateV13_ = function() {\n  const version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n  this.v13_ = _ol_string_.compareVersions(version, '1.3') >= 0;\n};\nexport default ImageWMS;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/ImageWMS.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/WFS\n */\nimport {inherits} from '../index.js';\nimport {assert} from '../asserts.js';\nimport GML2 from '../format/GML2.js';\nimport GML3 from '../format/GML3.js';\nimport GMLBase from '../format/GMLBase.js';\nimport _ol_format_filter_ from '../format/filter.js';\nimport XMLFeature from '../format/XMLFeature.js';\nimport XSD from '../format/XSD.js';\nimport Geometry from '../geom/Geometry.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the WFS format.\n * By default, supports WFS version 1.1.0. You can pass a GML format\n * as option if you want to read a WFS that contains GML2 (WFS 1.0.0).\n * Also see {@link ol.format.GMLBase} which is used by this format.\n *\n * @constructor\n * @param {olx.format.WFSOptions=} opt_options\n *     Optional configuration object.\n * @extends {ol.format.XMLFeature}\n * @api\n */\nconst WFS = function(opt_options) {\n  const options = opt_options ? opt_options : {};\n\n  /**\n   * @private\n   * @type {Array.<string>|string|undefined}\n   */\n  this.featureType_ = options.featureType;\n\n  /**\n   * @private\n   * @type {Object.<string, string>|string|undefined}\n   */\n  this.featureNS_ = options.featureNS;\n\n  /**\n   * @private\n   * @type {ol.format.GMLBase}\n   */\n  this.gmlFormat_ = options.gmlFormat ?\n    options.gmlFormat : new GML3();\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.schemaLocation_ = options.schemaLocation ?\n    options.schemaLocation :\n    WFS.SCHEMA_LOCATIONS[WFS.DEFAULT_VERSION];\n\n  XMLFeature.call(this);\n};\n\ninherits(WFS, XMLFeature);\n\n\n/**\n * @const\n * @type {string}\n */\nWFS.FEATURE_PREFIX = 'feature';\n\n\n/**\n * @const\n * @type {string}\n */\nWFS.XMLNS = 'http://www.w3.org/2000/xmlns/';\n\n\n/**\n * @const\n * @type {string}\n */\nWFS.OGCNS = 'http://www.opengis.net/ogc';\n\n\n/**\n * @const\n * @type {string}\n */\nWFS.WFSNS = 'http://www.opengis.net/wfs';\n\n\n/**\n * @const\n * @type {string}\n */\nWFS.FESNS = 'http://www.opengis.net/fes';\n\n\n/**\n * @const\n * @type {Object.<string, string>}\n */\nWFS.SCHEMA_LOCATIONS = {\n  '1.1.0': 'http://www.opengis.net/wfs ' +\n      'http://schemas.opengis.net/wfs/1.1.0/wfs.xsd',\n  '1.0.0': 'http://www.opengis.net/wfs ' +\n      'http://schemas.opengis.net/wfs/1.0.0/wfs.xsd'\n};\n\n\n/**\n * @const\n * @type {string}\n */\nWFS.DEFAULT_VERSION = '1.1.0';\n\n\n/**\n * @return {Array.<string>|string|undefined} featureType\n */\nWFS.prototype.getFeatureType = function() {\n  return this.featureType_;\n};\n\n\n/**\n * @param {Array.<string>|string|undefined} featureType Feature type(s) to parse.\n */\nWFS.prototype.setFeatureType = function(featureType) {\n  this.featureType_ = featureType;\n};\n\n\n/**\n * Read all features from a WFS FeatureCollection.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {Array.<ol.Feature>} Features.\n * @api\n */\nWFS.prototype.readFeatures;\n\n\n/**\n * @inheritDoc\n */\nWFS.prototype.readFeaturesFromNode = function(node, opt_options) {\n  const context = /** @type {ol.XmlNodeStackItem} */ ({\n    'featureType': this.featureType_,\n    'featureNS': this.featureNS_\n  });\n  assign(context, this.getReadOptions(node, opt_options ? opt_options : {}));\n  const objectStack = [context];\n  this.gmlFormat_.FEATURE_COLLECTION_PARSERS[GMLBase.GMLNS][\n    'featureMember'] =\n      _ol_xml_.makeArrayPusher(GMLBase.prototype.readFeaturesInternal);\n  let features = _ol_xml_.pushParseAndPop([],\n    this.gmlFormat_.FEATURE_COLLECTION_PARSERS, node,\n    objectStack, this.gmlFormat_);\n  if (!features) {\n    features = [];\n  }\n  return features;\n};\n\n\n/**\n * Read transaction response of the source.\n *\n * @param {Document|Node|Object|string} source Source.\n * @return {ol.WFSTransactionResponse|undefined} Transaction response.\n * @api\n */\nWFS.prototype.readTransactionResponse = function(source) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readTransactionResponseFromDocument(\n      /** @type {Document} */ (source));\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readTransactionResponseFromNode(/** @type {Node} */ (source));\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readTransactionResponseFromDocument(doc);\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * Read feature collection metadata of the source.\n *\n * @param {Document|Node|Object|string} source Source.\n * @return {ol.WFSFeatureCollectionMetadata|undefined}\n *     FeatureCollection metadata.\n * @api\n */\nWFS.prototype.readFeatureCollectionMetadata = function(source) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readFeatureCollectionMetadataFromDocument(\n      /** @type {Document} */ (source));\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readFeatureCollectionMetadataFromNode(\n      /** @type {Node} */ (source));\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readFeatureCollectionMetadataFromDocument(doc);\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Document} doc Document.\n * @return {ol.WFSFeatureCollectionMetadata|undefined}\n *     FeatureCollection metadata.\n */\nWFS.prototype.readFeatureCollectionMetadataFromDocument = function(doc) {\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readFeatureCollectionMetadataFromNode(n);\n    }\n  }\n  return undefined;\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWFS.FEATURE_COLLECTION_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'boundedBy': _ol_xml_.makeObjectPropertySetter(\n      GMLBase.prototype.readGeometryElement, 'bounds')\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {ol.WFSFeatureCollectionMetadata|undefined}\n *     FeatureCollection metadata.\n */\nWFS.prototype.readFeatureCollectionMetadataFromNode = function(node) {\n  const result = {};\n  const value = XSD.readNonNegativeIntegerString(\n    node.getAttribute('numberOfFeatures'));\n  result['numberOfFeatures'] = value;\n  return _ol_xml_.pushParseAndPop(\n    /** @type {ol.WFSFeatureCollectionMetadata} */ (result),\n    WFS.FEATURE_COLLECTION_PARSERS_, node, [], this.gmlFormat_);\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWFS.TRANSACTION_SUMMARY_PARSERS_ = {\n  'http://www.opengis.net/wfs': {\n    'totalInserted': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'totalUpdated': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'totalDeleted': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger)\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Transaction Summary.\n * @private\n */\nWFS.readTransactionSummary_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop(\n    {}, WFS.TRANSACTION_SUMMARY_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWFS.OGC_FID_PARSERS_ = {\n  'http://www.opengis.net/ogc': {\n    'FeatureId': _ol_xml_.makeArrayPusher(function(node, objectStack) {\n      return node.getAttribute('fid');\n    })\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nWFS.fidParser_ = function(node, objectStack) {\n  _ol_xml_.parseNode(WFS.OGC_FID_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWFS.INSERT_RESULTS_PARSERS_ = {\n  'http://www.opengis.net/wfs': {\n    'Feature': WFS.fidParser_\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Array.<string>|undefined} Insert results.\n * @private\n */\nWFS.readInsertResults_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop(\n    [], WFS.INSERT_RESULTS_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWFS.TRANSACTION_RESPONSE_PARSERS_ = {\n  'http://www.opengis.net/wfs': {\n    'TransactionSummary': _ol_xml_.makeObjectPropertySetter(\n      WFS.readTransactionSummary_, 'transactionSummary'),\n    'InsertResults': _ol_xml_.makeObjectPropertySetter(\n      WFS.readInsertResults_, 'insertIds')\n  }\n};\n\n\n/**\n * @param {Document} doc Document.\n * @return {ol.WFSTransactionResponse|undefined} Transaction response.\n */\nWFS.prototype.readTransactionResponseFromDocument = function(doc) {\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readTransactionResponseFromNode(n);\n    }\n  }\n  return undefined;\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {ol.WFSTransactionResponse|undefined} Transaction response.\n */\nWFS.prototype.readTransactionResponseFromNode = function(node) {\n  return _ol_xml_.pushParseAndPop(\n    /** @type {ol.WFSTransactionResponse} */({}),\n    WFS.TRANSACTION_RESPONSE_PARSERS_, node, []);\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nWFS.QUERY_SERIALIZERS_ = {\n  'http://www.opengis.net/wfs': {\n    'PropertyName': _ol_xml_.makeChildAppender(XSD.writeStringTextNode)\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Feature} feature Feature.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeFeature_ = function(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const featureType = context['featureType'];\n  const featureNS = context['featureNS'];\n  const gmlVersion = context['gmlVersion'];\n  const child = _ol_xml_.createElementNS(featureNS, featureType);\n  node.appendChild(child);\n  if (gmlVersion === 2) {\n    GML2.prototype.writeFeatureElement(child, feature, objectStack);\n  } else {\n    GML3.prototype.writeFeatureElement(child, feature, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {number|string} fid Feature identifier.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeOgcFidFilter_ = function(node, fid, objectStack) {\n  const filter = _ol_xml_.createElementNS(WFS.OGCNS, 'Filter');\n  const child = _ol_xml_.createElementNS(WFS.OGCNS, 'FeatureId');\n  filter.appendChild(child);\n  child.setAttribute('fid', fid);\n  node.appendChild(filter);\n};\n\n\n/**\n * @param {string|undefined} featurePrefix The prefix of the feature.\n * @param {string} featureType The type of the feature.\n * @returns {string} The value of the typeName property.\n * @private\n */\nWFS.getTypeName_ = function(featurePrefix, featureType) {\n  featurePrefix = featurePrefix ? featurePrefix :\n    WFS.FEATURE_PREFIX;\n  const prefix = featurePrefix + ':';\n  // The featureType already contains the prefix.\n  if (featureType.indexOf(prefix) === 0) {\n    return featureType;\n  } else {\n    return prefix + featureType;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Feature} feature Feature.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeDelete_ = function(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 26); // Features must have an id set\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = WFS.getTypeName_(featurePrefix, featureType);\n  node.setAttribute('typeName', typeName);\n  _ol_xml_.setAttributeNS(node, WFS.XMLNS, 'xmlns:' + featurePrefix,\n    featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    WFS.writeOgcFidFilter_(node, fid, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Feature} feature Feature.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeUpdate_ = function(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 27); // Features must have an id set\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = WFS.getTypeName_(featurePrefix, featureType);\n  const geometryName = feature.getGeometryName();\n  node.setAttribute('typeName', typeName);\n  _ol_xml_.setAttributeNS(node, WFS.XMLNS, 'xmlns:' + featurePrefix,\n    featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    const keys = feature.getKeys();\n    const values = [];\n    for (let i = 0, ii = keys.length; i < ii; i++) {\n      const value = feature.get(keys[i]);\n      if (value !== undefined) {\n        let name = keys[i];\n        if (value instanceof Geometry) {\n          name = geometryName;\n        }\n        values.push({name: name, value: value});\n      }\n    }\n    _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */ (\n      {'gmlVersion': context['gmlVersion'], node: node,\n        'hasZ': context['hasZ'], 'srsName': context['srsName']}),\n    WFS.TRANSACTION_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('Property'), values,\n    objectStack);\n    WFS.writeOgcFidFilter_(node, fid, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Object} pair Property name and value.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeProperty_ = function(node, pair, objectStack) {\n  const name = _ol_xml_.createElementNS(WFS.WFSNS, 'Name');\n  const context = objectStack[objectStack.length - 1];\n  const gmlVersion = context['gmlVersion'];\n  node.appendChild(name);\n  XSD.writeStringTextNode(name, pair.name);\n  if (pair.value !== undefined && pair.value !== null) {\n    const value = _ol_xml_.createElementNS(WFS.WFSNS, 'Value');\n    node.appendChild(value);\n    if (pair.value instanceof Geometry) {\n      if (gmlVersion === 2) {\n        GML2.prototype.writeGeometryElement(value,\n          pair.value, objectStack);\n      } else {\n        GML3.prototype.writeGeometryElement(value,\n          pair.value, objectStack);\n      }\n    } else {\n      XSD.writeStringTextNode(value, pair.value);\n    }\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {{vendorId: string, safeToIgnore: boolean, value: string}}\n *     nativeElement The native element.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeNative_ = function(node, nativeElement, objectStack) {\n  if (nativeElement.vendorId) {\n    node.setAttribute('vendorId', nativeElement.vendorId);\n  }\n  if (nativeElement.safeToIgnore !== undefined) {\n    node.setAttribute('safeToIgnore', nativeElement.safeToIgnore);\n  }\n  if (nativeElement.value !== undefined) {\n    XSD.writeStringTextNode(node, nativeElement.value);\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nWFS.TRANSACTION_SERIALIZERS_ = {\n  'http://www.opengis.net/wfs': {\n    'Insert': _ol_xml_.makeChildAppender(WFS.writeFeature_),\n    'Update': _ol_xml_.makeChildAppender(WFS.writeUpdate_),\n    'Delete': _ol_xml_.makeChildAppender(WFS.writeDelete_),\n    'Property': _ol_xml_.makeChildAppender(WFS.writeProperty_),\n    'Native': _ol_xml_.makeChildAppender(WFS.writeNative_)\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {string} featureType Feature type.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeQuery_ = function(node, featureType, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const propertyNames = context['propertyNames'];\n  const srsName = context['srsName'];\n  let typeName;\n  // If feature prefix is not defined, we must not use the default prefix.\n  if (featurePrefix) {\n    typeName = WFS.getTypeName_(featurePrefix, featureType);\n  } else {\n    typeName = featureType;\n  }\n  node.setAttribute('typeName', typeName);\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (featureNS) {\n    _ol_xml_.setAttributeNS(node, WFS.XMLNS, 'xmlns:' + featurePrefix,\n      featureNS);\n  }\n  const item = /** @type {ol.XmlNodeStackItem} */ (assign({}, context));\n  item.node = node;\n  _ol_xml_.pushSerializeAndPop(item,\n    WFS.QUERY_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('PropertyName'), propertyNames,\n    objectStack);\n  const filter = context['filter'];\n  if (filter) {\n    const child = _ol_xml_.createElementNS(WFS.OGCNS, 'Filter');\n    node.appendChild(child);\n    WFS.writeFilterCondition_(child, filter, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.Filter} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeFilterCondition_ = function(node, filter, objectStack) {\n  /** @type {ol.XmlNodeStackItem} */\n  const item = {node: node};\n  _ol_xml_.pushSerializeAndPop(item,\n    WFS.GETFEATURE_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory(filter.getTagName()),\n    [filter], objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.Bbox} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeBboxFilter_ = function(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  WFS.writeOgcPropertyName_(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.extent, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.Contains} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeContainsFilter_ = function(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  WFS.writeOgcPropertyName_(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.Intersects} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeIntersectsFilter_ = function(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  WFS.writeOgcPropertyName_(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.Within} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeWithinFilter_ = function(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  WFS.writeOgcPropertyName_(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.During} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeDuringFilter_ = function(node, filter, objectStack) {\n\n  const valueReference = _ol_xml_.createElementNS(WFS.FESNS, 'ValueReference');\n  XSD.writeStringTextNode(valueReference, filter.propertyName);\n  node.appendChild(valueReference);\n\n  const timePeriod = _ol_xml_.createElementNS(GMLBase.GMLNS, 'TimePeriod');\n\n  node.appendChild(timePeriod);\n\n  const begin = _ol_xml_.createElementNS(GMLBase.GMLNS, 'begin');\n  timePeriod.appendChild(begin);\n  WFS.writeTimeInstant_(begin, filter.begin);\n\n  const end = _ol_xml_.createElementNS(GMLBase.GMLNS, 'end');\n  timePeriod.appendChild(end);\n  WFS.writeTimeInstant_(end, filter.end);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.LogicalNary} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeLogicalFilter_ = function(node, filter, objectStack) {\n  /** @type {ol.XmlNodeStackItem} */\n  const item = {node: node};\n  const conditions = filter.conditions;\n  for (let i = 0, ii = conditions.length; i < ii; ++i) {\n    const condition = conditions[i];\n    _ol_xml_.pushSerializeAndPop(item,\n      WFS.GETFEATURE_SERIALIZERS_,\n      _ol_xml_.makeSimpleNodeFactory(condition.getTagName()),\n      [condition], objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.Not} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeNotFilter_ = function(node, filter, objectStack) {\n  /** @type {ol.XmlNodeStackItem} */\n  const item = {node: node};\n  const condition = filter.condition;\n  _ol_xml_.pushSerializeAndPop(item,\n    WFS.GETFEATURE_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory(condition.getTagName()),\n    [condition], objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.ComparisonBinary} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeComparisonFilter_ = function(node, filter, objectStack) {\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  WFS.writeOgcPropertyName_(node, filter.propertyName);\n  WFS.writeOgcLiteral_(node, '' + filter.expression);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.IsNull} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeIsNullFilter_ = function(node, filter, objectStack) {\n  WFS.writeOgcPropertyName_(node, filter.propertyName);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.IsBetween} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeIsBetweenFilter_ = function(node, filter, objectStack) {\n  WFS.writeOgcPropertyName_(node, filter.propertyName);\n\n  const lowerBoundary = _ol_xml_.createElementNS(WFS.OGCNS, 'LowerBoundary');\n  node.appendChild(lowerBoundary);\n  WFS.writeOgcLiteral_(lowerBoundary, '' + filter.lowerBoundary);\n\n  const upperBoundary = _ol_xml_.createElementNS(WFS.OGCNS, 'UpperBoundary');\n  node.appendChild(upperBoundary);\n  WFS.writeOgcLiteral_(upperBoundary, '' + filter.upperBoundary);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.IsLike} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeIsLikeFilter_ = function(node, filter, objectStack) {\n  node.setAttribute('wildCard', filter.wildCard);\n  node.setAttribute('singleChar', filter.singleChar);\n  node.setAttribute('escapeChar', filter.escapeChar);\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  WFS.writeOgcPropertyName_(node, filter.propertyName);\n  WFS.writeOgcLiteral_(node, '' + filter.pattern);\n};\n\n\n/**\n * @param {string} tagName Tag name.\n * @param {Node} node Node.\n * @param {string} value Value.\n * @private\n */\nWFS.writeOgcExpression_ = function(tagName, node, value) {\n  const property = _ol_xml_.createElementNS(WFS.OGCNS, tagName);\n  XSD.writeStringTextNode(property, value);\n  node.appendChild(property);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n * @private\n */\nWFS.writeOgcPropertyName_ = function(node, value) {\n  WFS.writeOgcExpression_('PropertyName', node, value);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n * @private\n */\nWFS.writeOgcLiteral_ = function(node, value) {\n  WFS.writeOgcExpression_('Literal', node, value);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {string} time PropertyName value.\n * @private\n */\nWFS.writeTimeInstant_ = function(node, time) {\n  const timeInstant = _ol_xml_.createElementNS(GMLBase.GMLNS, 'TimeInstant');\n  node.appendChild(timeInstant);\n\n  const timePosition = _ol_xml_.createElementNS(GMLBase.GMLNS, 'timePosition');\n  timeInstant.appendChild(timePosition);\n  XSD.writeStringTextNode(timePosition, time);\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nWFS.GETFEATURE_SERIALIZERS_ = {\n  'http://www.opengis.net/wfs': {\n    'Query': _ol_xml_.makeChildAppender(WFS.writeQuery_)\n  },\n  'http://www.opengis.net/ogc': {\n    'During': _ol_xml_.makeChildAppender(WFS.writeDuringFilter_),\n    'And': _ol_xml_.makeChildAppender(WFS.writeLogicalFilter_),\n    'Or': _ol_xml_.makeChildAppender(WFS.writeLogicalFilter_),\n    'Not': _ol_xml_.makeChildAppender(WFS.writeNotFilter_),\n    'BBOX': _ol_xml_.makeChildAppender(WFS.writeBboxFilter_),\n    'Contains': _ol_xml_.makeChildAppender(WFS.writeContainsFilter_),\n    'Intersects': _ol_xml_.makeChildAppender(WFS.writeIntersectsFilter_),\n    'Within': _ol_xml_.makeChildAppender(WFS.writeWithinFilter_),\n    'PropertyIsEqualTo': _ol_xml_.makeChildAppender(WFS.writeComparisonFilter_),\n    'PropertyIsNotEqualTo': _ol_xml_.makeChildAppender(WFS.writeComparisonFilter_),\n    'PropertyIsLessThan': _ol_xml_.makeChildAppender(WFS.writeComparisonFilter_),\n    'PropertyIsLessThanOrEqualTo': _ol_xml_.makeChildAppender(WFS.writeComparisonFilter_),\n    'PropertyIsGreaterThan': _ol_xml_.makeChildAppender(WFS.writeComparisonFilter_),\n    'PropertyIsGreaterThanOrEqualTo': _ol_xml_.makeChildAppender(WFS.writeComparisonFilter_),\n    'PropertyIsNull': _ol_xml_.makeChildAppender(WFS.writeIsNullFilter_),\n    'PropertyIsBetween': _ol_xml_.makeChildAppender(WFS.writeIsBetweenFilter_),\n    'PropertyIsLike': _ol_xml_.makeChildAppender(WFS.writeIsLikeFilter_)\n  }\n};\n\n\n/**\n * Encode filter as WFS `Filter` and return the Node.\n *\n * @param {ol.format.filter.Filter} filter Filter.\n * @return {Node} Result.\n * @api\n */\nWFS.writeFilter = function(filter) {\n  const child = _ol_xml_.createElementNS(WFS.OGCNS, 'Filter');\n  WFS.writeFilterCondition_(child, filter, []);\n  return child;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<string>} featureTypes Feature types.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeGetFeature_ = function(node, featureTypes, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const item = /** @type {ol.XmlNodeStackItem} */ (assign({}, context));\n  item.node = node;\n  _ol_xml_.pushSerializeAndPop(item,\n    WFS.GETFEATURE_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('Query'), featureTypes,\n    objectStack);\n};\n\n\n/**\n * Encode format as WFS `GetFeature` and return the Node.\n *\n * @param {olx.format.WFSWriteGetFeatureOptions} options Options.\n * @return {Node} Result.\n * @api\n */\nWFS.prototype.writeGetFeature = function(options) {\n  const node = _ol_xml_.createElementNS(WFS.WFSNS, 'GetFeature');\n  node.setAttribute('service', 'WFS');\n  node.setAttribute('version', '1.1.0');\n  let filter;\n  if (options) {\n    if (options.handle) {\n      node.setAttribute('handle', options.handle);\n    }\n    if (options.outputFormat) {\n      node.setAttribute('outputFormat', options.outputFormat);\n    }\n    if (options.maxFeatures !== undefined) {\n      node.setAttribute('maxFeatures', options.maxFeatures);\n    }\n    if (options.resultType) {\n      node.setAttribute('resultType', options.resultType);\n    }\n    if (options.startIndex !== undefined) {\n      node.setAttribute('startIndex', options.startIndex);\n    }\n    if (options.count !== undefined) {\n      node.setAttribute('count', options.count);\n    }\n    filter = options.filter;\n    if (options.bbox) {\n      assert(options.geometryName,\n        12); // `options.geometryName` must also be provided when `options.bbox` is set\n      const bbox = _ol_format_filter_.bbox(\n        /** @type {string} */ (options.geometryName), options.bbox, options.srsName);\n      if (filter) {\n        // if bbox and filter are both set, combine the two into a single filter\n        filter = _ol_format_filter_.and(filter, bbox);\n      } else {\n        filter = bbox;\n      }\n    }\n  }\n  _ol_xml_.setAttributeNS(node, 'http://www.w3.org/2001/XMLSchema-instance',\n    'xsi:schemaLocation', this.schemaLocation_);\n  /** @type {ol.XmlNodeStackItem} */\n  const context = {\n    node: node,\n    'srsName': options.srsName,\n    'featureNS': options.featureNS ? options.featureNS : this.featureNS_,\n    'featurePrefix': options.featurePrefix,\n    'geometryName': options.geometryName,\n    'filter': filter,\n    'propertyNames': options.propertyNames ? options.propertyNames : []\n  };\n  assert(Array.isArray(options.featureTypes),\n    11); // `options.featureTypes` should be an Array\n  WFS.writeGetFeature_(node, /** @type {!Array.<string>} */ (options.featureTypes), [context]);\n  return node;\n};\n\n\n/**\n * Encode format as WFS `Transaction` and return the Node.\n *\n * @param {Array.<ol.Feature>} inserts The features to insert.\n * @param {Array.<ol.Feature>} updates The features to update.\n * @param {Array.<ol.Feature>} deletes The features to delete.\n * @param {olx.format.WFSWriteTransactionOptions} options Write options.\n * @return {Node} Result.\n * @api\n */\nWFS.prototype.writeTransaction = function(inserts, updates, deletes,\n  options) {\n  const objectStack = [];\n  const node = _ol_xml_.createElementNS(WFS.WFSNS, 'Transaction');\n  const version = options.version ?\n    options.version : WFS.DEFAULT_VERSION;\n  const gmlVersion = version === '1.0.0' ? 2 : 3;\n  node.setAttribute('service', 'WFS');\n  node.setAttribute('version', version);\n  let baseObj;\n  /** @type {ol.XmlNodeStackItem} */\n  let obj;\n  if (options) {\n    baseObj = options.gmlOptions ? options.gmlOptions : {};\n    if (options.handle) {\n      node.setAttribute('handle', options.handle);\n    }\n  }\n  const schemaLocation = WFS.SCHEMA_LOCATIONS[version];\n  _ol_xml_.setAttributeNS(node, 'http://www.w3.org/2001/XMLSchema-instance',\n    'xsi:schemaLocation', schemaLocation);\n  const featurePrefix = options.featurePrefix ? options.featurePrefix : WFS.FEATURE_PREFIX;\n  if (inserts) {\n    obj = {node: node, 'featureNS': options.featureNS,\n      'featureType': options.featureType, 'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion, 'hasZ': options.hasZ, 'srsName': options.srsName};\n    assign(obj, baseObj);\n    _ol_xml_.pushSerializeAndPop(obj,\n      WFS.TRANSACTION_SERIALIZERS_,\n      _ol_xml_.makeSimpleNodeFactory('Insert'), inserts,\n      objectStack);\n  }\n  if (updates) {\n    obj = {node: node, 'featureNS': options.featureNS,\n      'featureType': options.featureType, 'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion, 'hasZ': options.hasZ, 'srsName': options.srsName};\n    assign(obj, baseObj);\n    _ol_xml_.pushSerializeAndPop(obj,\n      WFS.TRANSACTION_SERIALIZERS_,\n      _ol_xml_.makeSimpleNodeFactory('Update'), updates,\n      objectStack);\n  }\n  if (deletes) {\n    _ol_xml_.pushSerializeAndPop({node: node, 'featureNS': options.featureNS,\n      'featureType': options.featureType, 'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion, 'srsName': options.srsName},\n    WFS.TRANSACTION_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('Delete'), deletes,\n    objectStack);\n  }\n  if (options.nativeElements) {\n    _ol_xml_.pushSerializeAndPop({node: node, 'featureNS': options.featureNS,\n      'featureType': options.featureType, 'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion, 'srsName': options.srsName},\n    WFS.TRANSACTION_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('Native'), options.nativeElements,\n    objectStack);\n  }\n  return node;\n};\n\n\n/**\n * Read the projection from a WFS source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @return {?ol.proj.Projection} Projection.\n * @api\n */\nWFS.prototype.readProjection;\n\n\n/**\n * @inheritDoc\n */\nWFS.prototype.readProjectionFromDocument = function(doc) {\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readProjectionFromNode(n);\n    }\n  }\n  return null;\n};\n\n\n/**\n * @inheritDoc\n */\nWFS.prototype.readProjectionFromNode = function(node) {\n  if (node.firstElementChild &&\n      node.firstElementChild.firstElementChild) {\n    node = node.firstElementChild.firstElementChild;\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      if (!(n.childNodes.length === 0 ||\n          (n.childNodes.length === 1 &&\n          n.firstChild.nodeType === 3))) {\n        const objectStack = [{}];\n        this.gmlFormat_.readGeometryElement(n, objectStack);\n        return getProjection(objectStack.pop().srsName);\n      }\n    }\n  }\n\n  return null;\n};\nexport default WFS;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/WFS.js\n// module id = 55\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22","/**\n * @type {string} Default WMS version.\n */\nexport const DEFAULT_WMS_VERSION = '1.3.0';\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/common.js\n// module id = 57\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module ol/source/WMSServerType\n */\n\n/**\n * Available server types: `'carmentaserver'`, `'geoserver'`, `'mapserver'`,\n *     `'qgis'`. These are servers that have vendor parameters beyond the WMS\n *     specification that OpenLayers can make use of.\n * @enum {string}\n */\nexport default {\n  CARMENTA_SERVER: 'carmentaserver',\n  GEOSERVER: 'geoserver',\n  MAPSERVER: 'mapserver',\n  QGIS: 'qgis'\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/WMSServerType.js\n// module id = 58\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module ol/source/TileWMS\n */\n\nimport {DEFAULT_WMS_VERSION} from './common.js';\nimport {inherits} from '../index.js';\nimport {assert} from '../asserts.js';\nimport {buffer, createEmpty} from '../extent.js';\nimport {assign} from '../obj.js';\nimport {modulo} from '../math.js';\nimport {get as getProjection, transform, transformExtent} from '../proj.js';\nimport _ol_reproj_ from '../reproj.js';\nimport _ol_size_ from '../size.js';\nimport TileImage from '../source/TileImage.js';\nimport WMSServerType from '../source/WMSServerType.js';\nimport _ol_tilecoord_ from '../tilecoord.js';\nimport _ol_string_ from '../string.js';\nimport {appendParams} from '../uri.js';\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n *\n * @constructor\n * @extends {ol.source.TileImage}\n * @param {olx.source.TileWMSOptions=} opt_options Tile WMS options.\n * @api\n */\nconst TileWMS = function(opt_options) {\n\n  const options = opt_options || {};\n\n  const params = options.params || {};\n\n  const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n\n  TileImage.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: options.crossOrigin,\n    opaque: !transparent,\n    projection: options.projection,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileClass: options.tileClass,\n    tileGrid: options.tileGrid,\n    tileLoadFunction: options.tileLoadFunction,\n    url: options.url,\n    urls: options.urls,\n    wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    transition: options.transition\n  });\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n  /**\n   * @private\n   * @type {!Object}\n   */\n  this.params_ = params;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.v13_ = true;\n\n  /**\n   * @private\n   * @type {ol.source.WMSServerType|undefined}\n   */\n  this.serverType_ = /** @type {ol.source.WMSServerType|undefined} */ (options.serverType);\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n  /**\n   * @private\n   * @type {ol.Extent}\n   */\n  this.tmpExtent_ = createEmpty();\n\n  this.updateV13_();\n  this.setKey(this.getKeyForParams_());\n\n};\n\ninherits(TileWMS, TileImage);\n\n\n/**\n * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n * constructed.\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {number} resolution Resolution.\n * @param {ol.ProjectionLike} projection Projection.\n * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n *     in the `LAYERS` parameter will be used. `VERSION` should not be\n *     specified here.\n * @return {string|undefined} GetFeatureInfo URL.\n * @api\n */\nTileWMS.prototype.getGetFeatureInfoUrl = function(coordinate, resolution, projection, params) {\n  const projectionObj = getProjection(projection);\n  const sourceProjectionObj = this.getProjection();\n\n  let tileGrid = this.getTileGrid();\n  if (!tileGrid) {\n    tileGrid = this.getTileGridForProjection(projectionObj);\n  }\n\n  const tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, resolution);\n\n  if (tileGrid.getResolutions().length <= tileCoord[0]) {\n    return undefined;\n  }\n\n  let tileResolution = tileGrid.getResolution(tileCoord[0]);\n  let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n  let tileSize = _ol_size_.toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n\n  const gutter = this.gutter_;\n  if (gutter !== 0) {\n    tileSize = _ol_size_.buffer(tileSize, gutter, this.tmpSize);\n    tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n  }\n\n  if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n    tileResolution = _ol_reproj_.calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, tileResolution);\n    tileExtent = transformExtent(tileExtent, projectionObj, sourceProjectionObj);\n    coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n  }\n\n  const baseParams = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_WMS_VERSION,\n    'REQUEST': 'GetFeatureInfo',\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true,\n    'QUERY_LAYERS': this.params_['LAYERS']\n  };\n  assign(baseParams, this.params_, params);\n\n  const x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\n  const y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\n\n  baseParams[this.v13_ ? 'I' : 'X'] = x;\n  baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n  return this.getRequestUrl_(tileCoord, tileSize, tileExtent,\n    1, sourceProjectionObj || projectionObj, baseParams);\n};\n\n\n/**\n * @inheritDoc\n */\nTileWMS.prototype.getGutterInternal = function() {\n  return this.gutter_;\n};\n\n\n/**\n * Get the user-provided params, i.e. those passed to the constructor through\n * the \"params\" option, and possibly updated using the updateParams method.\n * @return {Object} Params.\n * @api\n */\nTileWMS.prototype.getParams = function() {\n  return this.params_;\n};\n\n\n/**\n * @param {ol.TileCoord} tileCoord Tile coordinate.\n * @param {ol.Size} tileSize Tile size.\n * @param {ol.Extent} tileExtent Tile extent.\n * @param {number} pixelRatio Pixel ratio.\n * @param {ol.proj.Projection} projection Projection.\n * @param {Object} params Params.\n * @return {string|undefined} Request URL.\n * @private\n */\nTileWMS.prototype.getRequestUrl_ = function(tileCoord, tileSize, tileExtent,\n  pixelRatio, projection, params) {\n\n  const urls = this.urls;\n  if (!urls) {\n    return undefined;\n  }\n\n  params['WIDTH'] = tileSize[0];\n  params['HEIGHT'] = tileSize[1];\n\n  params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n  if (!('STYLES' in this.params_)) {\n    params['STYLES'] = '';\n  }\n\n  if (pixelRatio != 1) {\n    switch (this.serverType_) {\n      case WMSServerType.GEOSERVER:\n        const dpi = (90 * pixelRatio + 0.5) | 0;\n        if ('FORMAT_OPTIONS' in params) {\n          params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n        } else {\n          params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n        }\n        break;\n      case WMSServerType.MAPSERVER:\n        params['MAP_RESOLUTION'] = 90 * pixelRatio;\n        break;\n      case WMSServerType.CARMENTA_SERVER:\n      case WMSServerType.QGIS:\n        params['DPI'] = 90 * pixelRatio;\n        break;\n      default:\n        assert(false, 52); // Unknown `serverType` configured\n        break;\n    }\n  }\n\n  const axisOrientation = projection.getAxisOrientation();\n  const bbox = tileExtent;\n  if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n    let tmp;\n    tmp = tileExtent[0];\n    bbox[0] = tileExtent[1];\n    bbox[1] = tmp;\n    tmp = tileExtent[2];\n    bbox[2] = tileExtent[3];\n    bbox[3] = tmp;\n  }\n  params['BBOX'] = bbox.join(',');\n\n  let url;\n  if (urls.length == 1) {\n    url = urls[0];\n  } else {\n    const index = modulo(_ol_tilecoord_.hash(tileCoord), urls.length);\n    url = urls[index];\n  }\n  return appendParams(url, params);\n};\n\n\n/**\n * @inheritDoc\n */\nTileWMS.prototype.getTilePixelRatio = function(pixelRatio) {\n  return (!this.hidpi_ || this.serverType_ === undefined) ? 1 :\n  /** @type {number} */ (pixelRatio);\n};\n\n\n/**\n * @private\n * @return {string} The key for the current params.\n */\nTileWMS.prototype.getKeyForParams_ = function() {\n  let i = 0;\n  const res = [];\n  for (const key in this.params_) {\n    res[i++] = key + '-' + this.params_[key];\n  }\n  return res.join('/');\n};\n\n\n/**\n * @inheritDoc\n */\nTileWMS.prototype.fixedTileUrlFunction = function(tileCoord, pixelRatio, projection) {\n\n  let tileGrid = this.getTileGrid();\n  if (!tileGrid) {\n    tileGrid = this.getTileGridForProjection(projection);\n  }\n\n  if (tileGrid.getResolutions().length <= tileCoord[0]) {\n    return undefined;\n  }\n\n  if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n    pixelRatio = 1;\n  }\n\n  const tileResolution = tileGrid.getResolution(tileCoord[0]);\n  let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n  let tileSize = _ol_size_.toSize(\n    tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n  const gutter = this.gutter_;\n  if (gutter !== 0) {\n    tileSize = _ol_size_.buffer(tileSize, gutter, this.tmpSize);\n    tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n  }\n\n  if (pixelRatio != 1) {\n    tileSize = _ol_size_.scale(tileSize, pixelRatio, this.tmpSize);\n  }\n\n  const baseParams = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_WMS_VERSION,\n    'REQUEST': 'GetMap',\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true\n  };\n  assign(baseParams, this.params_);\n\n  return this.getRequestUrl_(tileCoord, tileSize, tileExtent,\n    pixelRatio, projection, baseParams);\n};\n\n/**\n * Update the user-provided params.\n * @param {Object} params Params.\n * @api\n */\nTileWMS.prototype.updateParams = function(params) {\n  assign(this.params_, params);\n  this.updateV13_();\n  this.setKey(this.getKeyForParams_());\n};\n\n\n/**\n * @private\n */\nTileWMS.prototype.updateV13_ = function() {\n  const version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n  this.v13_ = _ol_string_.compareVersions(version, '1.3') >= 0;\n};\nexport default TileWMS;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/TileWMS.js\n// module id = 60\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module ngeo.statemanager.Location\n*/\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoUtils from 'ngeo/utils.js';\n\n/**\n * Provides a service for interacting with the URL in the\n * browser address bar.\n *\n * WARNING: because of a bug in Angular this service is not compatible with\n * the $location service. This further means that service is not compatible\n * with the $anchorScroll and $route services, and with the ng-include and\n * ng-view directives (which are based on the $anchorScroll and $route\n * services). See <https://github.com/angular/angular.js/issues/1417>.\n *\n * This file also provides an ngeo.statemanager.Location.MockProvider function that you can\n * use to mock Angular's $location provider and make it possible to use both\n * ngeoLocation and ng-include.\n *\n *     app.module.config(ngeo.statemanager.Location.MockProvider);\n *\n * The ngeo Location type.\n *\n * See our live example: [../examples/permalink.html](../examples/permalink.html)\n *\n * @param {Location} location Location.\n * @param {History} history History.\n * @constructor\n * @struct\n * @ngdoc service\n * @ngname ngeoLocation\n */\nconst exports = function(location, history) {\n  /**\n   * @type {History}\n   * @private\n   */\n  this.history_ = history;\n\n  /**\n   * @type {string|undefined}\n   * @private\n   */\n  this.schema_ = location.protocol.substring(0, location.protocol.length - 1);\n\n  /**\n   * @type {string|undefined}\n   * @private\n   */\n  this.domain_ = location.hostname;\n\n  /**\n   * @type {number|undefined}\n   * @private\n   */\n  this.port_ = location.port ? parseInt(location.port, 10) : undefined;\n\n  /**\n   * @type {string|undefined}\n   * @private\n   */\n  this.path_ = location.pathname;\n\n  /**\n   * @type {!Object.<string, string>}\n   * @private\n   */\n  this.queryData_ = ngeoUtils.decodeQueryString(location.search);\n\n  /**\n   * @type {!Object.<string, string>}\n   * @private\n   */\n  this.fragment_ = ngeoUtils.decodeQueryString(location.hash);\n};\n\n\n/**\n * @param {History} history History.\n * @param {string} state State.\n */\nexports.replaceState = function(history, state) {\n  try {\n    history.replaceState(null, '', state);\n  } catch (error) {\n    // replaceState fails on some browser if the domain in the state\n    // is not the same as location.origin\n  }\n};\n\n\n/**\n * Get the location's current path.\n * @return {string|undefined} The path.\n * @export\n */\nexports.prototype.getPath = function() {\n  return this.path_;\n};\n\n\n/**\n * Get the location's URI as a string\n * @return {string} The URI.\n * @export\n */\nexports.prototype.getUriString = function() {\n  const out = [];\n\n  if (this.schema_) {\n    out.push(this.schema_, ':');\n  }\n\n  if (this.domain_ || this.schema_ === 'file') {\n    out.push('//');\n\n    out.push(this.domain_);\n\n    if (this.port_ !== undefined) {\n      out.push(':', String(this.port_));\n    }\n  }\n\n  if (this.path_) {\n    if (this.domain_ && this.path_.charAt(0) !== '/') {\n      out.push('/');\n    }\n    out.push(this.path_);\n  }\n\n  const encodedQueryData = ngeoUtils.encodeQueryString(this.queryData_);\n  if (encodedQueryData.length > 0) {\n    out.push('?', encodedQueryData);\n  }\n\n  const encodedFragment = ngeoUtils.encodeQueryString(this.fragment_);\n  if (encodedFragment.length > 0) {\n    out.push('#', encodedFragment);\n  }\n  return out.join('');\n};\n\n\n/**\n * Check if a param exists in the location's URI.\n * @param {string} key Param key.\n * @return {boolean} True if the param exists.\n * @export\n */\nexports.prototype.hasParam = function(key) {\n  return key in this.queryData_;\n};\n\n\n/**\n * Check if a param exists in the fragment of the location's URI.\n * @param {string} key Param key.\n * @return {boolean} True if the param exists.\n * @export\n */\nexports.prototype.hasFragmentParam = function(key) {\n  return key in this.fragment_;\n};\n\n\n/**\n * Get a param in the location's URI.\n * @param {string} key Param key.\n * @return {string|undefined} Param value.\n * @export\n */\nexports.prototype.getParam = function(key) {\n  return this.queryData_[key];\n};\n\n\n/**\n * Get a param from the fragment of the location's URI.\n * @param {string} key Param key.\n * @return {string|undefined} Param value.\n * @export\n */\nexports.prototype.getFragmentParam = function(key) {\n  return this.fragment_[key];\n};\n\n\n/**\n * Get a param in the location's URI as integer. If the entry does not exist,\n * or if the value can not be parsed as integer, `undefined` is returned.\n * @param {string} key Param key.\n * @return {number|undefined} Param value.\n * @export\n */\nexports.prototype.getParamAsInt = function(key) {\n  const value = this.getParam(key);\n  if (value === undefined) {\n    return undefined;\n  }\n  goog.asserts.assertString(value);\n  const valueAsInt = parseInt(value, 10);\n  return (isNaN(valueAsInt)) ? undefined : valueAsInt;\n};\n\n\n/**\n * Get a param in the location's URI as a floating point number.\n * If the entry does not exist, or if the value can not be parsed,\n * `undefined` is returned.\n * @param {string} key Param key.\n * @return {number|undefined} Param value.\n * @export\n */\nexports.prototype.getParamAsFloat = function(key) {\n  const value = this.getParam(key);\n  if (value === undefined) {\n    return undefined;\n  }\n  goog.asserts.assertString(value);\n  const valueAsFloat = parseFloat(value);\n  return isNaN(valueAsFloat) ? undefined : valueAsFloat;\n};\n\n\n/**\n * Get a param from the fragment of the location's URI as integer. If the entry\n * does not exist, or if the value can not be parsed as integer, `undefined` is returned.\n * @param {string} key Param key.\n * @return {number|undefined} Param value.\n * @export\n */\nexports.prototype.getFragmentParamAsInt = function(key) {\n  const value = this.getFragmentParam(key);\n  if (value === undefined) {\n    return undefined;\n  }\n  goog.asserts.assertString(value);\n  const valueAsInt = parseInt(value, 10);\n  return (isNaN(valueAsInt)) ? undefined : valueAsInt;\n};\n\n\n/**\n * Get an array with all existing param's keys in the location's URI.\n * @return {Array.<string>} Param keys.\n * @export\n */\nexports.prototype.getParamKeys = function() {\n  const keys = [];\n  for (const key in this.queryData_) {\n    keys.push(key);\n  }\n  return keys;\n};\n\n\n/**\n * Get an array with all existing param's keys from the fragment of the location's URI.\n * @return {Array.<string>} Param keys.\n * @export\n */\nexports.prototype.getFragmentParamKeys = function() {\n  const keys = [];\n  for (const key in this.fragment_) {\n    keys.push(key);\n  }\n  return keys;\n};\n\n\n/**\n * Get an array with all existing param's keys in the location's URI that start\n * with the given prefix.\n * @param {string} prefix Key prefix.\n * @return {Array.<string>} Param keys.\n * @export\n */\nexports.prototype.getParamKeysWithPrefix = function(prefix) {\n  const keys = [];\n  for (const key in this.queryData_) {\n    if (key.indexOf(prefix) == 0) {\n      keys.push(key);\n    }\n  }\n  return keys;\n};\n\n\n/**\n * Get an array with all existing param's keys from the fragment of the location's URI\n * that start with the given prefix.\n * @param {string} prefix Key prefix.\n * @return {Array.<string>} Param keys.\n * @export\n */\nexports.prototype.getFragmentParamKeysWithPrefix = function(prefix) {\n  const keys = [];\n  for (const key in this.fragment_) {\n    if (key.indexOf(prefix) == 0) {\n      keys.push(key);\n    }\n  }\n  return keys;\n};\n\n\n/**\n * Set or create a param in the location's URI.\n * @param {!Object.<string, string>} params Parameters.\n * @export\n */\nexports.prototype.updateParams = function(params) {\n  for (const key in params) {\n    this.queryData_[key] = params[key];\n  }\n};\n\n\n/**\n * Set or create a param in the fragment of the location's URI.\n * @param {!Object.<string, string>} params Parameters.\n * @export\n */\nexports.prototype.updateFragmentParams = function(params) {\n  for (const key in params) {\n    this.fragment_[key] = params[key];\n  }\n};\n\n\n/**\n * Delete a param in the location's URI.\n * @param {string} key Param key.\n * @export\n */\nexports.prototype.deleteParam = function(key) {\n  delete this.queryData_[key];\n};\n\n\n/**\n * Delete a param int the fragment of the location's URI.\n * @param {string} key Param key.\n * @export\n */\nexports.prototype.deleteFragmentParam = function(key) {\n  delete this.fragment_[key];\n};\n\n\n/**\n * Refresh the the location's URI.\n * @export\n */\nexports.prototype.refresh = function() {\n  exports.replaceState(this.history_, this.getUriString());\n};\n\n\n/**\n * Set a new path for this location.\n * @param {string} path Path.\n * @export\n */\nexports.prototype.setPath = function(path) {\n  this.path_ = path;\n};\n\n\n/**\n * The factory creating the ngeo Location service.\n *\n * @param {angular.Scope} $rootScope The root scope.\n * @param {angular.$window} $window Angular window service.\n * @return {ngeo.statemanager.Location} The ngeo location service.\n * @ngInject\n */\nexports.LocationFactory = function($rootScope, $window) {\n  const history = $window.history;\n  const service = new exports($window.location, $window.history);\n\n  let lastUri = service.getUriString();\n  $rootScope.$watch(() => {\n    const newUri = service.getUriString();\n    if (lastUri !== newUri) {\n      $rootScope.$evalAsync(() => {\n        lastUri = newUri;\n        if (history !== undefined && history.replaceState !== undefined) {\n          exports.replaceState(history, newUri);\n        }\n        $rootScope.$broadcast('ngeoLocationChange');\n      });\n    }\n  });\n\n  return service;\n};\n\n/**\n * A function that changes Angular's $location provider to avoid problem\n * when both ngeoLocation and $location are used in an application. This\n * is how you can use that function in an application:\n *\n * app.module.config(ngeo.statemanager.Location.MockProvider);\n *\n * @param {angular.$locationProvider} $locationProvider Angular location\n *     provider.\n * @ngInject\n */\nexports.MockProvider = function($locationProvider) {\n  /**\n   * @return {angular.$location} Mock object for Angular location service.\n   */\n  $locationProvider['$get'] = function() {\n    const locationMock = /** @type {angular.$location} */ ({\n      /**\n       * @return {string} Absolute URL.\n       */\n      absUrl() {\n        return '';\n      },\n      /**\n       * @param {string=} opt_path Path.\n       * @return {string} Hash.\n       */\n      hash(opt_path) {\n        return opt_path !== undefined ? this : '';\n      },\n      /**\n       * @return {string} Host.\n       */\n      host() {\n        return '';\n      },\n      /**\n       * @param {string=} opt_path Path.\n       * @return {string} Path.\n       */\n      path(opt_path) {\n        return opt_path !== undefined ? this : '';\n      },\n      /**\n       * @return {number} Port.\n       */\n      port() {\n        return 0;\n      },\n      /**\n       * @return {string} Protocol.\n       */\n      protocol() {\n        return '';\n      },\n      replace() {\n      },\n      /**\n       * @param {string=} opt_search Search.\n       * @param {Object=} opt_paramValue Parameters.\n       * @return {Object} Search.\n       */\n      search(opt_search, opt_paramValue) {\n        return opt_search !== undefined ? this : {};\n      },\n      /**\n       * @param {string=} opt_url URL.\n       * @return {string} URL.\n       */\n      url(opt_url) {\n        return '';\n      }\n    });\n    return locationMock;\n  };\n};\n\n\n/**\n * @type {!angular.Module}\n * FIXME add utils dependencies.\n * FIXME What about Mockup provider ?\n */\nexports.module = angular.module('ngeoLocation', []);\nexports.module.factory('ngeoLocation', exports.LocationFactory);\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/statemanager/Location.js","/**\n * @module ol/format/GML3\n */\nimport {inherits} from '../index.js';\nimport {extend} from '../array.js';\nimport {createOrUpdate} from '../extent.js';\nimport {transformWithOptions} from '../format/Feature.js';\nimport GMLBase from '../format/GMLBase.js';\nimport XSD from '../format/XSD.js';\nimport Geometry from '../geom/Geometry.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection, transformExtent} from '../proj.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @constructor\n * @param {olx.format.GMLOptions=} opt_options\n *     Optional configuration object.\n * @extends {ol.format.GMLBase}\n * @api\n */\nconst GML3 = function(opt_options) {\n  const options = /** @type {olx.format.GMLOptions} */\n      (opt_options ? opt_options : {});\n\n  GMLBase.call(this, options);\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.surface_ = options.surface !== undefined ? options.surface : false;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.curve_ = options.curve !== undefined ? options.curve : false;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.multiCurve_ = options.multiCurve !== undefined ?\n    options.multiCurve : true;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.multiSurface_ = options.multiSurface !== undefined ?\n    options.multiSurface : true;\n\n  /**\n   * @inheritDoc\n   */\n  this.schemaLocation = options.schemaLocation ?\n    options.schemaLocation : GML3.schemaLocation_;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.hasZ = options.hasZ !== undefined ?\n    options.hasZ : false;\n\n};\n\ninherits(GML3, GMLBase);\n\n\n/**\n * @const\n * @type {string}\n * @private\n */\nGML3.schemaLocation_ = GMLBase.GMLNS +\n    ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +\n    '1.0.0/gmlsf.xsd';\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {ol.geom.MultiLineString|undefined} MultiLineString.\n */\nGML3.prototype.readMultiCurve_ = function(node, objectStack) {\n  /** @type {Array.<ol.geom.LineString>} */\n  const lineStrings = _ol_xml_.pushParseAndPop([],\n    this.MULTICURVE_PARSERS_, node, objectStack, this);\n  if (lineStrings) {\n    const multiLineString = new MultiLineString(null);\n    multiLineString.setLineStrings(lineStrings);\n    return multiLineString;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {ol.geom.MultiPolygon|undefined} MultiPolygon.\n */\nGML3.prototype.readMultiSurface_ = function(node, objectStack) {\n  /** @type {Array.<ol.geom.Polygon>} */\n  const polygons = _ol_xml_.pushParseAndPop([],\n    this.MULTISURFACE_PARSERS_, node, objectStack, this);\n  if (polygons) {\n    const multiPolygon = new MultiPolygon(null);\n    multiPolygon.setPolygons(polygons);\n    return multiPolygon;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML3.prototype.curveMemberParser_ = function(node, objectStack) {\n  _ol_xml_.parseNode(this.CURVEMEMBER_PARSERS_, node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML3.prototype.surfaceMemberParser_ = function(node, objectStack) {\n  _ol_xml_.parseNode(this.SURFACEMEMBER_PARSERS_,\n    node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<(Array.<number>)>|undefined} flat coordinates.\n */\nGML3.prototype.readPatch_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop([null],\n    this.PATCHES_PARSERS_, node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} flat coordinates.\n */\nGML3.prototype.readSegment_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop([null],\n    this.SEGMENTS_PARSERS_, node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<(Array.<number>)>|undefined} flat coordinates.\n */\nGML3.prototype.readPolygonPatch_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop([null],\n    this.FLAT_LINEAR_RINGS_PARSERS_, node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} flat coordinates.\n */\nGML3.prototype.readLineStringSegment_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop([null],\n    this.GEOMETRY_FLAT_COORDINATES_PARSERS_,\n    node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML3.prototype.interiorParser_ = function(node, objectStack) {\n  /** @type {Array.<number>|undefined} */\n  const flatLinearRing = _ol_xml_.pushParseAndPop(undefined,\n    this.RING_PARSERS, node, objectStack, this);\n  if (flatLinearRing) {\n    const flatLinearRings = /** @type {Array.<Array.<number>>} */\n        (objectStack[objectStack.length - 1]);\n    flatLinearRings.push(flatLinearRing);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML3.prototype.exteriorParser_ = function(node, objectStack) {\n  /** @type {Array.<number>|undefined} */\n  const flatLinearRing = _ol_xml_.pushParseAndPop(undefined,\n    this.RING_PARSERS, node, objectStack, this);\n  if (flatLinearRing) {\n    const flatLinearRings = /** @type {Array.<Array.<number>>} */\n        (objectStack[objectStack.length - 1]);\n    flatLinearRings[0] = flatLinearRing;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {ol.geom.Polygon|undefined} Polygon.\n */\nGML3.prototype.readSurface_ = function(node, objectStack) {\n  /** @type {Array.<Array.<number>>} */\n  const flatLinearRings = _ol_xml_.pushParseAndPop([null],\n    this.SURFACE_PARSERS_, node, objectStack, this);\n  if (flatLinearRings && flatLinearRings[0]) {\n    const polygon = new Polygon(null);\n    const flatCoordinates = flatLinearRings[0];\n    const ends = [flatCoordinates.length];\n    let i, ii;\n    for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n      extend(flatCoordinates, flatLinearRings[i]);\n      ends.push(flatCoordinates.length);\n    }\n    polygon.setFlatCoordinates(\n      GeometryLayout.XYZ, flatCoordinates, ends);\n    return polygon;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {ol.geom.LineString|undefined} LineString.\n */\nGML3.prototype.readCurve_ = function(node, objectStack) {\n  /** @type {Array.<number>} */\n  const flatCoordinates = _ol_xml_.pushParseAndPop([null],\n    this.CURVE_PARSERS_, node, objectStack, this);\n  if (flatCoordinates) {\n    const lineString = new LineString(null);\n    lineString.setFlatCoordinates(GeometryLayout.XYZ, flatCoordinates);\n    return lineString;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {ol.Extent|undefined} Envelope.\n */\nGML3.prototype.readEnvelope_ = function(node, objectStack) {\n  /** @type {Array.<number>} */\n  const flatCoordinates = _ol_xml_.pushParseAndPop([null],\n    this.ENVELOPE_PARSERS_, node, objectStack, this);\n  return createOrUpdate(flatCoordinates[1][0],\n    flatCoordinates[1][1], flatCoordinates[2][0],\n    flatCoordinates[2][1]);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} Flat coordinates.\n */\nGML3.prototype.readFlatPos_ = function(node, objectStack) {\n  let s = _ol_xml_.getAllTextContent(node, false);\n  const re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n  /** @type {Array.<number>} */\n  const flatCoordinates = [];\n  let m;\n  while ((m = re.exec(s))) {\n    flatCoordinates.push(parseFloat(m[1]));\n    s = s.substr(m[0].length);\n  }\n  if (s !== '') {\n    return undefined;\n  }\n  const context = objectStack[0];\n  const containerSrs = context['srsName'];\n  let axisOrientation = 'enu';\n  if (containerSrs) {\n    const proj = getProjection(containerSrs);\n    axisOrientation = proj.getAxisOrientation();\n  }\n  if (axisOrientation === 'neu') {\n    let i, ii;\n    for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n      const y = flatCoordinates[i];\n      const x = flatCoordinates[i + 1];\n      flatCoordinates[i] = x;\n      flatCoordinates[i + 1] = y;\n    }\n  }\n  const len = flatCoordinates.length;\n  if (len == 2) {\n    flatCoordinates.push(0);\n  }\n  if (len === 0) {\n    return undefined;\n  }\n  return flatCoordinates;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} Flat coordinates.\n */\nGML3.prototype.readFlatPosList_ = function(node, objectStack) {\n  const s = _ol_xml_.getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n  const context = objectStack[0];\n  const containerSrs = context['srsName'];\n  const contextDimension = context['srsDimension'];\n  let axisOrientation = 'enu';\n  if (containerSrs) {\n    const proj = getProjection(containerSrs);\n    axisOrientation = proj.getAxisOrientation();\n  }\n  const coords = s.split(/\\s+/);\n  // The \"dimension\" attribute is from the GML 3.0.1 spec.\n  let dim = 2;\n  if (node.getAttribute('srsDimension')) {\n    dim = XSD.readNonNegativeIntegerString(\n      node.getAttribute('srsDimension'));\n  } else if (node.getAttribute('dimension')) {\n    dim = XSD.readNonNegativeIntegerString(\n      node.getAttribute('dimension'));\n  } else if (node.parentNode.getAttribute('srsDimension')) {\n    dim = XSD.readNonNegativeIntegerString(\n      node.parentNode.getAttribute('srsDimension'));\n  } else if (contextDimension) {\n    dim = XSD.readNonNegativeIntegerString(contextDimension);\n  }\n  let x, y, z;\n  const flatCoordinates = [];\n  for (let i = 0, ii = coords.length; i < ii; i += dim) {\n    x = parseFloat(coords[i]);\n    y = parseFloat(coords[i + 1]);\n    z = (dim === 3) ? parseFloat(coords[i + 2]) : 0;\n    if (axisOrientation.substr(0, 2) === 'en') {\n      flatCoordinates.push(x, y, z);\n    } else {\n      flatCoordinates.push(y, x, z);\n    }\n  }\n  return flatCoordinates;\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'pos': _ol_xml_.makeReplacer(GML3.prototype.readFlatPos_),\n    'posList': _ol_xml_.makeReplacer(GML3.prototype.readFlatPosList_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'interior': GML3.prototype.interiorParser_,\n    'exterior': GML3.prototype.exteriorParser_\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.GEOMETRY_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Point': _ol_xml_.makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readMultiPoint),\n    'LineString': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readLineString),\n    'MultiLineString': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readMultiLineString),\n    'LinearRing': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readLinearRing),\n    'Polygon': _ol_xml_.makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readMultiPolygon),\n    'Surface': _ol_xml_.makeReplacer(GML3.prototype.readSurface_),\n    'MultiSurface': _ol_xml_.makeReplacer(\n      GML3.prototype.readMultiSurface_),\n    'Curve': _ol_xml_.makeReplacer(GML3.prototype.readCurve_),\n    'MultiCurve': _ol_xml_.makeReplacer(\n      GML3.prototype.readMultiCurve_),\n    'Envelope': _ol_xml_.makeReplacer(GML3.prototype.readEnvelope_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.MULTICURVE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'curveMember': _ol_xml_.makeArrayPusher(\n      GML3.prototype.curveMemberParser_),\n    'curveMembers': _ol_xml_.makeArrayPusher(\n      GML3.prototype.curveMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.MULTISURFACE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': _ol_xml_.makeArrayPusher(\n      GML3.prototype.surfaceMemberParser_),\n    'surfaceMembers': _ol_xml_.makeArrayPusher(\n      GML3.prototype.surfaceMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.CURVEMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineString': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.readLineString),\n    'Curve': _ol_xml_.makeArrayPusher(GML3.prototype.readCurve_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.SURFACEMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Polygon': _ol_xml_.makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': _ol_xml_.makeArrayPusher(GML3.prototype.readSurface_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.SURFACE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'patches': _ol_xml_.makeReplacer(GML3.prototype.readPatch_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.CURVE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'segments': _ol_xml_.makeReplacer(GML3.prototype.readSegment_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.ENVELOPE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': _ol_xml_.makeArrayPusher(\n      GML3.prototype.readFlatPosList_),\n    'upperCorner': _ol_xml_.makeArrayPusher(\n      GML3.prototype.readFlatPosList_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.PATCHES_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'PolygonPatch': _ol_xml_.makeReplacer(\n      GML3.prototype.readPolygonPatch_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.SEGMENTS_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineStringSegment': _ol_xml_.makeReplacer(\n      GML3.prototype.readLineStringSegment_)\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Point} value Point geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writePos_ = function(node, value, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsDimension = hasZ ? 3 : 2;\n  node.setAttribute('srsDimension', srsDimension);\n  const srsName = context['srsName'];\n  let axisOrientation = 'enu';\n  if (srsName) {\n    axisOrientation = getProjection(srsName).getAxisOrientation();\n  }\n  const point = value.getCoordinates();\n  let coords;\n  // only 2d for simple features profile\n  if (axisOrientation.substr(0, 2) === 'en') {\n    coords = (point[0] + ' ' + point[1]);\n  } else {\n    coords = (point[1] + ' ' + point[0]);\n  }\n  if (hasZ) {\n    // For newly created points, Z can be undefined.\n    const z = point[2] || 0;\n    coords += ' ' + z;\n  }\n  XSD.writeStringTextNode(node, coords);\n};\n\n\n/**\n * @param {Array.<number>} point Point geometry.\n * @param {string=} opt_srsName Optional srsName\n * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.\n * @return {string} The coords string.\n * @private\n */\nGML3.prototype.getCoords_ = function(point, opt_srsName, opt_hasZ) {\n  let axisOrientation = 'enu';\n  if (opt_srsName) {\n    axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n  }\n  let coords = ((axisOrientation.substr(0, 2) === 'en') ?\n    point[0] + ' ' + point[1] :\n    point[1] + ' ' + point[0]);\n  if (opt_hasZ) {\n    // For newly created points, Z can be undefined.\n    const z = point[2] || 0;\n    coords += ' ' + z;\n  }\n\n  return coords;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString|ol.geom.LinearRing} value Geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writePosList_ = function(node, value, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsDimension = hasZ ? 3 : 2;\n  node.setAttribute('srsDimension', srsDimension);\n  const srsName = context['srsName'];\n  // only 2d for simple features profile\n  const points = value.getCoordinates();\n  const len = points.length;\n  const parts = new Array(len);\n  let point;\n  for (let i = 0; i < len; ++i) {\n    point = points[i];\n    parts[i] = this.getCoords_(point, srsName, hasZ);\n  }\n  XSD.writeStringTextNode(node, parts.join(' '));\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Point} geometry Point geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writePoint_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const pos = _ol_xml_.createElementNS(node.namespaceURI, 'pos');\n  node.appendChild(pos);\n  this.writePos_(pos, geometry, objectStack);\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML3.ENVELOPE_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': _ol_xml_.makeChildAppender(XSD.writeStringTextNode),\n    'upperCorner': _ol_xml_.makeChildAppender(XSD.writeStringTextNode)\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Extent} extent Extent.\n * @param {Array.<*>} objectStack Node stack.\n */\nGML3.prototype.writeEnvelope = function(node, extent, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const keys = ['lowerCorner', 'upperCorner'];\n  const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    ({node: node}), GML3.ENVELOPE_SERIALIZERS_,\n    _ol_xml_.OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack, keys, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LinearRing} geometry LinearRing geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeLinearRing_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const posList = _ol_xml_.createElementNS(node.namespaceURI, 'posList');\n  node.appendChild(posList);\n  this.writePosList_(posList, geometry, objectStack);\n};\n\n\n/**\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node} Node.\n * @private\n */\nGML3.prototype.RING_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const context = objectStack[objectStack.length - 1];\n  const parentNode = context.node;\n  const exteriorWritten = context['exteriorWritten'];\n  if (exteriorWritten === undefined) {\n    context['exteriorWritten'] = true;\n  }\n  return _ol_xml_.createElementNS(parentNode.namespaceURI,\n    exteriorWritten !== undefined ? 'interior' : 'exterior');\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Polygon} geometry Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeSurfaceOrPolygon_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  if (node.nodeName !== 'PolygonPatch' && srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n    const rings = geometry.getLinearRings();\n    _ol_xml_.pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName},\n      GML3.RING_SERIALIZERS_,\n      this.RING_NODE_FACTORY_,\n      rings, objectStack, undefined, this);\n  } else if (node.nodeName === 'Surface') {\n    const patches = _ol_xml_.createElementNS(node.namespaceURI, 'patches');\n    node.appendChild(patches);\n    this.writeSurfacePatches_(\n      patches, geometry, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString} geometry LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeCurveOrLineString_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (node.nodeName !== 'LineStringSegment' && srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (node.nodeName === 'LineString' ||\n      node.nodeName === 'LineStringSegment') {\n    const posList = _ol_xml_.createElementNS(node.namespaceURI, 'posList');\n    node.appendChild(posList);\n    this.writePosList_(posList, geometry, objectStack);\n  } else if (node.nodeName === 'Curve') {\n    const segments = _ol_xml_.createElementNS(node.namespaceURI, 'segments');\n    node.appendChild(segments);\n    this.writeCurveSegments_(segments,\n      geometry, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.MultiPolygon} geometry MultiPolygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeMultiSurfaceOrPolygon_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  const surface = context['surface'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const polygons = geometry.getPolygons();\n  _ol_xml_.pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n    GML3.SURFACEORPOLYGONMEMBER_SERIALIZERS_,\n    this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.MultiPoint} geometry MultiPoint geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeMultiPoint_ = function(node, geometry,\n  objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  const hasZ = context['hasZ'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const points = geometry.getPoints();\n  _ol_xml_.pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName},\n    GML3.POINTMEMBER_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('pointMember'), points,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.MultiLineString} geometry MultiLineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeMultiCurveOrLineString_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  const curve = context['curve'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const lines = geometry.getLineStrings();\n  _ol_xml_.pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n    GML3.LINESTRINGORCURVEMEMBER_SERIALIZERS_,\n    this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LinearRing} ring LinearRing geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeRing_ = function(node, ring, objectStack) {\n  const linearRing = _ol_xml_.createElementNS(node.namespaceURI, 'LinearRing');\n  node.appendChild(linearRing);\n  this.writeLinearRing_(linearRing, ring, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Polygon} polygon Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeSurfaceOrPolygonMember_ = function(node, polygon, objectStack) {\n  const child = this.GEOMETRY_NODE_FACTORY_(\n    polygon, objectStack);\n  if (child) {\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Point} point Point geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writePointMember_ = function(node, point, objectStack) {\n  const child = _ol_xml_.createElementNS(node.namespaceURI, 'Point');\n  node.appendChild(child);\n  this.writePoint_(child, point, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString} line LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeLineStringOrCurveMember_ = function(node, line, objectStack) {\n  const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n  if (child) {\n    node.appendChild(child);\n    this.writeCurveOrLineString_(child, line, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Polygon} polygon Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeSurfacePatches_ = function(node, polygon, objectStack) {\n  const child = _ol_xml_.createElementNS(node.namespaceURI, 'PolygonPatch');\n  node.appendChild(child);\n  this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString} line LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeCurveSegments_ = function(node, line, objectStack) {\n  const child = _ol_xml_.createElementNS(node.namespaceURI,\n    'LineStringSegment');\n  node.appendChild(child);\n  this.writeCurveOrLineString_(child, line, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Geometry|ol.Extent} geometry Geometry.\n * @param {Array.<*>} objectStack Node stack.\n */\nGML3.prototype.writeGeometryElement = function(node, geometry, objectStack) {\n  const context = /** @type {olx.format.WriteOptions} */ (objectStack[objectStack.length - 1]);\n  const item = assign({}, context);\n  item.node = node;\n  let value;\n  if (Array.isArray(geometry)) {\n    if (context.dataProjection) {\n      value = transformExtent(\n        geometry, context.featureProjection, context.dataProjection);\n    } else {\n      value = geometry;\n    }\n  } else {\n    value = transformWithOptions(/** @type {ol.geom.Geometry} */ (geometry), true, context);\n  }\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    (item), GML3.GEOMETRY_SERIALIZERS_,\n    this.GEOMETRY_NODE_FACTORY_, [value],\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Feature} feature Feature.\n * @param {Array.<*>} objectStack Node stack.\n */\nGML3.prototype.writeFeatureElement = function(node, feature, objectStack) {\n  const fid = feature.getId();\n  if (fid) {\n    node.setAttribute('fid', fid);\n  }\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const featureNS = context['featureNS'];\n  const geometryName = feature.getGeometryName();\n  if (!context.serializers) {\n    context.serializers = {};\n    context.serializers[featureNS] = {};\n  }\n  const properties = feature.getProperties();\n  const keys = [];\n  const values = [];\n  for (const key in properties) {\n    const value = properties[key];\n    if (value !== null) {\n      keys.push(key);\n      values.push(value);\n      if (key == geometryName || value instanceof Geometry) {\n        if (!(key in context.serializers[featureNS])) {\n          context.serializers[featureNS][key] = _ol_xml_.makeChildAppender(\n            this.writeGeometryElement, this);\n        }\n      } else {\n        if (!(key in context.serializers[featureNS])) {\n          context.serializers[featureNS][key] = _ol_xml_.makeChildAppender(\n            XSD.writeStringTextNode);\n        }\n      }\n    }\n  }\n  const item = assign({}, context);\n  item.node = node;\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    (item), context.serializers,\n    _ol_xml_.makeSimpleNodeFactory(undefined, featureNS),\n    values,\n    objectStack, keys);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<ol.Feature>} features Features.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeFeatureMembers_ = function(node, features, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const featureType = context['featureType'];\n  const featureNS = context['featureNS'];\n  const serializers = {};\n  serializers[featureNS] = {};\n  serializers[featureNS][featureType] = _ol_xml_.makeChildAppender(\n    this.writeFeatureElement, this);\n  const item = assign({}, context);\n  item.node = node;\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    (item),\n    serializers,\n    _ol_xml_.makeSimpleNodeFactory(featureType, featureNS), features,\n    objectStack);\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML3.SURFACEORPOLYGONMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember_),\n    'polygonMember': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML3.POINTMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'pointMember': _ol_xml_.makeChildAppender(\n      GML3.prototype.writePointMember_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML3.LINESTRINGORCURVEMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember_),\n    'curveMember': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML3.RING_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'exterior': _ol_xml_.makeChildAppender(GML3.prototype.writeRing_),\n    'interior': _ol_xml_.makeChildAppender(GML3.prototype.writeRing_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML3.GEOMETRY_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'Curve': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeCurveOrLineString_),\n    'MultiCurve': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString_),\n    'Point': _ol_xml_.makeChildAppender(GML3.prototype.writePoint_),\n    'MultiPoint': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeMultiPoint_),\n    'LineString': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeCurveOrLineString_),\n    'MultiLineString': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString_),\n    'LinearRing': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeLinearRing_),\n    'Polygon': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygon_),\n    'MultiPolygon': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon_),\n    'Surface': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygon_),\n    'MultiSurface': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon_),\n    'Envelope': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeEnvelope)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, string>}\n * @private\n */\nGML3.MULTIGEOMETRY_TO_MEMBER_NODENAME_ = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node|undefined} Node.\n * @private\n */\nGML3.prototype.MULTIGEOMETRY_MEMBER_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const parentNode = objectStack[objectStack.length - 1].node;\n  return _ol_xml_.createElementNS('http://www.opengis.net/gml',\n    GML3.MULTIGEOMETRY_TO_MEMBER_NODENAME_[parentNode.nodeName]);\n};\n\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node|undefined} Node.\n * @private\n */\nGML3.prototype.GEOMETRY_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const context = objectStack[objectStack.length - 1];\n  const multiSurface = context['multiSurface'];\n  const surface = context['surface'];\n  const curve = context['curve'];\n  const multiCurve = context['multiCurve'];\n  let nodeName;\n  if (!Array.isArray(value)) {\n    nodeName = /** @type {ol.geom.Geometry} */ (value).getType();\n    if (nodeName === 'MultiPolygon' && multiSurface === true) {\n      nodeName = 'MultiSurface';\n    } else if (nodeName === 'Polygon' && surface === true) {\n      nodeName = 'Surface';\n    } else if (nodeName === 'LineString' && curve === true) {\n      nodeName = 'Curve';\n    } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n      nodeName = 'MultiCurve';\n    }\n  } else {\n    nodeName = 'Envelope';\n  }\n  return _ol_xml_.createElementNS('http://www.opengis.net/gml',\n    nodeName);\n};\n\n\n/**\n * Encode a geometry in GML 3.1.1 Simple Features.\n *\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Options.\n * @return {Node} Node.\n * @override\n * @api\n */\nGML3.prototype.writeGeometryNode = function(geometry, opt_options) {\n  opt_options = this.adaptOptions(opt_options);\n  const geom = _ol_xml_.createElementNS('http://www.opengis.net/gml', 'geom');\n  const context = {node: geom, hasZ: this.hasZ, srsName: this.srsName,\n    curve: this.curve_, surface: this.surface_,\n    multiSurface: this.multiSurface_, multiCurve: this.multiCurve_};\n  if (opt_options) {\n    assign(context, opt_options);\n  }\n  this.writeGeometryElement(geom, geometry, [context]);\n  return geom;\n};\n\n\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Options.\n * @return {string} Result.\n * @api\n */\nGML3.prototype.writeFeatures;\n\n\n/**\n * Encode an array of features in the GML 3.1.1 format as an XML node.\n *\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Options.\n * @return {Node} Node.\n * @override\n * @api\n */\nGML3.prototype.writeFeaturesNode = function(features, opt_options) {\n  opt_options = this.adaptOptions(opt_options);\n  const node = _ol_xml_.createElementNS('http://www.opengis.net/gml',\n    'featureMembers');\n  _ol_xml_.setAttributeNS(node, 'http://www.w3.org/2001/XMLSchema-instance',\n    'xsi:schemaLocation', this.schemaLocation);\n  const context = {\n    srsName: this.srsName,\n    hasZ: this.hasZ,\n    curve: this.curve_,\n    surface: this.surface_,\n    multiSurface: this.multiSurface_,\n    multiCurve: this.multiCurve_,\n    featureNS: this.featureNS,\n    featureType: this.featureType\n  };\n  if (opt_options) {\n    assign(context, opt_options);\n  }\n  this.writeFeatureMembers_(node, features, [context]);\n  return node;\n};\nexport default GML3;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/GML3.js\n// module id = 65\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22","/**\n * @module ol/geom/GeometryCollection\n */\nimport {inherits} from '../index.js';\nimport _ol_events_ from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {createOrUpdateEmpty, closestSquaredDistanceXY, extend, getCenter} from '../extent.js';\nimport Geometry from '../geom/Geometry.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport {clear} from '../obj.js';\n\n/**\n * @classdesc\n * An array of {@link ol.geom.Geometry} objects.\n *\n * @constructor\n * @extends {ol.geom.Geometry}\n * @param {Array.<ol.geom.Geometry>=} opt_geometries Geometries.\n * @api\n */\nconst GeometryCollection = function(opt_geometries) {\n\n  Geometry.call(this);\n\n  /**\n   * @private\n   * @type {Array.<ol.geom.Geometry>}\n   */\n  this.geometries_ = opt_geometries ? opt_geometries : null;\n\n  this.listenGeometriesChange_();\n};\n\ninherits(GeometryCollection, Geometry);\n\n\n/**\n * @param {Array.<ol.geom.Geometry>} geometries Geometries.\n * @private\n * @return {Array.<ol.geom.Geometry>} Cloned geometries.\n */\nGeometryCollection.cloneGeometries_ = function(geometries) {\n  const clonedGeometries = [];\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    clonedGeometries.push(geometries[i].clone());\n  }\n  return clonedGeometries;\n};\n\n\n/**\n * @private\n */\nGeometryCollection.prototype.unlistenGeometriesChange_ = function() {\n  let i, ii;\n  if (!this.geometries_) {\n    return;\n  }\n  for (i = 0, ii = this.geometries_.length; i < ii; ++i) {\n    _ol_events_.unlisten(\n      this.geometries_[i], EventType.CHANGE,\n      this.changed, this);\n  }\n};\n\n\n/**\n * @private\n */\nGeometryCollection.prototype.listenGeometriesChange_ = function() {\n  let i, ii;\n  if (!this.geometries_) {\n    return;\n  }\n  for (i = 0, ii = this.geometries_.length; i < ii; ++i) {\n    _ol_events_.listen(\n      this.geometries_[i], EventType.CHANGE,\n      this.changed, this);\n  }\n};\n\n\n/**\n * Make a complete copy of the geometry.\n * @return {!ol.geom.GeometryCollection} Clone.\n * @override\n * @api\n */\nGeometryCollection.prototype.clone = function() {\n  const geometryCollection = new GeometryCollection(null);\n  geometryCollection.setGeometries(this.geometries_);\n  return geometryCollection;\n};\n\n\n/**\n * @inheritDoc\n */\nGeometryCollection.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {\n  if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n    return minSquaredDistance;\n  }\n  const geometries = this.geometries_;\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    minSquaredDistance = geometries[i].closestPointXY(\n      x, y, closestPoint, minSquaredDistance);\n  }\n  return minSquaredDistance;\n};\n\n\n/**\n * @inheritDoc\n */\nGeometryCollection.prototype.containsXY = function(x, y) {\n  const geometries = this.geometries_;\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    if (geometries[i].containsXY(x, y)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * @inheritDoc\n */\nGeometryCollection.prototype.computeExtent = function(extent) {\n  createOrUpdateEmpty(extent);\n  const geometries = this.geometries_;\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    extend(extent, geometries[i].getExtent());\n  }\n  return extent;\n};\n\n\n/**\n * Return the geometries that make up this geometry collection.\n * @return {Array.<ol.geom.Geometry>} Geometries.\n * @api\n */\nGeometryCollection.prototype.getGeometries = function() {\n  return GeometryCollection.cloneGeometries_(this.geometries_);\n};\n\n\n/**\n * @return {Array.<ol.geom.Geometry>} Geometries.\n */\nGeometryCollection.prototype.getGeometriesArray = function() {\n  return this.geometries_;\n};\n\n\n/**\n * @inheritDoc\n */\nGeometryCollection.prototype.getSimplifiedGeometry = function(squaredTolerance) {\n  if (this.simplifiedGeometryRevision != this.getRevision()) {\n    clear(this.simplifiedGeometryCache);\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n    this.simplifiedGeometryRevision = this.getRevision();\n  }\n  if (squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n       squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)) {\n    return this;\n  }\n  const key = squaredTolerance.toString();\n  if (this.simplifiedGeometryCache.hasOwnProperty(key)) {\n    return this.simplifiedGeometryCache[key];\n  } else {\n    const simplifiedGeometries = [];\n    const geometries = this.geometries_;\n    let simplified = false;\n    let i, ii;\n    for (i = 0, ii = geometries.length; i < ii; ++i) {\n      const geometry = geometries[i];\n      const simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);\n      simplifiedGeometries.push(simplifiedGeometry);\n      if (simplifiedGeometry !== geometry) {\n        simplified = true;\n      }\n    }\n    if (simplified) {\n      const simplifiedGeometryCollection = new GeometryCollection(null);\n      simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n      this.simplifiedGeometryCache[key] = simplifiedGeometryCollection;\n      return simplifiedGeometryCollection;\n    } else {\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n      return this;\n    }\n  }\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nGeometryCollection.prototype.getType = function() {\n  return GeometryType.GEOMETRY_COLLECTION;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nGeometryCollection.prototype.intersectsExtent = function(extent) {\n  const geometries = this.geometries_;\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    if (geometries[i].intersectsExtent(extent)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * @return {boolean} Is empty.\n */\nGeometryCollection.prototype.isEmpty = function() {\n  return this.geometries_.length === 0;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nGeometryCollection.prototype.rotate = function(angle, anchor) {\n  const geometries = this.geometries_;\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    geometries[i].rotate(angle, anchor);\n  }\n  this.changed();\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nGeometryCollection.prototype.scale = function(sx, opt_sy, opt_anchor) {\n  let anchor = opt_anchor;\n  if (!anchor) {\n    anchor = getCenter(this.getExtent());\n  }\n  const geometries = this.geometries_;\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    geometries[i].scale(sx, opt_sy, anchor);\n  }\n  this.changed();\n};\n\n\n/**\n * Set the geometries that make up this geometry collection.\n * @param {Array.<ol.geom.Geometry>} geometries Geometries.\n * @api\n */\nGeometryCollection.prototype.setGeometries = function(geometries) {\n  this.setGeometriesArray(\n    GeometryCollection.cloneGeometries_(geometries));\n};\n\n\n/**\n * @param {Array.<ol.geom.Geometry>} geometries Geometries.\n */\nGeometryCollection.prototype.setGeometriesArray = function(geometries) {\n  this.unlistenGeometriesChange_();\n  this.geometries_ = geometries;\n  this.listenGeometriesChange_();\n  this.changed();\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nGeometryCollection.prototype.applyTransform = function(transformFn) {\n  const geometries = this.geometries_;\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    geometries[i].applyTransform(transformFn);\n  }\n  this.changed();\n};\n\n\n/**\n * Translate the geometry.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @override\n * @api\n */\nGeometryCollection.prototype.translate = function(deltaX, deltaY) {\n  const geometries = this.geometries_;\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    geometries[i].translate(deltaX, deltaY);\n  }\n  this.changed();\n};\n\n\n/**\n * @inheritDoc\n */\nGeometryCollection.prototype.disposeInternal = function() {\n  this.unlistenGeometriesChange_();\n  Geometry.prototype.disposeInternal.call(this);\n};\nexport default GeometryCollection;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/geom/GeometryCollection.js\n// module id = 68\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 14 15 22","/**\n * @module ol/format/OWS\n */\nimport {inherits} from '../index.js';\nimport XLink from '../format/XLink.js';\nimport XML from '../format/XML.js';\nimport XSD from '../format/XSD.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @constructor\n * @extends {ol.format.XML}\n */\nconst OWS = function() {\n  XML.call(this);\n};\n\ninherits(OWS, XML);\n\n\n/**\n * @inheritDoc\n */\nOWS.prototype.readFromDocument = function(doc) {\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readFromNode(n);\n    }\n  }\n  return null;\n};\n\n\n/**\n * @inheritDoc\n */\nOWS.prototype.readFromNode = function(node) {\n  const owsObject = _ol_xml_.pushParseAndPop({},\n    OWS.PARSERS_, node, []);\n  return owsObject ? owsObject : null;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The address.\n */\nOWS.readAddress_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    OWS.ADDRESS_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The values.\n */\nOWS.readAllowedValues_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    OWS.ALLOWED_VALUES_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The constraint.\n */\nOWS.readConstraint_ = function(node, objectStack) {\n  const name = node.getAttribute('name');\n  if (!name) {\n    return undefined;\n  }\n  return _ol_xml_.pushParseAndPop({'name': name},\n    OWS.CONSTRAINT_PARSERS_, node,\n    objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The contact info.\n */\nOWS.readContactInfo_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    OWS.CONTACT_INFO_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The DCP.\n */\nOWS.readDcp_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    OWS.DCP_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The GET object.\n */\nOWS.readGet_ = function(node, objectStack) {\n  const href = XLink.readHref(node);\n  if (!href) {\n    return undefined;\n  }\n  return _ol_xml_.pushParseAndPop({'href': href},\n    OWS.REQUEST_METHOD_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The HTTP object.\n */\nOWS.readHttp_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({}, OWS.HTTP_PARSERS_,\n    node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The operation.\n */\nOWS.readOperation_ = function(node, objectStack) {\n  const name = node.getAttribute('name');\n  const value = _ol_xml_.pushParseAndPop({},\n    OWS.OPERATION_PARSERS_, node, objectStack);\n  if (!value) {\n    return undefined;\n  }\n  const object = /** @type {Object} */\n      (objectStack[objectStack.length - 1]);\n  object[name] = value;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The operations metadata.\n */\nOWS.readOperationsMetadata_ = function(node,\n  objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    OWS.OPERATIONS_METADATA_PARSERS_, node,\n    objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The phone.\n */\nOWS.readPhone_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    OWS.PHONE_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The service identification.\n */\nOWS.readServiceIdentification_ = function(node,\n  objectStack) {\n  return _ol_xml_.pushParseAndPop(\n    {}, OWS.SERVICE_IDENTIFICATION_PARSERS_, node,\n    objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The service contact.\n */\nOWS.readServiceContact_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop(\n    {}, OWS.SERVICE_CONTACT_PARSERS_, node,\n    objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The service provider.\n */\nOWS.readServiceProvider_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop(\n    {}, OWS.SERVICE_PROVIDER_PARSERS_, node,\n    objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {string|undefined} The value.\n */\nOWS.readValue_ = function(node, objectStack) {\n  return XSD.readString(node);\n};\n\n\n/**\n * @const\n * @type {Array.<string>}\n * @private\n */\nOWS.NAMESPACE_URIS_ = [\n  null,\n  'http://www.opengis.net/ows/1.1'\n];\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'ServiceIdentification': _ol_xml_.makeObjectPropertySetter(\n      OWS.readServiceIdentification_),\n    'ServiceProvider': _ol_xml_.makeObjectPropertySetter(\n      OWS.readServiceProvider_),\n    'OperationsMetadata': _ol_xml_.makeObjectPropertySetter(\n      OWS.readOperationsMetadata_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.ADDRESS_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'DeliveryPoint': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'City': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n    'AdministrativeArea': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'PostalCode': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n    'Country': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n    'ElectronicMailAddress': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.ALLOWED_VALUES_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'Value': _ol_xml_.makeObjectPropertyPusher(OWS.readValue_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.CONSTRAINT_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'AllowedValues': _ol_xml_.makeObjectPropertySetter(\n      OWS.readAllowedValues_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.CONTACT_INFO_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'Phone': _ol_xml_.makeObjectPropertySetter(OWS.readPhone_),\n    'Address': _ol_xml_.makeObjectPropertySetter(OWS.readAddress_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.DCP_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'HTTP': _ol_xml_.makeObjectPropertySetter(OWS.readHttp_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.HTTP_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'Get': _ol_xml_.makeObjectPropertyPusher(OWS.readGet_),\n    'Post': undefined // TODO\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.OPERATION_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'DCP': _ol_xml_.makeObjectPropertySetter(OWS.readDcp_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.OPERATIONS_METADATA_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'Operation': OWS.readOperation_\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.PHONE_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'Voice': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n    'Facsimile': _ol_xml_.makeObjectPropertySetter(XSD.readString)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.REQUEST_METHOD_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'Constraint': _ol_xml_.makeObjectPropertyPusher(\n      OWS.readConstraint_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.SERVICE_CONTACT_PARSERS_ =\n    _ol_xml_.makeStructureNS(\n      OWS.NAMESPACE_URIS_, {\n        'IndividualName': _ol_xml_.makeObjectPropertySetter(\n          XSD.readString),\n        'PositionName': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n        'ContactInfo': _ol_xml_.makeObjectPropertySetter(\n          OWS.readContactInfo_)\n      });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.SERVICE_IDENTIFICATION_PARSERS_ =\n    _ol_xml_.makeStructureNS(\n      OWS.NAMESPACE_URIS_, {\n        'Abstract': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n        'AccessConstraints': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n        'Fees': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n        'Title': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n        'ServiceTypeVersion': _ol_xml_.makeObjectPropertySetter(\n          XSD.readString),\n        'ServiceType': _ol_xml_.makeObjectPropertySetter(XSD.readString)\n      });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.SERVICE_PROVIDER_PARSERS_ =\n    _ol_xml_.makeStructureNS(\n      OWS.NAMESPACE_URIS_, {\n        'ProviderName': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n        'ProviderSite': _ol_xml_.makeObjectPropertySetter(XLink.readHref),\n        'ServiceContact': _ol_xml_.makeObjectPropertySetter(\n          OWS.readServiceContact_)\n      });\nexport default OWS;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/OWS.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/WMTSCapabilities\n */\nimport {inherits} from '../index.js';\nimport {boundingExtent} from '../extent.js';\nimport OWS from '../format/OWS.js';\nimport XLink from '../format/XLink.js';\nimport XML from '../format/XML.js';\nimport XSD from '../format/XSD.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Format for reading WMTS capabilities data.\n *\n * @constructor\n * @extends {ol.format.XML}\n * @api\n */\nconst WMTSCapabilities = function() {\n  XML.call(this);\n\n  /**\n   * @type {ol.format.OWS}\n   * @private\n   */\n  this.owsParser_ = new OWS();\n};\n\ninherits(WMTSCapabilities, XML);\n\n\n/**\n * Read a WMTS capabilities document.\n *\n * @function\n * @param {Document|Node|string} source The XML source.\n * @return {Object} An object representing the WMTS capabilities.\n * @api\n */\nWMTSCapabilities.prototype.read;\n\n\n/**\n * @inheritDoc\n */\nWMTSCapabilities.prototype.readFromDocument = function(doc) {\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readFromNode(n);\n    }\n  }\n  return null;\n};\n\n\n/**\n * @inheritDoc\n */\nWMTSCapabilities.prototype.readFromNode = function(node) {\n  const version = node.getAttribute('version').trim();\n  let WMTSCapabilityObject = this.owsParser_.readFromNode(node);\n  if (!WMTSCapabilityObject) {\n    return null;\n  }\n  WMTSCapabilityObject['version'] = version;\n  WMTSCapabilityObject = _ol_xml_.pushParseAndPop(WMTSCapabilityObject,\n    WMTSCapabilities.PARSERS_, node, []);\n  return WMTSCapabilityObject ? WMTSCapabilityObject : null;\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Attribution object.\n */\nWMTSCapabilities.readContents_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.CONTENTS_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Layers object.\n */\nWMTSCapabilities.readLayer_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.LAYER_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Tile Matrix Set object.\n */\nWMTSCapabilities.readTileMatrixSet_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.TMS_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Style object.\n */\nWMTSCapabilities.readStyle_ = function(node, objectStack) {\n  const style = _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.STYLE_PARSERS_, node, objectStack);\n  if (!style) {\n    return undefined;\n  }\n  const isDefault = node.getAttribute('isDefault') === 'true';\n  style['isDefault'] = isDefault;\n  return style;\n\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Tile Matrix Set Link object.\n */\nWMTSCapabilities.readTileMatrixSetLink_ = function(node,\n  objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.TMS_LINKS_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Dimension object.\n */\nWMTSCapabilities.readDimensions_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.DIMENSION_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Resource URL object.\n */\nWMTSCapabilities.readResourceUrl_ = function(node, objectStack) {\n  const format = node.getAttribute('format');\n  const template = node.getAttribute('template');\n  const resourceType = node.getAttribute('resourceType');\n  const resource = {};\n  if (format) {\n    resource['format'] = format;\n  }\n  if (template) {\n    resource['template'] = template;\n  }\n  if (resourceType) {\n    resource['resourceType'] = resourceType;\n  }\n  return resource;\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} WGS84 BBox object.\n */\nWMTSCapabilities.readWgs84BoundingBox_ = function(node, objectStack) {\n  const coordinates = _ol_xml_.pushParseAndPop([],\n    WMTSCapabilities.WGS84_BBOX_READERS_, node, objectStack);\n  if (coordinates.length != 2) {\n    return undefined;\n  }\n  return boundingExtent(coordinates);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Legend object.\n */\nWMTSCapabilities.readLegendUrl_ = function(node, objectStack) {\n  const legend = {};\n  legend['format'] = node.getAttribute('format');\n  legend['href'] = XLink.readHref(node);\n  return legend;\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Coordinates object.\n */\nWMTSCapabilities.readCoordinates_ = function(node, objectStack) {\n  const coordinates = XSD.readString(node).split(' ');\n  if (!coordinates || coordinates.length != 2) {\n    return undefined;\n  }\n  const x = +coordinates[0];\n  const y = +coordinates[1];\n  if (isNaN(x) || isNaN(y)) {\n    return undefined;\n  }\n  return [x, y];\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} TileMatrix object.\n */\nWMTSCapabilities.readTileMatrix_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.TM_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} TileMatrixSetLimits Object.\n */\nWMTSCapabilities.readTileMatrixLimitsList_ = function(node,\n  objectStack) {\n  return _ol_xml_.pushParseAndPop([],\n    WMTSCapabilities.TMS_LIMITS_LIST_PARSERS_, node,\n    objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} TileMatrixLimits Array.\n */\nWMTSCapabilities.readTileMatrixLimits_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.TMS_LIMITS_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @const\n * @private\n * @type {Array.<string>}\n */\nWMTSCapabilities.NAMESPACE_URIS_ = [\n  null,\n  'http://www.opengis.net/wmts/1.0'\n];\n\n\n/**\n * @const\n * @private\n * @type {Array.<string>}\n */\nWMTSCapabilities.OWS_NAMESPACE_URIS_ = [\n  null,\n  'http://www.opengis.net/ows/1.1'\n];\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'Contents': _ol_xml_.makeObjectPropertySetter(\n      WMTSCapabilities.readContents_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.CONTENTS_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'Layer': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readLayer_),\n    'TileMatrixSet': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readTileMatrixSet_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.LAYER_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'Style': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readStyle_),\n    'Format': _ol_xml_.makeObjectPropertyPusher(\n      XSD.readString),\n    'TileMatrixSetLink': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readTileMatrixSetLink_),\n    'Dimension': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readDimensions_),\n    'ResourceURL': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readResourceUrl_)\n  }, _ol_xml_.makeStructureNS(WMTSCapabilities.OWS_NAMESPACE_URIS_, {\n    'Title': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'Abstract': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'WGS84BoundingBox': _ol_xml_.makeObjectPropertySetter(\n      WMTSCapabilities.readWgs84BoundingBox_),\n    'Identifier': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString)\n  }));\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.STYLE_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'LegendURL': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readLegendUrl_)\n  }, _ol_xml_.makeStructureNS(WMTSCapabilities.OWS_NAMESPACE_URIS_, {\n    'Title': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'Identifier': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString)\n  }));\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.TMS_LINKS_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'TileMatrixSet': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'TileMatrixSetLimits': _ol_xml_.makeObjectPropertySetter(\n      WMTSCapabilities.readTileMatrixLimitsList_)\n  });\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.TMS_LIMITS_LIST_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'TileMatrixLimits': _ol_xml_.makeArrayPusher(\n      WMTSCapabilities.readTileMatrixLimits_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.TMS_LIMITS_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'TileMatrix': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'MinTileRow': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'MaxTileRow': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'MinTileCol': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'MaxTileCol': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.DIMENSION_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'Default': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'Value': _ol_xml_.makeObjectPropertyPusher(\n      XSD.readString)\n  }, _ol_xml_.makeStructureNS(WMTSCapabilities.OWS_NAMESPACE_URIS_, {\n    'Identifier': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString)\n  }));\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.WGS84_BBOX_READERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.OWS_NAMESPACE_URIS_, {\n    'LowerCorner': _ol_xml_.makeArrayPusher(\n      WMTSCapabilities.readCoordinates_),\n    'UpperCorner': _ol_xml_.makeArrayPusher(\n      WMTSCapabilities.readCoordinates_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.TMS_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'WellKnownScaleSet': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'TileMatrix': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readTileMatrix_)\n  }, _ol_xml_.makeStructureNS(WMTSCapabilities.OWS_NAMESPACE_URIS_, {\n    'SupportedCRS': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'Identifier': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString)\n  }));\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.TM_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'TopLeftCorner': _ol_xml_.makeObjectPropertySetter(\n      WMTSCapabilities.readCoordinates_),\n    'ScaleDenominator': _ol_xml_.makeObjectPropertySetter(\n      XSD.readDecimal),\n    'TileWidth': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'TileHeight': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'MatrixWidth': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'MatrixHeight': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger)\n  }, _ol_xml_.makeStructureNS(WMTSCapabilities.OWS_NAMESPACE_URIS_, {\n    'Identifier': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString)\n  }));\nexport default WMTSCapabilities;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/WMTSCapabilities.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Filter\n */\n\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature filters.\n *\n * @constructor\n * @abstract\n * @param {!string} tagName The XML tag name for this filter.\n * @struct\n */\nconst Filter = function(tagName) {\n\n  /**\n   * @private\n   * @type {!string}\n   */\n  this.tagName_ = tagName;\n};\n\n/**\n * The XML tag name for a filter.\n * @returns {!string} Name.\n */\nFilter.prototype.getTagName = function() {\n  return this.tagName_;\n};\n\nexport default Filter;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Filter.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/LogicalNary\n */\nimport {inherits} from '../../index.js';\nimport {assert} from '../../asserts.js';\nimport Filter from '../filter/Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature n-ary logical filters.\n *\n * @constructor\n * @abstract\n * @param {!string} tagName The XML tag name for this filter.\n * @param {...ol.format.filter.Filter} conditions Conditions.\n * @extends {ol.format.filter.Filter}\n */\nconst LogicalNary = function(tagName, conditions) {\n\n  Filter.call(this, tagName);\n\n  /**\n   * @public\n   * @type {Array.<ol.format.filter.Filter>}\n   */\n  this.conditions = Array.prototype.slice.call(arguments, 1);\n  assert(this.conditions.length >= 2, 57); // At least 2 conditions are required.\n};\n\ninherits(LogicalNary, Filter);\nexport default LogicalNary;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/LogicalNary.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/And\n */\nimport {inherits} from '../../index.js';\nimport LogicalNary from '../filter/LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<And>` operator between two or more filter conditions.\n *\n * @constructor\n * @abstract\n * @param {...ol.format.filter.Filter} conditions Conditions.\n * @extends {ol.format.filter.LogicalNary}\n */\nconst And = function(conditions) {\n  const params = ['And'].concat(Array.prototype.slice.call(arguments));\n  LogicalNary.apply(this, params);\n};\n\ninherits(And, LogicalNary);\n\nexport default And;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/And.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Bbox\n */\nimport {inherits} from '../../index.js';\nimport Filter from '../filter/Filter.js';\n\n/**\n * @classdesc\n * Represents a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @constructor\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.Extent} extent Extent.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @extends {ol.format.filter.Filter}\n * @api\n */\nconst Bbox = function(geometryName, extent, opt_srsName) {\n\n  Filter.call(this, 'BBOX');\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.geometryName = geometryName;\n\n  /**\n   * @public\n   * @type {ol.Extent}\n   */\n  this.extent = extent;\n\n  /**\n   * @public\n   * @type {string|undefined}\n   */\n  this.srsName = opt_srsName;\n};\n\ninherits(Bbox, Filter);\n\nexport default Bbox;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Bbox.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Spatial\n */\nimport {inherits} from '../../index.js';\nimport Filter from '../filter/Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Represents a spatial operator to test whether a geometry-valued property\n * relates to a given geometry.\n *\n * @constructor\n * @abstract\n * @param {!string} tagName The XML tag name for this filter.\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @extends {ol.format.filter.Filter}\n */\nconst Spatial = function(tagName, geometryName, geometry, opt_srsName) {\n\n  Filter.call(this, tagName);\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.geometryName = geometryName || 'the_geom';\n\n  /**\n   * @public\n   * @type {ol.geom.Geometry}\n   */\n  this.geometry = geometry;\n\n  /**\n   * @public\n   * @type {string|undefined}\n   */\n  this.srsName = opt_srsName;\n};\n\ninherits(Spatial, Filter);\n\nexport default Spatial;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Spatial.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Contains\n */\nimport {inherits} from '../../index.js';\nimport Spatial from '../filter/Spatial.js';\n\n/**\n * @classdesc\n * Represents a `<Contains>` operator to test whether a geometry-valued property\n * contains a given geometry.\n *\n * @constructor\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @extends {ol.format.filter.Spatial}\n * @api\n */\nconst Contains = function(geometryName, geometry, opt_srsName) {\n\n  Spatial.call(this, 'Contains', geometryName, geometry, opt_srsName);\n\n};\n\ninherits(Contains, Spatial);\nexport default Contains;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Contains.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Comparison\n */\nimport {inherits} from '../../index.js';\nimport Filter from '../filter/Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property comparison filters.\n *\n * @constructor\n * @abstract\n * @param {!string} tagName The XML tag name for this filter.\n * @param {!string} propertyName Name of the context property to compare.\n * @extends {ol.format.filter.Filter}\n */\nconst Comparison = function(tagName, propertyName) {\n\n  Filter.call(this, tagName);\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.propertyName = propertyName;\n};\n\ninherits(Comparison, Filter);\n\nexport default Comparison;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Comparison.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/During\n */\nimport {inherits} from '../../index.js';\nimport Comparison from '../filter/Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<During>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} begin The begin date in ISO-8601 format.\n * @param {!string} end The end date in ISO-8601 format.\n * @extends {ol.format.filter.Comparison}\n * @api\n */\nconst During = function(propertyName, begin, end) {\n  Comparison.call(this, 'During', propertyName);\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.begin = begin;\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.end = end;\n};\n\ninherits(During, Comparison);\nexport default During;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/During.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/ComparisonBinary\n */\nimport {inherits} from '../../index.js';\nimport Comparison from '../filter/Comparison.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property binary comparison filters.\n *\n * @constructor\n * @abstract\n * @param {!string} tagName The XML tag name for this filter.\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @extends {ol.format.filter.Comparison}\n */\nconst ComparisonBinary = function(tagName, propertyName, expression, opt_matchCase) {\n\n  Comparison.call(this, tagName, propertyName);\n\n  /**\n   * @public\n   * @type {!(string|number)}\n   */\n  this.expression = expression;\n\n  /**\n   * @public\n   * @type {boolean|undefined}\n   */\n  this.matchCase = opt_matchCase;\n};\n\ninherits(ComparisonBinary, Comparison);\nexport default ComparisonBinary;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/ComparisonBinary.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/EqualTo\n */\nimport {inherits} from '../../index.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsEqualTo>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @extends {ol.format.filter.ComparisonBinary}\n * @api\n */\nconst EqualTo = function(propertyName, expression, opt_matchCase) {\n  ComparisonBinary.call(this, 'PropertyIsEqualTo', propertyName, expression, opt_matchCase);\n};\n\ninherits(EqualTo, ComparisonBinary);\nexport default EqualTo;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/EqualTo.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/GreaterThan\n */\nimport {inherits} from '../../index.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsGreaterThan>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @extends {ol.format.filter.ComparisonBinary}\n * @api\n */\nconst GreaterThan = function(propertyName, expression) {\n  ComparisonBinary.call(this, 'PropertyIsGreaterThan', propertyName, expression);\n};\n\ninherits(GreaterThan, ComparisonBinary);\nexport default GreaterThan;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/GreaterThan.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/GreaterThanOrEqualTo\n */\nimport {inherits} from '../../index.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @extends {ol.format.filter.ComparisonBinary}\n * @api\n */\nconst GreaterThanOrEqualTo = function(propertyName, expression) {\n  ComparisonBinary.call(this, 'PropertyIsGreaterThanOrEqualTo', propertyName, expression);\n};\n\ninherits(GreaterThanOrEqualTo, ComparisonBinary);\nexport default GreaterThanOrEqualTo;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/GreaterThanOrEqualTo.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Intersects\n */\nimport {inherits} from '../../index.js';\nimport Spatial from '../filter/Spatial.js';\n\n/**\n * @classdesc\n * Represents a `<Intersects>` operator to test whether a geometry-valued property\n * intersects a given geometry.\n *\n * @constructor\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @extends {ol.format.filter.Spatial}\n * @api\n */\nconst Intersects = function(geometryName, geometry, opt_srsName) {\n\n  Spatial.call(this, 'Intersects', geometryName, geometry, opt_srsName);\n\n};\n\ninherits(Intersects, Spatial);\nexport default Intersects;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Intersects.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/IsBetween\n */\nimport {inherits} from '../../index.js';\nimport Comparison from '../filter/Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsBetween>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} lowerBoundary The lower bound of the range.\n * @param {!number} upperBoundary The upper bound of the range.\n * @extends {ol.format.filter.Comparison}\n * @api\n */\nconst IsBetween = function(propertyName, lowerBoundary, upperBoundary) {\n  Comparison.call(this, 'PropertyIsBetween', propertyName);\n\n  /**\n   * @public\n   * @type {!number}\n   */\n  this.lowerBoundary = lowerBoundary;\n\n  /**\n   * @public\n   * @type {!number}\n   */\n  this.upperBoundary = upperBoundary;\n};\n\ninherits(IsBetween, Comparison);\nexport default IsBetween;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/IsBetween.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/IsLike\n */\nimport {inherits} from '../../index.js';\nimport Comparison from '../filter/Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLike>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} pattern Text pattern.\n * @param {string=} opt_wildCard Pattern character which matches any sequence of\n *    zero or more string characters. Default is '*'.\n * @param {string=} opt_singleChar pattern character which matches any single\n *    string character. Default is '.'.\n * @param {string=} opt_escapeChar Escape character which can be used to escape\n *    the pattern characters. Default is '!'.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @extends {ol.format.filter.Comparison}\n * @api\n */\nconst IsLike = function(propertyName, pattern, opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {\n  Comparison.call(this, 'PropertyIsLike', propertyName);\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.pattern = pattern;\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.wildCard = (opt_wildCard !== undefined) ? opt_wildCard : '*';\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.singleChar = (opt_singleChar !== undefined) ? opt_singleChar : '.';\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.escapeChar = (opt_escapeChar !== undefined) ? opt_escapeChar : '!';\n\n  /**\n   * @public\n   * @type {boolean|undefined}\n   */\n  this.matchCase = opt_matchCase;\n};\n\ninherits(IsLike, Comparison);\nexport default IsLike;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/IsLike.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/IsNull\n */\nimport {inherits} from '../../index.js';\nimport Comparison from '../filter/Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsNull>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @extends {ol.format.filter.Comparison}\n * @api\n */\nconst IsNull = function(propertyName) {\n  Comparison.call(this, 'PropertyIsNull', propertyName);\n};\n\ninherits(IsNull, Comparison);\nexport default IsNull;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/IsNull.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/LessThan\n */\nimport {inherits} from '../../index.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLessThan>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @extends {ol.format.filter.ComparisonBinary}\n * @api\n */\nconst LessThan = function(propertyName, expression) {\n  ComparisonBinary.call(this, 'PropertyIsLessThan', propertyName, expression);\n};\n\ninherits(LessThan, ComparisonBinary);\nexport default LessThan;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/LessThan.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/LessThanOrEqualTo\n */\nimport {inherits} from '../../index.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLessThanOrEqualTo>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @extends {ol.format.filter.ComparisonBinary}\n * @api\n */\nconst LessThanOrEqualTo = function(propertyName, expression) {\n  ComparisonBinary.call(this, 'PropertyIsLessThanOrEqualTo', propertyName, expression);\n};\n\ninherits(LessThanOrEqualTo, ComparisonBinary);\nexport default LessThanOrEqualTo;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/LessThanOrEqualTo.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Not\n */\nimport {inherits} from '../../index.js';\nimport Filter from '../filter/Filter.js';\n\n/**\n * @classdesc\n * Represents a logical `<Not>` operator for a filter condition.\n *\n * @constructor\n * @param {!ol.format.filter.Filter} condition Filter condition.\n * @extends {ol.format.filter.Filter}\n * @api\n */\nconst Not = function(condition) {\n\n  Filter.call(this, 'Not');\n\n  /**\n   * @public\n   * @type {!ol.format.filter.Filter}\n   */\n  this.condition = condition;\n};\n\ninherits(Not, Filter);\nexport default Not;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Not.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/NotEqualTo\n */\nimport {inherits} from '../../index.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsNotEqualTo>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @extends {ol.format.filter.ComparisonBinary}\n * @api\n */\nconst NotEqualTo = function(propertyName, expression, opt_matchCase) {\n  ComparisonBinary.call(this, 'PropertyIsNotEqualTo', propertyName, expression, opt_matchCase);\n};\n\ninherits(NotEqualTo, ComparisonBinary);\nexport default NotEqualTo;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/NotEqualTo.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Or\n */\nimport {inherits} from '../../index.js';\nimport LogicalNary from '../filter/LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<Or>` operator between two ore more filter conditions.\n *\n * @constructor\n * @param {...ol.format.filter.Filter} conditions Conditions.\n * @extends {ol.format.filter.LogicalNary}\n * @api\n */\nconst Or = function(conditions) {\n  const params = ['Or'].concat(Array.prototype.slice.call(arguments));\n  LogicalNary.apply(this, params);\n};\n\ninherits(Or, LogicalNary);\nexport default Or;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Or.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Within\n */\nimport {inherits} from '../../index.js';\nimport Spatial from '../filter/Spatial.js';\n\n/**\n * @classdesc\n * Represents a `<Within>` operator to test whether a geometry-valued property\n * is within a given geometry.\n *\n * @constructor\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @extends {ol.format.filter.Spatial}\n * @api\n */\nconst Within = function(geometryName, geometry, opt_srsName) {\n\n  Spatial.call(this, 'Within', geometryName, geometry, opt_srsName);\n\n};\n\ninherits(Within, Spatial);\nexport default Within;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Within.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter\n */\nimport _ol_format_filter_And_ from '../format/filter/And.js';\nimport _ol_format_filter_Bbox_ from '../format/filter/Bbox.js';\nimport _ol_format_filter_Contains_ from '../format/filter/Contains.js';\nimport _ol_format_filter_During_ from '../format/filter/During.js';\nimport _ol_format_filter_EqualTo_ from '../format/filter/EqualTo.js';\nimport _ol_format_filter_GreaterThan_ from '../format/filter/GreaterThan.js';\nimport _ol_format_filter_GreaterThanOrEqualTo_ from '../format/filter/GreaterThanOrEqualTo.js';\nimport _ol_format_filter_Intersects_ from '../format/filter/Intersects.js';\nimport _ol_format_filter_IsBetween_ from '../format/filter/IsBetween.js';\nimport _ol_format_filter_IsLike_ from '../format/filter/IsLike.js';\nimport _ol_format_filter_IsNull_ from '../format/filter/IsNull.js';\nimport _ol_format_filter_LessThan_ from '../format/filter/LessThan.js';\nimport _ol_format_filter_LessThanOrEqualTo_ from '../format/filter/LessThanOrEqualTo.js';\nimport _ol_format_filter_Not_ from '../format/filter/Not.js';\nimport _ol_format_filter_NotEqualTo_ from '../format/filter/NotEqualTo.js';\nimport _ol_format_filter_Or_ from '../format/filter/Or.js';\nimport _ol_format_filter_Within_ from '../format/filter/Within.js';\nconst _ol_format_filter_ = {};\n\n\n/**\n * Create a logical `<And>` operator between two or more filter conditions.\n *\n * @param {...ol.format.filter.Filter} conditions Filter conditions.\n * @returns {!ol.format.filter.And} `<And>` operator.\n * @api\n */\n_ol_format_filter_.and = function(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(_ol_format_filter_And_, params));\n};\n\n\n/**\n * Create a logical `<Or>` operator between two or more filter conditions.\n *\n * @param {...ol.format.filter.Filter} conditions Filter conditions.\n * @returns {!ol.format.filter.Or} `<Or>` operator.\n * @api\n */\n_ol_format_filter_.or = function(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(_ol_format_filter_Or_, params));\n};\n\n\n/**\n * Represents a logical `<Not>` operator for a filter condition.\n *\n * @param {!ol.format.filter.Filter} condition Filter condition.\n * @returns {!ol.format.filter.Not} `<Not>` operator.\n * @api\n */\n_ol_format_filter_.not = function(condition) {\n  return new _ol_format_filter_Not_(condition);\n};\n\n\n/**\n * Create a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.Extent} extent Extent.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!ol.format.filter.Bbox} `<BBOX>` operator.\n * @api\n */\n_ol_format_filter_.bbox = function(geometryName, extent, opt_srsName) {\n  return new _ol_format_filter_Bbox_(geometryName, extent, opt_srsName);\n};\n\n/**\n * Create a `<Contains>` operator to test whether a geometry-valued property\n * contains a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!ol.format.filter.Contains} `<Contains>` operator.\n * @api\n */\n_ol_format_filter_.contains = function(geometryName, geometry, opt_srsName) {\n  return new _ol_format_filter_Contains_(geometryName, geometry, opt_srsName);\n};\n\n/**\n * Create a `<Intersects>` operator to test whether a geometry-valued property\n * intersects a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!ol.format.filter.Intersects} `<Intersects>` operator.\n * @api\n */\n_ol_format_filter_.intersects = function(geometryName, geometry, opt_srsName) {\n  return new _ol_format_filter_Intersects_(geometryName, geometry, opt_srsName);\n};\n\n/**\n * Create a `<Within>` operator to test whether a geometry-valued property\n * is within a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!ol.format.filter.Within} `<Within>` operator.\n * @api\n */\n_ol_format_filter_.within = function(geometryName, geometry, opt_srsName) {\n  return new _ol_format_filter_Within_(geometryName, geometry, opt_srsName);\n};\n\n\n/**\n * Creates a `<PropertyIsEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @returns {!ol.format.filter.EqualTo} `<PropertyIsEqualTo>` operator.\n * @api\n */\n_ol_format_filter_.equalTo = function(propertyName, expression, opt_matchCase) {\n  return new _ol_format_filter_EqualTo_(propertyName, expression, opt_matchCase);\n};\n\n\n/**\n * Creates a `<PropertyIsNotEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @returns {!ol.format.filter.NotEqualTo} `<PropertyIsNotEqualTo>` operator.\n * @api\n */\n_ol_format_filter_.notEqualTo = function(propertyName, expression, opt_matchCase) {\n  return new _ol_format_filter_NotEqualTo_(propertyName, expression, opt_matchCase);\n};\n\n\n/**\n * Creates a `<PropertyIsLessThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!ol.format.filter.LessThan} `<PropertyIsLessThan>` operator.\n * @api\n */\n_ol_format_filter_.lessThan = function(propertyName, expression) {\n  return new _ol_format_filter_LessThan_(propertyName, expression);\n};\n\n\n/**\n * Creates a `<PropertyIsLessThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!ol.format.filter.LessThanOrEqualTo} `<PropertyIsLessThanOrEqualTo>` operator.\n * @api\n */\n_ol_format_filter_.lessThanOrEqualTo = function(propertyName, expression) {\n  return new _ol_format_filter_LessThanOrEqualTo_(propertyName, expression);\n};\n\n\n/**\n * Creates a `<PropertyIsGreaterThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!ol.format.filter.GreaterThan} `<PropertyIsGreaterThan>` operator.\n * @api\n */\n_ol_format_filter_.greaterThan = function(propertyName, expression) {\n  return new _ol_format_filter_GreaterThan_(propertyName, expression);\n};\n\n\n/**\n * Creates a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!ol.format.filter.GreaterThanOrEqualTo} `<PropertyIsGreaterThanOrEqualTo>` operator.\n * @api\n */\n_ol_format_filter_.greaterThanOrEqualTo = function(propertyName, expression) {\n  return new _ol_format_filter_GreaterThanOrEqualTo_(propertyName, expression);\n};\n\n\n/**\n * Creates a `<PropertyIsNull>` comparison operator to test whether a property value\n * is null.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @returns {!ol.format.filter.IsNull} `<PropertyIsNull>` operator.\n * @api\n */\n_ol_format_filter_.isNull = function(propertyName) {\n  return new _ol_format_filter_IsNull_(propertyName);\n};\n\n\n/**\n * Creates a `<PropertyIsBetween>` comparison operator to test whether an expression\n * value lies within a range given by a lower and upper bound (inclusive).\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} lowerBoundary The lower bound of the range.\n * @param {!number} upperBoundary The upper bound of the range.\n * @returns {!ol.format.filter.IsBetween} `<PropertyIsBetween>` operator.\n * @api\n */\n_ol_format_filter_.between = function(propertyName, lowerBoundary, upperBoundary) {\n  return new _ol_format_filter_IsBetween_(propertyName, lowerBoundary, upperBoundary);\n};\n\n\n/**\n * Represents a `<PropertyIsLike>` comparison operator that matches a string property\n * value against a text pattern.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} pattern Text pattern.\n * @param {string=} opt_wildCard Pattern character which matches any sequence of\n *    zero or more string characters. Default is '*'.\n * @param {string=} opt_singleChar pattern character which matches any single\n *    string character. Default is '.'.\n * @param {string=} opt_escapeChar Escape character which can be used to escape\n *    the pattern characters. Default is '!'.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @returns {!ol.format.filter.IsLike} `<PropertyIsLike>` operator.\n * @api\n */\n_ol_format_filter_.like = function(propertyName, pattern,\n  opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {\n  return new _ol_format_filter_IsLike_(propertyName, pattern,\n    opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase);\n};\n\n\n/**\n * Create a `<During>` temporal operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} begin The begin date in ISO-8601 format.\n * @param {!string} end The end date in ISO-8601 format.\n * @returns {!ol.format.filter.During} `<During>` operator.\n * @api\n */\n_ol_format_filter_.during = function(propertyName, begin, end) {\n  return new _ol_format_filter_During_(propertyName, begin, end);\n};\nexport default _ol_format_filter_;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter.js\n// module id = null\n// module chunks = "],"sourceRoot":""}