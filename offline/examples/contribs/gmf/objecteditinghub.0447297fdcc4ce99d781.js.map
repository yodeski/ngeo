{"version":3,"sources":["webpack:///./node_modules/openlayers/src/ol/format/filter/Filter.js","webpack:///./node_modules/openlayers/src/ol/format/filter/LogicalNary.js","webpack:///./node_modules/openlayers/src/ol/format/filter/And.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Bbox.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Spatial.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Contains.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Comparison.js","webpack:///./node_modules/openlayers/src/ol/format/filter/During.js","webpack:///./node_modules/openlayers/src/ol/format/filter/ComparisonBinary.js","webpack:///./node_modules/openlayers/src/ol/format/filter/EqualTo.js","webpack:///./node_modules/openlayers/src/ol/format/filter/GreaterThan.js","webpack:///./node_modules/openlayers/src/ol/format/filter/GreaterThanOrEqualTo.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Intersects.js","webpack:///./node_modules/openlayers/src/ol/format/filter/IsBetween.js","webpack:///./node_modules/openlayers/src/ol/format/filter/IsLike.js","webpack:///./node_modules/openlayers/src/ol/format/filter/IsNull.js","webpack:///./node_modules/openlayers/src/ol/format/filter/LessThan.js","webpack:///./node_modules/openlayers/src/ol/format/filter/LessThanOrEqualTo.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Not.js","webpack:///./node_modules/openlayers/src/ol/format/filter/NotEqualTo.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Or.js","webpack:///./node_modules/openlayers/src/ol/format/filter/Within.js","webpack:///./node_modules/openlayers/src/ol/format/filter.js","webpack:///./node_modules/openlayers/src/ol/format/XSD.js","webpack:///./node_modules/openlayers/src/ol/geom/MultiLineString.js","webpack:///./node_modules/openlayers/src/ol/format/JSONFeature.js","webpack:///./node_modules/openlayers/src/ol/format/GeoJSON.js","webpack:///./node_modules/openlayers/src/ol/geom/MultiPoint.js","webpack:///./node_modules/openlayers/src/ol/geom/MultiPolygon.js","webpack:///./src/format/Attribute.js","webpack:///./contribs/gmf/src/theme/Themes.js","webpack:///./contribs/gmf/src/editing/EditFeature.js","webpack:///./src/format/XSDAttribute.js","webpack:///./node_modules/openlayers/src/ol/format/XMLFeature.js","webpack:///./contribs/gmf/src/editing/XSDAttributes.js","webpack:///./contribs/gmf/src/objectediting/Manager.js","webpack:///./src/format/AttributeType.js","webpack:///./node_modules/openlayers/src/ol/format/GMLBase.js","webpack:///./src/map/LayerHelper.js","webpack:///./contribs/gmf/examples/objecteditinghub.js","webpack:///./node_modules/openlayers/src/ol/format/XML.js","webpack:///./node_modules/openlayers/src/ol/format/GML2.js","webpack:///./src/utils.js","webpack:///./node_modules/openlayers/src/ol/format/XLink.js","webpack:///./node_modules/openlayers/src/ol/Image.js","webpack:///./node_modules/openlayers/src/ol/source/ImageWMS.js","webpack:///./node_modules/openlayers/src/ol/format/WFS.js","webpack:///./node_modules/openlayers/src/ol/source/common.js","webpack:///./node_modules/openlayers/src/ol/source/WMSServerType.js","webpack:///./node_modules/openlayers/src/ol/source/TileWMS.js","webpack:///./src/statemanager/Location.js","webpack:///./node_modules/openlayers/src/ol/format/GML3.js","webpack:///./node_modules/openlayers/src/ol/geom/GeometryCollection.js","webpack:///./node_modules/openlayers/src/ol/format/OWS.js","webpack:///./node_modules/openlayers/src/ol/format/WMTSCapabilities.js"],"names":["Filter","tagName","this","tagName_","prototype","getTagName","filter_Filter","LogicalNary","conditions","call","Array","slice","arguments","Object","asserts","length","ol","filter_LogicalNary","And","params","concat","apply","filter_And","Bbox","geometryName","extent","opt_srsName","srsName","filter_Bbox","Spatial","geometry","filter_Spatial","Contains","filter_Contains","Comparison","propertyName","filter_Comparison","During","begin","end","filter_During","ComparisonBinary","expression","opt_matchCase","matchCase","filter_ComparisonBinary","EqualTo","filter_EqualTo","GreaterThan","filter_GreaterThan","GreaterThanOrEqualTo","filter_GreaterThanOrEqualTo","Intersects","filter_Intersects","IsBetween","lowerBoundary","upperBoundary","filter_IsBetween","IsLike","pattern","opt_wildCard","opt_singleChar","opt_escapeChar","wildCard","undefined","singleChar","escapeChar","filter_IsLike","IsNull","filter_IsNull","LessThan","filter_LessThan","LessThanOrEqualTo","filter_LessThanOrEqualTo","Not","condition","filter_Not","NotEqualTo","filter_NotEqualTo","Or","filter_Or","Within","filter_Within","_ol_format_filter_","and","Function","bind","or","not","bbox","contains","intersects","within","equalTo","notEqualTo","lessThan","lessThanOrEqualTo","greaterThan","greaterThanOrEqualTo","isNull","between","like","during","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_1__string_js__","__webpack_require__","XSD","readBoolean","node","s","__WEBPACK_IMPORTED_MODULE_0__xml_js__","getAllTextContent","readBooleanString","string","m","exec","readDateTime","dateTime","Date","parse","isNaN","readDecimal","readDecimalString","parseFloat","readNonNegativeInteger","readNonNegativeIntegerString","parseInt","readString","trim","writeBooleanTextNode","bool","writeStringTextNode","writeCDATASection","appendChild","DOCUMENT","createCDATASection","writeDateTimeTextNode","date","getUTCFullYear","padNumber","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","createTextNode","writeDecimalTextNode","decimal","toPrecision","writeNonNegativeIntegerTextNode","nonNegativeInteger","toString","__WEBPACK_IMPORTED_MODULE_12__geom_flat_simplify_js__","MultiLineString","coordinates","opt_layout","__WEBPACK_IMPORTED_MODULE_6__geom_SimpleGeometry_js__","ends_","maxDelta_","maxDeltaRevision_","setCoordinates","__WEBPACK_IMPORTED_MODULE_0__index_js__","appendLineString","lineString","flatCoordinates","__WEBPACK_IMPORTED_MODULE_1__array_js__","getFlatCoordinates","push","changed","clone","multiLineString","setFlatCoordinates","layout","closestPointXY","x","y","closestPoint","minSquaredDistance","__WEBPACK_IMPORTED_MODULE_2__extent_js__","getExtent","getRevision","Math","sqrt","__WEBPACK_IMPORTED_MODULE_7__geom_flat_closest_js__","getsMaxSquaredDelta","stride","getsClosestPoint","getCoordinateAtM","opt_extrapolate","opt_interpolate","__WEBPACK_IMPORTED_MODULE_3__geom_GeometryLayout_js__","XYM","XYZM","extrapolate","interpolate","__WEBPACK_IMPORTED_MODULE_10__geom_flat_interpolate_js__","lineStringsCoordinateAtM","getCoordinates","__WEBPACK_IMPORTED_MODULE_9__geom_flat_inflate_js__","coordinatess","getEnds","getLineString","index","__WEBPACK_IMPORTED_MODULE_5__geom_LineString_js__","getLineStrings","ends","lineStrings","i","ii","offset","getFlatMidpoints","midpoints","midpoint","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","simplifiedEnds","douglasPeuckers","simplifiedMultiLineString","XY","getType","__WEBPACK_IMPORTED_MODULE_4__geom_GeometryType_js__","MULTI_LINE_STRING","intersectsExtent","__WEBPACK_IMPORTED_MODULE_11__geom_flat_intersectsextent_js__","setLayout","__WEBPACK_IMPORTED_MODULE_8__geom_flat_deflate_js__","setFlatCoordinatesInternal","setLineStrings","getLayout","JSONFeature","format_Feature","getObject","source","object","JSON","FormatType","readFeature","opt_options","readFeatureFromObject","getReadOptions","readFeatures","readFeaturesFromObject","readGeometry","readGeometryFromObject","readProjection","readProjectionFromObject","writeFeature","feature","stringify","writeFeatureObject","writeFeatures","features","writeFeaturesObject","writeGeometry","writeGeometryObject","format_JSONFeature","GeoJSON","options","defaultDataProjection","proj","featureProjection","defaultFeatureProjection","geometryName_","extractGeometryName_","extractGeometryName","GEOMETRY_READERS","Point","LineString","Polygon","MultiPoint","MultiPolygon","GeometryCollection","geometries","map","GEOMETRY_WRITERS","type","right","rightHanded","getGeometriesArray","obj","Circle","geometryReader","geometryWriter","geoJSONFeature","Feature","setGeometryName","geometry_name","setGeometry","id","setId","properties","setProperties","geoJSONFeatures","crs","projection","name","adaptOptions","getId","getGeometry","getProperties","getGeometryName","objects","__WEBPACK_IMPORTED_MODULE_9__math_js__","appendPoint","point","multiPoint","j","squaredDistance","__WEBPACK_IMPORTED_MODULE_8__geom_flat_inflate_js__","getPoint","n","__WEBPACK_IMPORTED_MODULE_5__geom_Point_js__","getPoints","points","MULTI_POINT","__WEBPACK_IMPORTED_MODULE_7__geom_flat_deflate_js__","__WEBPACK_IMPORTED_MODULE_17__geom_flat_simplify_js__","__WEBPACK_IMPORTED_MODULE_7__geom_SimpleGeometry_js__","endss_","flatInteriorPointsRevision_","flatInteriorPoints_","orientedRevision_","orientedFlatCoordinates_","appendPolygon","polygon","multiPolygon","len","newEndss","__WEBPACK_IMPORTED_MODULE_10__geom_flat_closest_js__","getssMaxSquaredDelta","getssClosestPoint","getOrientedFlatCoordinates","containsXY","__WEBPACK_IMPORTED_MODULE_11__geom_flat_contains_js__","linearRingssContainsXY","getArea","__WEBPACK_IMPORTED_MODULE_8__geom_flat_area_js__","linearRingss","opt_right","__WEBPACK_IMPORTED_MODULE_16__geom_flat_orient_js__","orientLinearRingss","__WEBPACK_IMPORTED_MODULE_13__geom_flat_inflate_js__","coordinatesss","getEndss","getFlatInteriorPoints","flatCenters","__WEBPACK_IMPORTED_MODULE_9__geom_flat_center_js__","__WEBPACK_IMPORTED_MODULE_14__geom_flat_interiorpoint_js__","getInteriorPoints","interiorPoints","__WEBPACK_IMPORTED_MODULE_5__geom_MultiPoint_js__","linearRingssAreOriented","simplifiedEndss","quantizess","simplifiedMultiPolygon","getPolygon","prevEnds","__WEBPACK_IMPORTED_MODULE_6__geom_Polygon_js__","getPolygons","endss","polygons","jj","MULTI_POLYGON","__WEBPACK_IMPORTED_MODULE_15__geom_flat_intersectsextent_js__","__WEBPACK_IMPORTED_MODULE_12__geom_flat_deflate_js__","lastEnds","setPolygons","_AttributeType","exports","attribute","ngeoFormatAttributeType","GEOMETRY","geomType","olBase","olArray","$http","$injector","$q","ngeoLayerHelper","gettextCatalog","gmfThemesOptions","olEventsEventTarget","addBlankBackgroundLayer_","addBlankBackgroundLayer","$q_","$http_","treeUrl_","has","get","cacheVersion_","ngeoLocation_","layerHelper_","deferred_","defer","promise_","promise","loaded","bgLayerPromise_","inherits","findGroupByLayerNodeName","themes","theme","children","group","childNodes","getFlatNodes","findObjectByName","findGroupByName","internalNodes","getFlatInternalNodes","objectName","find","findThemeByName","themeName","nodes","getBgLayers","appDimensions","_this","layerHelper","callback","item","layer","set","metadata","dimensions","ids","getIds","array","getUid","forEach","child","layerLayerCreationFn","ogcServers","gmfLayer","gmfLayerWMTS","googAsserts","assert","url","createWMTSLayerFromCapabilitites","then","response","message","console","error","resolve","gmfLayerWMS","ogcServer","server","imageType","createBasicWMSLayer","layers","credential","fail","promiseSuccessFn","data","promises","background_layers","itemType","reverse","all","collection","filter","l","olCollection","createBasicGroup","layerGroupCreationFn","values","getString","olLayerTile","label","thumbnail","getThemeObject","getThemesObject","getBackgroundLayersObject","getOgcServersObject","hasEditableLayers","hasEditableLayers_","_this2","some","hasNodeEditableLayers_","editable","getSnappingConfig","snappingConfig","getNodeMaxResolution","maxResolution","maxResolutionHint","getNodeMinResolution","minResolution","minResolutionHint","loadThemes","opt_roleId","_this3","role","cache_version","cache","withCredentials","errors","join","hasParam","window","alert","dispatchEvent","reject","NodeType","MIXED_GROUP","NOT_MIXED_GROUP","WMTS","WMS","module","angular","ngeoMapLayerHelper","value","service","requires","olUri","gmfLayersUrl","http_","baseUrl_","getFeaturesInExtent","layerIds","appendParams","handleGetFeatures_","getFeaturesWithComparisonFilters","filters","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","property","operator","err","return","resp","olFormatGeoJSON","insertFeatures","layerId","geoJSON","post","headers","Content-Type","updateFeature","put","deleteFeature","delete","gmfBase","olFormatXML","read","readFromDocument","doc","nodeType","Node","DOCUMENT_NODE","firstChild","nextSibling","ELEMENT_NODE","readFromNode","localName","elements","getElementsByTagName","attributes","readFromElementNode_","getAttribute","assertString","alias","nillable","required","ngeoFormatAttribute","setGeometryType","setAttributeByXsdType_","enumerations","SELECT","choices","restrictions","restrictionNode","maxLengths","maxLength","Number","BOOLEAN","DATE","DATETIME","TIME","NUMBER","numType","NumberType","FLOAT","INTEGER","TEXT","getGeometryAttribute","geomAttribute","__WEBPACK_IMPORTED_MODULE_4__xml_js__","XMLFeature","xmlSerializer_","XMLSerializer","__WEBPACK_IMPORTED_MODULE_2__format_Feature_js__","__WEBPACK_IMPORTED_MODULE_3__format_FormatType_js__","XML","isDocument","readFeatureFromDocument","isNode","readFeatureFromNode","readFeaturesFromDocument","readFeaturesFromNode","readGeometryFromDocument","readGeometryFromNode","readProjectionFromDocument","readProjectionFromNode","writeFeatureNode","serializeToString","writeFeaturesNode","writeGeometryNode","promises_","getAttributes","handleGetAttributes_","ngeoFormatXSDAttribute","gmfEditFeature","ngeoLocation","q_","gmfEditFeature_","getFeatureDefered_","getFeature","getParam","Param","GEOM_TYPE","ID","LAYER","PROPERTY","THEME","getGeomType","getLayerNodeId","getParamAsInt","key","featureProperties","olFeature","gmfEditingEditFeature","ngeoStatemanagerLocation","__WEBPACK_IMPORTED_MODULE_15__xml_js__","GMLBase","featureType","featureNS","schemaLocation","FEATURE_COLLECTION_PARSERS","GMLNS","featureMember","makeReplacer","readFeaturesInternal","featureMembers","__WEBPACK_IMPORTED_MODULE_4__format_XMLFeature_js__","ONLY_WHITESPACE_RE_","objectStack","namespaceURI","pushParseAndPop","context","prefix","defaultPrefix","ft","nodeName","split","pop","indexOf","count","uri","candidate","ns","parsersNS","featureTypes","isArray","p","parsers","makeArrayPusher","readFeatureElement","readGeometryElement","firstElementChild","GEOMETRY_PARSERS_","__WEBPACK_IMPORTED_MODULE_3__format_Feature_js__","fid","getAttributeNS","nextElementSibling","test","__WEBPACK_IMPORTED_MODULE_2__Feature_js__","readPoint","readFlatCoordinatesFromNode_","__WEBPACK_IMPORTED_MODULE_11__geom_Point_js__","__WEBPACK_IMPORTED_MODULE_5__geom_GeometryLayout_js__","XYZ","readMultiPoint","MULTIPOINT_PARSERS_","__WEBPACK_IMPORTED_MODULE_9__geom_MultiPoint_js__","readMultiLineString","MULTILINESTRING_PARSERS_","__WEBPACK_IMPORTED_MODULE_8__geom_MultiLineString_js__","readMultiPolygon","MULTIPOLYGON_PARSERS_","__WEBPACK_IMPORTED_MODULE_10__geom_MultiPolygon_js__","pointMemberParser_","parseNode","POINTMEMBER_PARSERS_","lineStringMemberParser_","LINESTRINGMEMBER_PARSERS_","polygonMemberParser_","POLYGONMEMBER_PARSERS_","readLineString","__WEBPACK_IMPORTED_MODULE_6__geom_LineString_js__","readFlatLinearRing_","ring","GEOMETRY_FLAT_COORDINATES_PARSERS_","readLinearRing","__WEBPACK_IMPORTED_MODULE_7__geom_LinearRing_js__","readPolygon","flatLinearRings","FLAT_LINEAR_RINGS_PARSERS_","__WEBPACK_IMPORTED_MODULE_12__geom_Polygon_js__","http://www.opengis.net/gml","pointMember","pointMembers","lineStringMember","lineStringMembers","polygonMember","polygonMembers","RING_PARSERS","LinearRing","__WEBPACK_IMPORTED_MODULE_13__obj_js__","__WEBPACK_IMPORTED_MODULE_14__proj_js__","olObj","GROUP_KEY","REFRESH_PARAM","sourceURL","sourceLayersName","sourceFormat","opt_serverType","opt_time","opt_params","opt_crossOrigin","FORMAT","LAYERS","olServerType","replace","olSourceImageWMS","serverType","crossOrigin","updateParams","olLayerImage","createBasicWMSLayerFromDataSource","dataSource","wmsUrl","layerNames","getOGCLayerNames","ogcServerType","ogcImageType","setVisible","visible","capabilitiesURL","layerName","opt_dimensions","parser","olFormatWMTSCapabilities","preload","Infinity","result","olSourceWMTS","optionsFromCapabilities","isEmpty","updateDimensions","setSource","elt","createWMTSLayerFromCapabilititesObj","capabilities","layerCap","capabilitiesStyles","opt_layers","olLayerGroup","setLayers","getGroupFromMap","groupName","getLayerGroup","getLayers","getArray","existingGroup","addLayer","getFlatLayers","getFlatLayers_","getLayerByName","found","sublayers","getWMTSLegendURL","styles","legendURL","getWMSLegendURL","opt_scale","opt_legendRule","queryString","TRANSPARENT","SERVICE","VERSION","REQUEST","isLayerVisible","getVisible","currentResolution","getView","getResolution","getMinResolution","getMaxResolution","refreshWMSLayer","source_","getSource","olSourceTileWMS","getParams","random","updateWMSLayerState","names","getQuerySourceIds","ngeoBase","gmfEditingXSDAttributes","gmfObjecteditingManager","gmfThemeThemes","constant","MainController","$scope","gmfThemes","gmfXSDAttributes","gmfThemes_","gmfXSDAttributes_","urls","viewerUrlDev_","viewerUrlHosted_","selectedUrl","gmfServers_","gmfServer_","gmfLayerNodes","selectedGmfLayerNode","featuresCache_","selectedFeature","geomTypeCache_","selectedGeomType","$watch","newVal","oldVal","getFeatures_","getGeometryType_","handleGetGeometryType_","groupNode","gmfServer","wfsSupport","urlWfs","identifierAttributeField","runEditor","open","runViewerDev","runViewer_","runViewerHosted","baseUrl","nodeId","nodeIdAttrFieldName","gmfLayerNode","getFeaturesDeferred_","getFeaturesFromCache_","issueGetFeatures_","TYPENAME","olFormatWFS","getGeometryTypeDeferred_","getGeometryTypeFromCache_","issueGetAttributesRequest_","geomAttr","keyParams","keys","k","encodeURIComponent","qs","controller","__WEBPACK_IMPORTED_MODULE_8__xml_js__","GML2","__WEBPACK_IMPORTED_MODULE_3__format_GMLBase_js__","schemaLocation_","readFlatCoordinates_","containerSrs","axisOrientation","__WEBPACK_IMPORTED_MODULE_7__proj_js__","getAxisOrientation","coordsGroups","z","coords","substr","readBox_","BOX_PARSERS_","__WEBPACK_IMPORTED_MODULE_1__extent_js__","innerBoundaryIsParser_","flatLinearRing","outerBoundaryIsParser_","innerBoundaryIs","outerBoundaryIs","Box","GEOMETRY_NODE_FACTORY_","opt_nodeName","multiSurface","surface","multiCurve","createElementNS","writeFeatureElement","setAttribute","serializers","__WEBPACK_IMPORTED_MODULE_5__geom_Geometry_js__","makeChildAppender","writeGeometryElement","__WEBPACK_IMPORTED_MODULE_4__format_XSD_js__","__WEBPACK_IMPORTED_MODULE_6__obj_js__","pushSerializeAndPop","makeSimpleNodeFactory","dataProjection","GEOMETRY_SERIALIZERS_","writeCurveOrLineString_","createCoordinatesNode_","writeCoordinates_","segments","writeCurveSegments_","hasZ","parts","getCoords_","line","writeSurfaceOrPolygon_","rings","getLinearRings","RING_SERIALIZERS_","RING_NODE_FACTORY_","patches","writeSurfacePatches_","parentNode","exteriorWritten","writeRing_","linearRing","writeLinearRing_","opt_hasZ","writeMultiCurveOrLineString_","curve","lines","LINESTRINGORCURVEMEMBER_SERIALIZERS_","MULTIGEOMETRY_MEMBER_NODE_FACTORY_","writePoint_","coord","writeMultiPoint_","POINTMEMBER_SERIALIZERS_","writePointMember_","writeLineStringOrCurveMember_","writeMultiSurfaceOrPolygon_","SURFACEORPOLYGONMEMBER_SERIALIZERS_","writeSurfaceOrPolygonMember_","writeEnvelope","ENVELOPE_SERIALIZERS_","OBJECT_PROPERTY_NODE_FACTORY","Curve","MultiCurve","Surface","MultiSurface","Envelope","curveMember","MULTIGEOMETRY_TO_MEMBER_NODENAME_","surfaceMember","lowerCorner","upperCorner","multiGeom","olGeomPoint","olGeomMultiPoint","olGeomLineString","olGeomMultiLineString","olGeomPolygon","olGeomMultiPolygon","navigator","userAgent","hex","rgb","r","g","b","Error","colorZeroPadding","queryData","pairs","substring","pair","indexOfEquals","decodeURIComponent","queryItem","event","olEventsCondition","noModifierKeys","singleClick","XLink","readHref","_ol_Image_","resolution","pixelRatio","src","imageLoadFunction","ImageBase","ImageState","IDLE","src_","image_","Image","imageListenerKeys_","state","imageLoadFunction_","getImage","handleImageError_","ERROR","unlistenImage_","handleImageLoad_","ol_extent","height","LOADED","load","LOADING","events","listenOnce","EventType","LOAD","setImage","image","unlistenByKey","ol_Image","ImageWMS","source_Image","attributions","resolutions","crossOrigin_","url_","defaultImageLoadFunction","params_","v13_","updateV13_","serverType_","hidpi_","hidpi","imageSize_","renderedRevision_","ratio_","ratio","GETFEATUREINFO_IMAGE_SIZE_","getGetFeatureInfoUrl","coordinate","projectionObj","sourceProjectionObj","getProjection","reproj","calculateSourceResolution","baseParams","common","QUERY_LAYERS","floor","getRequestUrl_","getImageInternal","findNearestResolution","imageResolution","center","viewWidth","ceil","viewHeight","viewExtent","requestWidth","requestHeight","requestExtent","getPixelRatio","round","listen","CHANGE","handleImageChange","getImageLoadFunction","size","getCode","WMSServerType","GEOSERVER","dpi","MAPSERVER","CARMENTA_SERVER","QGIS","getUrl","setImageLoadFunction","setUrl","version","compareVersions","__WEBPACK_IMPORTED_MODULE_11__xml_js__","WFS","featureType_","featureNS_","gmlFormat_","gmlFormat","__WEBPACK_IMPORTED_MODULE_3__format_GML3_js__","SCHEMA_LOCATIONS","DEFAULT_VERSION","__WEBPACK_IMPORTED_MODULE_6__format_XMLFeature_js__","FEATURE_PREFIX","XMLNS","OGCNS","WFSNS","FESNS","1.1.0","1.0.0","getFeatureType","setFeatureType","__WEBPACK_IMPORTED_MODULE_9__obj_js__","__WEBPACK_IMPORTED_MODULE_4__format_GMLBase_js__","readTransactionResponse","readTransactionResponseFromDocument","readTransactionResponseFromNode","readFeatureCollectionMetadata","readFeatureCollectionMetadataFromDocument","readFeatureCollectionMetadataFromNode","FEATURE_COLLECTION_PARSERS_","boundedBy","makeObjectPropertySetter","__WEBPACK_IMPORTED_MODULE_7__format_XSD_js__","TRANSACTION_SUMMARY_PARSERS_","http://www.opengis.net/wfs","totalInserted","totalUpdated","totalDeleted","readTransactionSummary_","OGC_FID_PARSERS_","http://www.opengis.net/ogc","FeatureId","fidParser_","INSERT_RESULTS_PARSERS_","readInsertResults_","TRANSACTION_RESPONSE_PARSERS_","TransactionSummary","InsertResults","QUERY_SERIALIZERS_","PropertyName","writeFeature_","gmlVersion","__WEBPACK_IMPORTED_MODULE_2__format_GML2_js__","writeOgcFidFilter_","getTypeName_","featurePrefix","writeDelete_","__WEBPACK_IMPORTED_MODULE_1__asserts_js__","typeName","setAttributeNS","writeUpdate_","getKeys","__WEBPACK_IMPORTED_MODULE_8__geom_Geometry_js__","TRANSACTION_SERIALIZERS_","writeProperty_","writeNative_","nativeElement","vendorId","safeToIgnore","Insert","Update","Delete","Property","Native","writeQuery_","propertyNames","writeFilterCondition_","GETFEATURE_SERIALIZERS_","writeBboxFilter_","writeOgcPropertyName_","writeContainsFilter_","writeIntersectsFilter_","writeWithinFilter_","writeDuringFilter_","valueReference","timePeriod","writeTimeInstant_","writeLogicalFilter_","writeNotFilter_","writeComparisonFilter_","writeOgcLiteral_","writeIsNullFilter_","writeIsBetweenFilter_","writeIsLikeFilter_","writeOgcExpression_","time","timeInstant","timePosition","Query","BBOX","PropertyIsEqualTo","PropertyIsNotEqualTo","PropertyIsLessThan","PropertyIsLessThanOrEqualTo","PropertyIsGreaterThan","PropertyIsGreaterThanOrEqualTo","PropertyIsNull","PropertyIsBetween","PropertyIsLike","writeFilter","writeGetFeature_","writeGetFeature","handle","outputFormat","maxFeatures","resultType","startIndex","__WEBPACK_IMPORTED_MODULE_5__format_filter_js__","writeTransaction","inserts","updates","deletes","baseObj","gmlOptions","nativeElements","__WEBPACK_IMPORTED_MODULE_10__proj_js__","__WEBPACK_IMPORTED_MODULE_13__uri_js__","TileWMS","transparent","__WEBPACK_IMPORTED_MODULE_9__source_TileImage_js__","cacheSize","opaque","reprojectionErrorThreshold","tileClass","tileGrid","tileLoadFunction","wrapX","transition","gutter_","gutter","tmpExtent_","__WEBPACK_IMPORTED_MODULE_3__extent_js__","setKey","getKeyForParams_","__WEBPACK_IMPORTED_MODULE_1__index_js__","__WEBPACK_IMPORTED_MODULE_6__proj_js__","getTileGrid","getTileGridForProjection","tileCoord","getTileCoordForCoordAndResolution","getResolutions","tileResolution","tileExtent","getTileCoordExtent","tileSize","__WEBPACK_IMPORTED_MODULE_8__size_js__","toSize","getTileSize","tmpSize","buffer","__WEBPACK_IMPORTED_MODULE_7__reproj_js__","__WEBPACK_IMPORTED_MODULE_0__common_js__","__WEBPACK_IMPORTED_MODULE_4__obj_js__","getGutterInternal","__WEBPACK_IMPORTED_MODULE_10__source_WMSServerType_js__","__WEBPACK_IMPORTED_MODULE_2__asserts_js__","tmp","__WEBPACK_IMPORTED_MODULE_5__math_js__","__WEBPACK_IMPORTED_MODULE_11__tilecoord_js__","hash","getTilePixelRatio","res","fixedTileUrlFunction","scale","__WEBPACK_IMPORTED_MODULE_12__string_js__","location","history","history_","schema_","protocol","domain_","hostname","port_","port","path_","pathname","queryData_","ngeoUtils","decodeQueryString","search","fragment_","replaceState","getPath","getUriString","out","String","charAt","encodedQueryData","encodeQueryString","encodedFragment","hasFragmentParam","getFragmentParam","valueAsInt","getParamAsFloat","valueAsFloat","getFragmentParamAsInt","getParamKeys","getFragmentParamKeys","getParamKeysWithPrefix","getFragmentParamKeysWithPrefix","updateFragmentParams","deleteParam","deleteFragmentParam","refresh","setPath","path","LocationFactory","$rootScope","$window","lastUri","newUri","$evalAsync","$broadcast","MockProvider","$locationProvider","absUrl","opt_path","host","opt_search","opt_paramValue","opt_url","factory","__WEBPACK_IMPORTED_MODULE_14__xml_js__","GML3","surface_","curve_","multiCurve_","multiSurface_","readMultiCurve_","MULTICURVE_PARSERS_","__WEBPACK_IMPORTED_MODULE_9__geom_MultiLineString_js__","readMultiSurface_","MULTISURFACE_PARSERS_","curveMemberParser_","CURVEMEMBER_PARSERS_","surfaceMemberParser_","SURFACEMEMBER_PARSERS_","readPatch_","PATCHES_PARSERS_","readSegment_","SEGMENTS_PARSERS_","readPolygonPatch_","readLineStringSegment_","interiorParser_","exteriorParser_","readSurface_","SURFACE_PARSERS_","__WEBPACK_IMPORTED_MODULE_11__geom_Polygon_js__","__WEBPACK_IMPORTED_MODULE_7__geom_GeometryLayout_js__","readCurve_","CURVE_PARSERS_","__WEBPACK_IMPORTED_MODULE_8__geom_LineString_js__","readEnvelope_","ENVELOPE_PARSERS_","readFlatPos_","re","__WEBPACK_IMPORTED_MODULE_13__proj_js__","readFlatPosList_","contextDimension","dim","__WEBPACK_IMPORTED_MODULE_5__format_XSD_js__","pos","posList","interior","exterior","curveMembers","surfaceMembers","PolygonPatch","LineStringSegment","writePos_","srsDimension","writePosList_","__WEBPACK_IMPORTED_MODULE_12__obj_js__","__WEBPACK_IMPORTED_MODULE_6__geom_Geometry_js__","writeFeatureMembers_","geom","opt_geometries","__WEBPACK_IMPORTED_MODULE_4__geom_Geometry_js__","geometries_","listenGeometriesChange_","cloneGeometries_","clonedGeometries","unlistenGeometriesChange_","__WEBPACK_IMPORTED_MODULE_1__events_js__","unlisten","__WEBPACK_IMPORTED_MODULE_2__events_EventType_js__","geometryCollection","setGeometries","computeExtent","getGeometries","getSimplifiedGeometry","simplifiedGeometryRevision","simplifiedGeometryCache","simplifiedGeometryMaxMinSquaredTolerance","hasOwnProperty","simplifiedGeometries","simplified","simplifiedGeometry","simplifiedGeometryCollection","setGeometriesArray","__WEBPACK_IMPORTED_MODULE_5__geom_GeometryType_js__","GEOMETRY_COLLECTION","rotate","angle","anchor","sx","opt_sy","opt_anchor","applyTransform","transformFn","translate","deltaX","deltaY","disposeInternal","OWS","owsObject","xml","PARSERS_","readAddress_","ADDRESS_PARSERS_","readAllowedValues_","ALLOWED_VALUES_PARSERS_","readConstraint_","CONSTRAINT_PARSERS_","readContactInfo_","CONTACT_INFO_PARSERS_","readDcp_","DCP_PARSERS_","readGet_","href","REQUEST_METHOD_PARSERS_","readHttp_","HTTP_PARSERS_","readOperation_","OPERATION_PARSERS_","readOperationsMetadata_","OPERATIONS_METADATA_PARSERS_","readPhone_","PHONE_PARSERS_","readServiceIdentification_","SERVICE_IDENTIFICATION_PARSERS_","readServiceContact_","SERVICE_CONTACT_PARSERS_","readServiceProvider_","SERVICE_PROVIDER_PARSERS_","readValue_","NAMESPACE_URIS_","makeStructureNS","ServiceIdentification","ServiceProvider","OperationsMetadata","DeliveryPoint","City","AdministrativeArea","PostalCode","Country","ElectronicMailAddress","Value","makeObjectPropertyPusher","AllowedValues","Phone","Address","HTTP","Get","Post","DCP","Operation","Voice","Facsimile","Constraint","IndividualName","PositionName","ContactInfo","Abstract","AccessConstraints","Fees","Title","ServiceTypeVersion","ServiceType","ProviderName","ProviderSite","ServiceContact","format_OWS","WMTSCapabilities","owsParser_","WMTSCapabilityObject","readContents_","CONTENTS_PARSERS_","readLayer_","LAYER_PARSERS_","readTileMatrixSet_","TMS_PARSERS_","readStyle_","style","STYLE_PARSERS_","isDefault","readTileMatrixSetLink_","TMS_LINKS_PARSERS_","readDimensions_","DIMENSION_PARSERS_","readResourceUrl_","format","template","resourceType","resource","readWgs84BoundingBox_","WGS84_BBOX_READERS_","readLegendUrl_","legend","readCoordinates_","readTileMatrix_","TM_PARSERS_","readTileMatrixLimitsList_","TMS_LIMITS_LIST_PARSERS_","readTileMatrixLimits_","TMS_LIMITS_PARSERS_","OWS_NAMESPACE_URIS_","Contents","Layer","TileMatrixSet","Style","Format","TileMatrixSetLink","Dimension","ResourceURL","WGS84BoundingBox","Identifier","LegendURL","TileMatrixSetLimits","TileMatrixLimits","TileMatrix","MinTileRow","MaxTileRow","MinTileCol","MaxTileCol","Default","LowerCorner","UpperCorner","WellKnownScaleSet","SupportedCRS","TopLeftCorner","ScaleDenominator","TileWidth","TileHeight","MatrixWidth","MatrixHeight"],"mappings":"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","file":"objecteditinghub.0447297fdcc4ce99d781.js","sourcesContent":["/**\n * @module ol/format/filter/Filter\n */\n\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature filters.\n *\n * @constructor\n * @abstract\n * @param {!string} tagName The XML tag name for this filter.\n * @struct\n */\nconst Filter = function(tagName) {\n\n  /**\n   * @private\n   * @type {!string}\n   */\n  this.tagName_ = tagName;\n};\n\n/**\n * The XML tag name for a filter.\n * @returns {!string} Name.\n */\nFilter.prototype.getTagName = function() {\n  return this.tagName_;\n};\n\nexport default Filter;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Filter.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/LogicalNary\n */\nimport {inherits} from '../../index.js';\nimport {assert} from '../../asserts.js';\nimport Filter from '../filter/Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature n-ary logical filters.\n *\n * @constructor\n * @abstract\n * @param {!string} tagName The XML tag name for this filter.\n * @param {...ol.format.filter.Filter} conditions Conditions.\n * @extends {ol.format.filter.Filter}\n */\nconst LogicalNary = function(tagName, conditions) {\n\n  Filter.call(this, tagName);\n\n  /**\n   * @public\n   * @type {Array.<ol.format.filter.Filter>}\n   */\n  this.conditions = Array.prototype.slice.call(arguments, 1);\n  assert(this.conditions.length >= 2, 57); // At least 2 conditions are required.\n};\n\ninherits(LogicalNary, Filter);\nexport default LogicalNary;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/LogicalNary.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/And\n */\nimport {inherits} from '../../index.js';\nimport LogicalNary from '../filter/LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<And>` operator between two or more filter conditions.\n *\n * @constructor\n * @abstract\n * @param {...ol.format.filter.Filter} conditions Conditions.\n * @extends {ol.format.filter.LogicalNary}\n */\nconst And = function(conditions) {\n  const params = ['And'].concat(Array.prototype.slice.call(arguments));\n  LogicalNary.apply(this, params);\n};\n\ninherits(And, LogicalNary);\n\nexport default And;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/And.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Bbox\n */\nimport {inherits} from '../../index.js';\nimport Filter from '../filter/Filter.js';\n\n/**\n * @classdesc\n * Represents a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @constructor\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.Extent} extent Extent.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @extends {ol.format.filter.Filter}\n * @api\n */\nconst Bbox = function(geometryName, extent, opt_srsName) {\n\n  Filter.call(this, 'BBOX');\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.geometryName = geometryName;\n\n  /**\n   * @public\n   * @type {ol.Extent}\n   */\n  this.extent = extent;\n\n  /**\n   * @public\n   * @type {string|undefined}\n   */\n  this.srsName = opt_srsName;\n};\n\ninherits(Bbox, Filter);\n\nexport default Bbox;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Bbox.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Spatial\n */\nimport {inherits} from '../../index.js';\nimport Filter from '../filter/Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Represents a spatial operator to test whether a geometry-valued property\n * relates to a given geometry.\n *\n * @constructor\n * @abstract\n * @param {!string} tagName The XML tag name for this filter.\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @extends {ol.format.filter.Filter}\n */\nconst Spatial = function(tagName, geometryName, geometry, opt_srsName) {\n\n  Filter.call(this, tagName);\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.geometryName = geometryName || 'the_geom';\n\n  /**\n   * @public\n   * @type {ol.geom.Geometry}\n   */\n  this.geometry = geometry;\n\n  /**\n   * @public\n   * @type {string|undefined}\n   */\n  this.srsName = opt_srsName;\n};\n\ninherits(Spatial, Filter);\n\nexport default Spatial;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Spatial.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Contains\n */\nimport {inherits} from '../../index.js';\nimport Spatial from '../filter/Spatial.js';\n\n/**\n * @classdesc\n * Represents a `<Contains>` operator to test whether a geometry-valued property\n * contains a given geometry.\n *\n * @constructor\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @extends {ol.format.filter.Spatial}\n * @api\n */\nconst Contains = function(geometryName, geometry, opt_srsName) {\n\n  Spatial.call(this, 'Contains', geometryName, geometry, opt_srsName);\n\n};\n\ninherits(Contains, Spatial);\nexport default Contains;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Contains.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Comparison\n */\nimport {inherits} from '../../index.js';\nimport Filter from '../filter/Filter.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property comparison filters.\n *\n * @constructor\n * @abstract\n * @param {!string} tagName The XML tag name for this filter.\n * @param {!string} propertyName Name of the context property to compare.\n * @extends {ol.format.filter.Filter}\n */\nconst Comparison = function(tagName, propertyName) {\n\n  Filter.call(this, tagName);\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.propertyName = propertyName;\n};\n\ninherits(Comparison, Filter);\n\nexport default Comparison;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Comparison.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/During\n */\nimport {inherits} from '../../index.js';\nimport Comparison from '../filter/Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<During>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} begin The begin date in ISO-8601 format.\n * @param {!string} end The end date in ISO-8601 format.\n * @extends {ol.format.filter.Comparison}\n * @api\n */\nconst During = function(propertyName, begin, end) {\n  Comparison.call(this, 'During', propertyName);\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.begin = begin;\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.end = end;\n};\n\ninherits(During, Comparison);\nexport default During;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/During.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/ComparisonBinary\n */\nimport {inherits} from '../../index.js';\nimport Comparison from '../filter/Comparison.js';\n\n/**\n * @classdesc\n * Abstract class; normally only used for creating subclasses and not instantiated in apps.\n * Base class for WFS GetFeature property binary comparison filters.\n *\n * @constructor\n * @abstract\n * @param {!string} tagName The XML tag name for this filter.\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @extends {ol.format.filter.Comparison}\n */\nconst ComparisonBinary = function(tagName, propertyName, expression, opt_matchCase) {\n\n  Comparison.call(this, tagName, propertyName);\n\n  /**\n   * @public\n   * @type {!(string|number)}\n   */\n  this.expression = expression;\n\n  /**\n   * @public\n   * @type {boolean|undefined}\n   */\n  this.matchCase = opt_matchCase;\n};\n\ninherits(ComparisonBinary, Comparison);\nexport default ComparisonBinary;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/ComparisonBinary.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/EqualTo\n */\nimport {inherits} from '../../index.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsEqualTo>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @extends {ol.format.filter.ComparisonBinary}\n * @api\n */\nconst EqualTo = function(propertyName, expression, opt_matchCase) {\n  ComparisonBinary.call(this, 'PropertyIsEqualTo', propertyName, expression, opt_matchCase);\n};\n\ninherits(EqualTo, ComparisonBinary);\nexport default EqualTo;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/EqualTo.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/GreaterThan\n */\nimport {inherits} from '../../index.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsGreaterThan>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @extends {ol.format.filter.ComparisonBinary}\n * @api\n */\nconst GreaterThan = function(propertyName, expression) {\n  ComparisonBinary.call(this, 'PropertyIsGreaterThan', propertyName, expression);\n};\n\ninherits(GreaterThan, ComparisonBinary);\nexport default GreaterThan;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/GreaterThan.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/GreaterThanOrEqualTo\n */\nimport {inherits} from '../../index.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @extends {ol.format.filter.ComparisonBinary}\n * @api\n */\nconst GreaterThanOrEqualTo = function(propertyName, expression) {\n  ComparisonBinary.call(this, 'PropertyIsGreaterThanOrEqualTo', propertyName, expression);\n};\n\ninherits(GreaterThanOrEqualTo, ComparisonBinary);\nexport default GreaterThanOrEqualTo;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/GreaterThanOrEqualTo.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Intersects\n */\nimport {inherits} from '../../index.js';\nimport Spatial from '../filter/Spatial.js';\n\n/**\n * @classdesc\n * Represents a `<Intersects>` operator to test whether a geometry-valued property\n * intersects a given geometry.\n *\n * @constructor\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @extends {ol.format.filter.Spatial}\n * @api\n */\nconst Intersects = function(geometryName, geometry, opt_srsName) {\n\n  Spatial.call(this, 'Intersects', geometryName, geometry, opt_srsName);\n\n};\n\ninherits(Intersects, Spatial);\nexport default Intersects;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Intersects.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/IsBetween\n */\nimport {inherits} from '../../index.js';\nimport Comparison from '../filter/Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsBetween>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} lowerBoundary The lower bound of the range.\n * @param {!number} upperBoundary The upper bound of the range.\n * @extends {ol.format.filter.Comparison}\n * @api\n */\nconst IsBetween = function(propertyName, lowerBoundary, upperBoundary) {\n  Comparison.call(this, 'PropertyIsBetween', propertyName);\n\n  /**\n   * @public\n   * @type {!number}\n   */\n  this.lowerBoundary = lowerBoundary;\n\n  /**\n   * @public\n   * @type {!number}\n   */\n  this.upperBoundary = upperBoundary;\n};\n\ninherits(IsBetween, Comparison);\nexport default IsBetween;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/IsBetween.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/IsLike\n */\nimport {inherits} from '../../index.js';\nimport Comparison from '../filter/Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLike>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} pattern Text pattern.\n * @param {string=} opt_wildCard Pattern character which matches any sequence of\n *    zero or more string characters. Default is '*'.\n * @param {string=} opt_singleChar pattern character which matches any single\n *    string character. Default is '.'.\n * @param {string=} opt_escapeChar Escape character which can be used to escape\n *    the pattern characters. Default is '!'.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @extends {ol.format.filter.Comparison}\n * @api\n */\nconst IsLike = function(propertyName, pattern, opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {\n  Comparison.call(this, 'PropertyIsLike', propertyName);\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.pattern = pattern;\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.wildCard = (opt_wildCard !== undefined) ? opt_wildCard : '*';\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.singleChar = (opt_singleChar !== undefined) ? opt_singleChar : '.';\n\n  /**\n   * @public\n   * @type {!string}\n   */\n  this.escapeChar = (opt_escapeChar !== undefined) ? opt_escapeChar : '!';\n\n  /**\n   * @public\n   * @type {boolean|undefined}\n   */\n  this.matchCase = opt_matchCase;\n};\n\ninherits(IsLike, Comparison);\nexport default IsLike;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/IsLike.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/IsNull\n */\nimport {inherits} from '../../index.js';\nimport Comparison from '../filter/Comparison.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsNull>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @extends {ol.format.filter.Comparison}\n * @api\n */\nconst IsNull = function(propertyName) {\n  Comparison.call(this, 'PropertyIsNull', propertyName);\n};\n\ninherits(IsNull, Comparison);\nexport default IsNull;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/IsNull.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/LessThan\n */\nimport {inherits} from '../../index.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLessThan>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @extends {ol.format.filter.ComparisonBinary}\n * @api\n */\nconst LessThan = function(propertyName, expression) {\n  ComparisonBinary.call(this, 'PropertyIsLessThan', propertyName, expression);\n};\n\ninherits(LessThan, ComparisonBinary);\nexport default LessThan;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/LessThan.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/LessThanOrEqualTo\n */\nimport {inherits} from '../../index.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsLessThanOrEqualTo>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @extends {ol.format.filter.ComparisonBinary}\n * @api\n */\nconst LessThanOrEqualTo = function(propertyName, expression) {\n  ComparisonBinary.call(this, 'PropertyIsLessThanOrEqualTo', propertyName, expression);\n};\n\ninherits(LessThanOrEqualTo, ComparisonBinary);\nexport default LessThanOrEqualTo;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/LessThanOrEqualTo.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Not\n */\nimport {inherits} from '../../index.js';\nimport Filter from '../filter/Filter.js';\n\n/**\n * @classdesc\n * Represents a logical `<Not>` operator for a filter condition.\n *\n * @constructor\n * @param {!ol.format.filter.Filter} condition Filter condition.\n * @extends {ol.format.filter.Filter}\n * @api\n */\nconst Not = function(condition) {\n\n  Filter.call(this, 'Not');\n\n  /**\n   * @public\n   * @type {!ol.format.filter.Filter}\n   */\n  this.condition = condition;\n};\n\ninherits(Not, Filter);\nexport default Not;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Not.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/NotEqualTo\n */\nimport {inherits} from '../../index.js';\nimport ComparisonBinary from '../filter/ComparisonBinary.js';\n\n/**\n * @classdesc\n * Represents a `<PropertyIsNotEqualTo>` comparison operator.\n *\n * @constructor\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @extends {ol.format.filter.ComparisonBinary}\n * @api\n */\nconst NotEqualTo = function(propertyName, expression, opt_matchCase) {\n  ComparisonBinary.call(this, 'PropertyIsNotEqualTo', propertyName, expression, opt_matchCase);\n};\n\ninherits(NotEqualTo, ComparisonBinary);\nexport default NotEqualTo;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/NotEqualTo.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Or\n */\nimport {inherits} from '../../index.js';\nimport LogicalNary from '../filter/LogicalNary.js';\n\n/**\n * @classdesc\n * Represents a logical `<Or>` operator between two ore more filter conditions.\n *\n * @constructor\n * @param {...ol.format.filter.Filter} conditions Conditions.\n * @extends {ol.format.filter.LogicalNary}\n * @api\n */\nconst Or = function(conditions) {\n  const params = ['Or'].concat(Array.prototype.slice.call(arguments));\n  LogicalNary.apply(this, params);\n};\n\ninherits(Or, LogicalNary);\nexport default Or;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Or.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter/Within\n */\nimport {inherits} from '../../index.js';\nimport Spatial from '../filter/Spatial.js';\n\n/**\n * @classdesc\n * Represents a `<Within>` operator to test whether a geometry-valued property\n * is within a given geometry.\n *\n * @constructor\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @extends {ol.format.filter.Spatial}\n * @api\n */\nconst Within = function(geometryName, geometry, opt_srsName) {\n\n  Spatial.call(this, 'Within', geometryName, geometry, opt_srsName);\n\n};\n\ninherits(Within, Spatial);\nexport default Within;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter/Within.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/filter\n */\nimport _ol_format_filter_And_ from '../format/filter/And.js';\nimport _ol_format_filter_Bbox_ from '../format/filter/Bbox.js';\nimport _ol_format_filter_Contains_ from '../format/filter/Contains.js';\nimport _ol_format_filter_During_ from '../format/filter/During.js';\nimport _ol_format_filter_EqualTo_ from '../format/filter/EqualTo.js';\nimport _ol_format_filter_GreaterThan_ from '../format/filter/GreaterThan.js';\nimport _ol_format_filter_GreaterThanOrEqualTo_ from '../format/filter/GreaterThanOrEqualTo.js';\nimport _ol_format_filter_Intersects_ from '../format/filter/Intersects.js';\nimport _ol_format_filter_IsBetween_ from '../format/filter/IsBetween.js';\nimport _ol_format_filter_IsLike_ from '../format/filter/IsLike.js';\nimport _ol_format_filter_IsNull_ from '../format/filter/IsNull.js';\nimport _ol_format_filter_LessThan_ from '../format/filter/LessThan.js';\nimport _ol_format_filter_LessThanOrEqualTo_ from '../format/filter/LessThanOrEqualTo.js';\nimport _ol_format_filter_Not_ from '../format/filter/Not.js';\nimport _ol_format_filter_NotEqualTo_ from '../format/filter/NotEqualTo.js';\nimport _ol_format_filter_Or_ from '../format/filter/Or.js';\nimport _ol_format_filter_Within_ from '../format/filter/Within.js';\nconst _ol_format_filter_ = {};\n\n\n/**\n * Create a logical `<And>` operator between two or more filter conditions.\n *\n * @param {...ol.format.filter.Filter} conditions Filter conditions.\n * @returns {!ol.format.filter.And} `<And>` operator.\n * @api\n */\n_ol_format_filter_.and = function(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(_ol_format_filter_And_, params));\n};\n\n\n/**\n * Create a logical `<Or>` operator between two or more filter conditions.\n *\n * @param {...ol.format.filter.Filter} conditions Filter conditions.\n * @returns {!ol.format.filter.Or} `<Or>` operator.\n * @api\n */\n_ol_format_filter_.or = function(conditions) {\n  const params = [null].concat(Array.prototype.slice.call(arguments));\n  return new (Function.prototype.bind.apply(_ol_format_filter_Or_, params));\n};\n\n\n/**\n * Represents a logical `<Not>` operator for a filter condition.\n *\n * @param {!ol.format.filter.Filter} condition Filter condition.\n * @returns {!ol.format.filter.Not} `<Not>` operator.\n * @api\n */\n_ol_format_filter_.not = function(condition) {\n  return new _ol_format_filter_Not_(condition);\n};\n\n\n/**\n * Create a `<BBOX>` operator to test whether a geometry-valued property\n * intersects a fixed bounding box\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.Extent} extent Extent.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!ol.format.filter.Bbox} `<BBOX>` operator.\n * @api\n */\n_ol_format_filter_.bbox = function(geometryName, extent, opt_srsName) {\n  return new _ol_format_filter_Bbox_(geometryName, extent, opt_srsName);\n};\n\n/**\n * Create a `<Contains>` operator to test whether a geometry-valued property\n * contains a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!ol.format.filter.Contains} `<Contains>` operator.\n * @api\n */\n_ol_format_filter_.contains = function(geometryName, geometry, opt_srsName) {\n  return new _ol_format_filter_Contains_(geometryName, geometry, opt_srsName);\n};\n\n/**\n * Create a `<Intersects>` operator to test whether a geometry-valued property\n * intersects a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!ol.format.filter.Intersects} `<Intersects>` operator.\n * @api\n */\n_ol_format_filter_.intersects = function(geometryName, geometry, opt_srsName) {\n  return new _ol_format_filter_Intersects_(geometryName, geometry, opt_srsName);\n};\n\n/**\n * Create a `<Within>` operator to test whether a geometry-valued property\n * is within a given geometry.\n *\n * @param {!string} geometryName Geometry name to use.\n * @param {!ol.geom.Geometry} geometry Geometry.\n * @param {string=} opt_srsName SRS name. No srsName attribute will be\n *    set on geometries when this is not provided.\n * @returns {!ol.format.filter.Within} `<Within>` operator.\n * @api\n */\n_ol_format_filter_.within = function(geometryName, geometry, opt_srsName) {\n  return new _ol_format_filter_Within_(geometryName, geometry, opt_srsName);\n};\n\n\n/**\n * Creates a `<PropertyIsEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @returns {!ol.format.filter.EqualTo} `<PropertyIsEqualTo>` operator.\n * @api\n */\n_ol_format_filter_.equalTo = function(propertyName, expression, opt_matchCase) {\n  return new _ol_format_filter_EqualTo_(propertyName, expression, opt_matchCase);\n};\n\n\n/**\n * Creates a `<PropertyIsNotEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!(string|number)} expression The value to compare.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @returns {!ol.format.filter.NotEqualTo} `<PropertyIsNotEqualTo>` operator.\n * @api\n */\n_ol_format_filter_.notEqualTo = function(propertyName, expression, opt_matchCase) {\n  return new _ol_format_filter_NotEqualTo_(propertyName, expression, opt_matchCase);\n};\n\n\n/**\n * Creates a `<PropertyIsLessThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!ol.format.filter.LessThan} `<PropertyIsLessThan>` operator.\n * @api\n */\n_ol_format_filter_.lessThan = function(propertyName, expression) {\n  return new _ol_format_filter_LessThan_(propertyName, expression);\n};\n\n\n/**\n * Creates a `<PropertyIsLessThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!ol.format.filter.LessThanOrEqualTo} `<PropertyIsLessThanOrEqualTo>` operator.\n * @api\n */\n_ol_format_filter_.lessThanOrEqualTo = function(propertyName, expression) {\n  return new _ol_format_filter_LessThanOrEqualTo_(propertyName, expression);\n};\n\n\n/**\n * Creates a `<PropertyIsGreaterThan>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!ol.format.filter.GreaterThan} `<PropertyIsGreaterThan>` operator.\n * @api\n */\n_ol_format_filter_.greaterThan = function(propertyName, expression) {\n  return new _ol_format_filter_GreaterThan_(propertyName, expression);\n};\n\n\n/**\n * Creates a `<PropertyIsGreaterThanOrEqualTo>` comparison operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} expression The value to compare.\n * @returns {!ol.format.filter.GreaterThanOrEqualTo} `<PropertyIsGreaterThanOrEqualTo>` operator.\n * @api\n */\n_ol_format_filter_.greaterThanOrEqualTo = function(propertyName, expression) {\n  return new _ol_format_filter_GreaterThanOrEqualTo_(propertyName, expression);\n};\n\n\n/**\n * Creates a `<PropertyIsNull>` comparison operator to test whether a property value\n * is null.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @returns {!ol.format.filter.IsNull} `<PropertyIsNull>` operator.\n * @api\n */\n_ol_format_filter_.isNull = function(propertyName) {\n  return new _ol_format_filter_IsNull_(propertyName);\n};\n\n\n/**\n * Creates a `<PropertyIsBetween>` comparison operator to test whether an expression\n * value lies within a range given by a lower and upper bound (inclusive).\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!number} lowerBoundary The lower bound of the range.\n * @param {!number} upperBoundary The upper bound of the range.\n * @returns {!ol.format.filter.IsBetween} `<PropertyIsBetween>` operator.\n * @api\n */\n_ol_format_filter_.between = function(propertyName, lowerBoundary, upperBoundary) {\n  return new _ol_format_filter_IsBetween_(propertyName, lowerBoundary, upperBoundary);\n};\n\n\n/**\n * Represents a `<PropertyIsLike>` comparison operator that matches a string property\n * value against a text pattern.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} pattern Text pattern.\n * @param {string=} opt_wildCard Pattern character which matches any sequence of\n *    zero or more string characters. Default is '*'.\n * @param {string=} opt_singleChar pattern character which matches any single\n *    string character. Default is '.'.\n * @param {string=} opt_escapeChar Escape character which can be used to escape\n *    the pattern characters. Default is '!'.\n * @param {boolean=} opt_matchCase Case-sensitive?\n * @returns {!ol.format.filter.IsLike} `<PropertyIsLike>` operator.\n * @api\n */\n_ol_format_filter_.like = function(propertyName, pattern,\n  opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase) {\n  return new _ol_format_filter_IsLike_(propertyName, pattern,\n    opt_wildCard, opt_singleChar, opt_escapeChar, opt_matchCase);\n};\n\n\n/**\n * Create a `<During>` temporal operator.\n *\n * @param {!string} propertyName Name of the context property to compare.\n * @param {!string} begin The begin date in ISO-8601 format.\n * @param {!string} end The end date in ISO-8601 format.\n * @returns {!ol.format.filter.During} `<During>` operator.\n * @api\n */\n_ol_format_filter_.during = function(propertyName, begin, end) {\n  return new _ol_format_filter_During_(propertyName, begin, end);\n};\nexport default _ol_format_filter_;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/filter.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/XSD\n */\nimport _ol_xml_ from '../xml.js';\nimport _ol_string_ from '../string.js';\nconst XSD = {};\n\n\n/**\n * @param {Node} node Node.\n * @return {boolean|undefined} Boolean.\n */\nXSD.readBoolean = function(node) {\n  const s = _ol_xml_.getAllTextContent(node, false);\n  return XSD.readBooleanString(s);\n};\n\n\n/**\n * @param {string} string String.\n * @return {boolean|undefined} Boolean.\n */\nXSD.readBooleanString = function(string) {\n  const m = /^\\s*(true|1)|(false|0)\\s*$/.exec(string);\n  if (m) {\n    return m[1] !== undefined || false;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} DateTime in seconds.\n */\nXSD.readDateTime = function(node) {\n  const s = _ol_xml_.getAllTextContent(node, false);\n  const dateTime = Date.parse(s);\n  return isNaN(dateTime) ? undefined : dateTime / 1000;\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Decimal.\n */\nXSD.readDecimal = function(node) {\n  const s = _ol_xml_.getAllTextContent(node, false);\n  return XSD.readDecimalString(s);\n};\n\n\n/**\n * @param {string} string String.\n * @return {number|undefined} Decimal.\n */\nXSD.readDecimalString = function(string) {\n  // FIXME check spec\n  const m = /^\\s*([+\\-]?\\d*\\.?\\d+(?:e[+\\-]?\\d+)?)\\s*$/i.exec(string);\n  if (m) {\n    return parseFloat(m[1]);\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {number|undefined} Non negative integer.\n */\nXSD.readNonNegativeInteger = function(node) {\n  const s = _ol_xml_.getAllTextContent(node, false);\n  return XSD.readNonNegativeIntegerString(s);\n};\n\n\n/**\n * @param {string} string String.\n * @return {number|undefined} Non negative integer.\n */\nXSD.readNonNegativeIntegerString = function(string) {\n  const m = /^\\s*(\\d+)\\s*$/.exec(string);\n  if (m) {\n    return parseInt(m[1], 10);\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {string|undefined} String.\n */\nXSD.readString = function(node) {\n  return _ol_xml_.getAllTextContent(node, false).trim();\n};\n\n\n/**\n * @param {Node} node Node to append a TextNode with the boolean to.\n * @param {boolean} bool Boolean.\n */\nXSD.writeBooleanTextNode = function(node, bool) {\n  XSD.writeStringTextNode(node, (bool) ? '1' : '0');\n};\n\n\n/**\n * @param {Node} node Node to append a CDATA Section with the string to.\n * @param {string} string String.\n */\nXSD.writeCDATASection = function(node, string) {\n  node.appendChild(_ol_xml_.DOCUMENT.createCDATASection(string));\n};\n\n\n/**\n * @param {Node} node Node to append a TextNode with the dateTime to.\n * @param {number} dateTime DateTime in seconds.\n */\nXSD.writeDateTimeTextNode = function(node, dateTime) {\n  const date = new Date(dateTime * 1000);\n  const string = date.getUTCFullYear() + '-' +\n      _ol_string_.padNumber(date.getUTCMonth() + 1, 2) + '-' +\n      _ol_string_.padNumber(date.getUTCDate(), 2) + 'T' +\n      _ol_string_.padNumber(date.getUTCHours(), 2) + ':' +\n      _ol_string_.padNumber(date.getUTCMinutes(), 2) + ':' +\n      _ol_string_.padNumber(date.getUTCSeconds(), 2) + 'Z';\n  node.appendChild(_ol_xml_.DOCUMENT.createTextNode(string));\n};\n\n\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} decimal Decimal.\n */\nXSD.writeDecimalTextNode = function(node, decimal) {\n  const string = decimal.toPrecision();\n  node.appendChild(_ol_xml_.DOCUMENT.createTextNode(string));\n};\n\n\n/**\n * @param {Node} node Node to append a TextNode with the decimal to.\n * @param {number} nonNegativeInteger Non negative integer.\n */\nXSD.writeNonNegativeIntegerTextNode = function(node, nonNegativeInteger) {\n  const string = nonNegativeInteger.toString();\n  node.appendChild(_ol_xml_.DOCUMENT.createTextNode(string));\n};\n\n\n/**\n * @param {Node} node Node to append a TextNode with the string to.\n * @param {string} string String.\n */\nXSD.writeStringTextNode = function(node, string) {\n  node.appendChild(_ol_xml_.DOCUMENT.createTextNode(string));\n};\nexport default XSD;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/XSD.js\n// module id = 17\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module ol/geom/MultiLineString\n */\nimport {inherits} from '../index.js';\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport LineString from '../geom/LineString.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport _ol_geom_flat_closest_ from '../geom/flat/closest.js';\nimport _ol_geom_flat_deflate_ from '../geom/flat/deflate.js';\nimport _ol_geom_flat_inflate_ from '../geom/flat/inflate.js';\nimport _ol_geom_flat_interpolate_ from '../geom/flat/interpolate.js';\nimport _ol_geom_flat_intersectsextent_ from '../geom/flat/intersectsextent.js';\nimport _ol_geom_flat_simplify_ from '../geom/flat/simplify.js';\n\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @constructor\n * @extends {ol.geom.SimpleGeometry}\n * @param {Array.<Array.<ol.Coordinate>>} coordinates Coordinates.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @api\n */\nconst MultiLineString = function(coordinates, opt_layout) {\n\n  SimpleGeometry.call(this);\n\n  /**\n   * @type {Array.<number>}\n   * @private\n   */\n  this.ends_ = [];\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.maxDelta_ = -1;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.maxDeltaRevision_ = -1;\n\n  this.setCoordinates(coordinates, opt_layout);\n\n};\n\ninherits(MultiLineString, SimpleGeometry);\n\n\n/**\n * Append the passed linestring to the multilinestring.\n * @param {ol.geom.LineString} lineString LineString.\n * @api\n */\nMultiLineString.prototype.appendLineString = function(lineString) {\n  if (!this.flatCoordinates) {\n    this.flatCoordinates = lineString.getFlatCoordinates().slice();\n  } else {\n    extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n  }\n  this.ends_.push(this.flatCoordinates.length);\n  this.changed();\n};\n\n\n/**\n * Make a complete copy of the geometry.\n * @return {!ol.geom.MultiLineString} Clone.\n * @override\n * @api\n */\nMultiLineString.prototype.clone = function() {\n  const multiLineString = new MultiLineString(null);\n  multiLineString.setFlatCoordinates(\n    this.layout, this.flatCoordinates.slice(), this.ends_.slice());\n  return multiLineString;\n};\n\n\n/**\n * @inheritDoc\n */\nMultiLineString.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {\n  if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n    return minSquaredDistance;\n  }\n  if (this.maxDeltaRevision_ != this.getRevision()) {\n    this.maxDelta_ = Math.sqrt(_ol_geom_flat_closest_.getsMaxSquaredDelta(\n      this.flatCoordinates, 0, this.ends_, this.stride, 0));\n    this.maxDeltaRevision_ = this.getRevision();\n  }\n  return _ol_geom_flat_closest_.getsClosestPoint(\n    this.flatCoordinates, 0, this.ends_, this.stride,\n    this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n};\n\n\n/**\n * Returns the coordinate at `m` using linear interpolation, or `null` if no\n * such coordinate exists.\n *\n * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n * M will return the first coordinate and Ms greater than the last M will\n * return the last coordinate.\n *\n * `opt_interpolate` controls interpolation between consecutive LineStrings\n * within the MultiLineString. If `opt_interpolate` is `true` the coordinates\n * will be linearly interpolated between the last coordinate of one LineString\n * and the first coordinate of the next LineString.  If `opt_interpolate` is\n * `false` then the function will return `null` for Ms falling between\n * LineStrings.\n *\n * @param {number} m M.\n * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.\n * @param {boolean=} opt_interpolate Interpolate. Default is `false`.\n * @return {ol.Coordinate} Coordinate.\n * @api\n */\nMultiLineString.prototype.getCoordinateAtM = function(m, opt_extrapolate, opt_interpolate) {\n  if ((this.layout != GeometryLayout.XYM &&\n       this.layout != GeometryLayout.XYZM) ||\n      this.flatCoordinates.length === 0) {\n    return null;\n  }\n  const extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n  const interpolate = opt_interpolate !== undefined ? opt_interpolate : false;\n  return _ol_geom_flat_interpolate_.lineStringsCoordinateAtM(this.flatCoordinates, 0,\n    this.ends_, this.stride, m, extrapolate, interpolate);\n};\n\n\n/**\n * Return the coordinates of the multilinestring.\n * @return {Array.<Array.<ol.Coordinate>>} Coordinates.\n * @override\n * @api\n */\nMultiLineString.prototype.getCoordinates = function() {\n  return _ol_geom_flat_inflate_.coordinatess(\n    this.flatCoordinates, 0, this.ends_, this.stride);\n};\n\n\n/**\n * @return {Array.<number>} Ends.\n */\nMultiLineString.prototype.getEnds = function() {\n  return this.ends_;\n};\n\n\n/**\n * Return the linestring at the specified index.\n * @param {number} index Index.\n * @return {ol.geom.LineString} LineString.\n * @api\n */\nMultiLineString.prototype.getLineString = function(index) {\n  if (index < 0 || this.ends_.length <= index) {\n    return null;\n  }\n  const lineString = new LineString(null);\n  lineString.setFlatCoordinates(this.layout, this.flatCoordinates.slice(\n    index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]));\n  return lineString;\n};\n\n\n/**\n * Return the linestrings of this multilinestring.\n * @return {Array.<ol.geom.LineString>} LineStrings.\n * @api\n */\nMultiLineString.prototype.getLineStrings = function() {\n  const flatCoordinates = this.flatCoordinates;\n  const ends = this.ends_;\n  const layout = this.layout;\n  /** @type {Array.<ol.geom.LineString>} */\n  const lineStrings = [];\n  let offset = 0;\n  let i, ii;\n  for (i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const lineString = new LineString(null);\n    lineString.setFlatCoordinates(layout, flatCoordinates.slice(offset, end));\n    lineStrings.push(lineString);\n    offset = end;\n  }\n  return lineStrings;\n};\n\n\n/**\n * @return {Array.<number>} Flat midpoints.\n */\nMultiLineString.prototype.getFlatMidpoints = function() {\n  const midpoints = [];\n  const flatCoordinates = this.flatCoordinates;\n  let offset = 0;\n  const ends = this.ends_;\n  const stride = this.stride;\n  let i, ii;\n  for (i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const midpoint = _ol_geom_flat_interpolate_.lineString(\n      flatCoordinates, offset, end, stride, 0.5);\n    extend(midpoints, midpoint);\n    offset = end;\n  }\n  return midpoints;\n};\n\n\n/**\n * @inheritDoc\n */\nMultiLineString.prototype.getSimplifiedGeometryInternal = function(squaredTolerance) {\n  const simplifiedFlatCoordinates = [];\n  const simplifiedEnds = [];\n  simplifiedFlatCoordinates.length = _ol_geom_flat_simplify_.douglasPeuckers(\n    this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance,\n    simplifiedFlatCoordinates, 0, simplifiedEnds);\n  const simplifiedMultiLineString = new MultiLineString(null);\n  simplifiedMultiLineString.setFlatCoordinates(\n    GeometryLayout.XY, simplifiedFlatCoordinates, simplifiedEnds);\n  return simplifiedMultiLineString;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nMultiLineString.prototype.getType = function() {\n  return GeometryType.MULTI_LINE_STRING;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nMultiLineString.prototype.intersectsExtent = function(extent) {\n  return _ol_geom_flat_intersectsextent_.lineStrings(\n    this.flatCoordinates, 0, this.ends_, this.stride, extent);\n};\n\n\n/**\n * Set the coordinates of the multilinestring.\n * @param {Array.<Array.<ol.Coordinate>>} coordinates Coordinates.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @override\n * @api\n */\nMultiLineString.prototype.setCoordinates = function(coordinates, opt_layout) {\n  if (!coordinates) {\n    this.setFlatCoordinates(GeometryLayout.XY, null, this.ends_);\n  } else {\n    this.setLayout(opt_layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = _ol_geom_flat_deflate_.coordinatess(\n      this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n};\n\n\n/**\n * @param {ol.geom.GeometryLayout} layout Layout.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {Array.<number>} ends Ends.\n */\nMultiLineString.prototype.setFlatCoordinates = function(layout, flatCoordinates, ends) {\n  this.setFlatCoordinatesInternal(layout, flatCoordinates);\n  this.ends_ = ends;\n  this.changed();\n};\n\n\n/**\n * @param {Array.<ol.geom.LineString>} lineStrings LineStrings.\n */\nMultiLineString.prototype.setLineStrings = function(lineStrings) {\n  let layout = this.getLayout();\n  const flatCoordinates = [];\n  const ends = [];\n  let i, ii;\n  for (i = 0, ii = lineStrings.length; i < ii; ++i) {\n    const lineString = lineStrings[i];\n    if (i === 0) {\n      layout = lineString.getLayout();\n    }\n    extend(flatCoordinates, lineString.getFlatCoordinates());\n    ends.push(flatCoordinates.length);\n  }\n  this.setFlatCoordinates(layout, flatCoordinates, ends);\n};\nexport default MultiLineString;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/geom/MultiLineString.js\n// module id = 18\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23","/**\n * @module ol/format/JSONFeature\n */\nimport {inherits} from '../index.js';\nimport FeatureFormat from '../format/Feature.js';\nimport FormatType from '../format/FormatType.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for JSON feature formats.\n *\n * @constructor\n * @abstract\n * @extends {ol.format.Feature}\n */\nconst JSONFeature = function() {\n  FeatureFormat.call(this);\n};\n\ninherits(JSONFeature, FeatureFormat);\n\n\n/**\n * @param {Document|Node|Object|string} source Source.\n * @return {Object} Object.\n */\nfunction getObject(source) {\n  if (typeof source === 'string') {\n    const object = JSON.parse(source);\n    return object ? /** @type {Object} */ (object) : null;\n  } else if (source !== null) {\n    return source;\n  } else {\n    return null;\n  }\n}\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.getType = function() {\n  return FormatType.JSON;\n};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.readFeature = function(source, opt_options) {\n  return this.readFeatureFromObject(\n    getObject(source), this.getReadOptions(source, opt_options));\n};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.readFeatures = function(source, opt_options) {\n  return this.readFeaturesFromObject(\n    getObject(source), this.getReadOptions(source, opt_options));\n};\n\n\n/**\n * @abstract\n * @param {Object} object Object.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @protected\n * @return {ol.Feature} Feature.\n */\nJSONFeature.prototype.readFeatureFromObject = function(object, opt_options) {};\n\n\n/**\n * @abstract\n * @param {Object} object Object.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @protected\n * @return {Array.<ol.Feature>} Features.\n */\nJSONFeature.prototype.readFeaturesFromObject = function(object, opt_options) {};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.readGeometry = function(source, opt_options) {\n  return this.readGeometryFromObject(\n    getObject(source), this.getReadOptions(source, opt_options));\n};\n\n\n/**\n * @abstract\n * @param {Object} object Object.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @protected\n * @return {ol.geom.Geometry} Geometry.\n */\nJSONFeature.prototype.readGeometryFromObject = function(object, opt_options) {};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.readProjection = function(source) {\n  return this.readProjectionFromObject(getObject(source));\n};\n\n\n/**\n * @abstract\n * @param {Object} object Object.\n * @protected\n * @return {ol.proj.Projection} Projection.\n */\nJSONFeature.prototype.readProjectionFromObject = function(object) {};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.writeFeature = function(feature, opt_options) {\n  return JSON.stringify(this.writeFeatureObject(feature, opt_options));\n};\n\n\n/**\n * @abstract\n * @param {ol.Feature} feature Feature.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {Object} Object.\n */\nJSONFeature.prototype.writeFeatureObject = function(feature, opt_options) {};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.writeFeatures = function(features, opt_options) {\n  return JSON.stringify(this.writeFeaturesObject(features, opt_options));\n};\n\n\n/**\n * @abstract\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {Object} Object.\n */\nJSONFeature.prototype.writeFeaturesObject = function(features, opt_options) {};\n\n\n/**\n * @inheritDoc\n */\nJSONFeature.prototype.writeGeometry = function(geometry, opt_options) {\n  return JSON.stringify(this.writeGeometryObject(geometry, opt_options));\n};\n\n\n/**\n * @abstract\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {Object} Object.\n */\nJSONFeature.prototype.writeGeometryObject = function(geometry, opt_options) {};\nexport default JSONFeature;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/JSONFeature.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/GeoJSON\n */\n// TODO: serialize dataProjection as crs member when writing\n// see https://github.com/openlayers/openlayers/issues/2078\n\nimport {inherits} from '../index.js';\nimport {assert} from '../asserts.js';\nimport Feature from '../Feature.js';\nimport {transformWithOptions} from '../format/Feature.js';\nimport JSONFeature from '../format/JSONFeature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assign, isEmpty} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @constructor\n * @extends {ol.format.JSONFeature}\n * @param {olx.format.GeoJSONOptions=} opt_options Options.\n * @api\n */\nconst GeoJSON = function(opt_options) {\n\n  const options = opt_options ? opt_options : {};\n\n  JSONFeature.call(this);\n\n  /**\n   * @inheritDoc\n   */\n  this.defaultDataProjection = getProjection(\n    options.defaultDataProjection ?\n      options.defaultDataProjection : 'EPSG:4326');\n\n\n  if (options.featureProjection) {\n    this.defaultFeatureProjection = getProjection(options.featureProjection);\n  }\n\n  /**\n   * Name of the geometry attribute for features.\n   * @type {string|undefined}\n   * @private\n   */\n  this.geometryName_ = options.geometryName;\n\n  /**\n   * Look for the geometry name in the feature GeoJSON\n   * @type {boolean|undefined}\n   * @private\n   */\n  this.extractGeometryName_ = options.extractGeometryName;\n\n};\n\ninherits(GeoJSON, JSONFeature);\n\n\n/**\n * @const\n * @type {Object.<string, function(GeoJSONObject): ol.geom.Geometry>}\n */\nconst GEOMETRY_READERS = {\n  'Point': readPointGeometry,\n  'LineString': readLineStringGeometry,\n  'Polygon': readPolygonGeometry,\n  'MultiPoint': readMultiPointGeometry,\n  'MultiLineString': readMultiLineStringGeometry,\n  'MultiPolygon': readMultiPolygonGeometry,\n  'GeometryCollection': readGeometryCollectionGeometry\n};\n\n\n/**\n * @const\n * @type {Object.<string, function(ol.geom.Geometry, olx.format.WriteOptions=): (GeoJSONGeometry|GeoJSONGeometryCollection)>}\n */\nconst GEOMETRY_WRITERS = {\n  'Point': writePointGeometry,\n  'LineString': writeLineStringGeometry,\n  'Polygon': writePolygonGeometry,\n  'MultiPoint': writeMultiPointGeometry,\n  'MultiLineString': writeMultiLineStringGeometry,\n  'MultiPolygon': writeMultiPolygonGeometry,\n  'GeometryCollection': writeGeometryCollectionGeometry,\n  'Circle': writeEmptyGeometryCollectionGeometry\n};\n\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.geom.Geometry} Geometry.\n */\nfunction readGeometry(object, opt_options) {\n  if (!object) {\n    return null;\n  }\n  const geometryReader = GEOMETRY_READERS[object.type];\n  return (\n    /** @type {ol.geom.Geometry} */ transformWithOptions(\n      geometryReader(object), false, opt_options)\n  );\n}\n\n\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.geom.GeometryCollection} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, opt_options) {\n  const geometries = object.geometries.map(\n    /**\n       * @param {GeoJSONGeometry} geometry Geometry.\n       * @return {ol.geom.Geometry} geometry Geometry.\n       */\n    function(geometry) {\n      return readGeometry(geometry, opt_options);\n    });\n  return new GeometryCollection(geometries);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {ol.geom.Point} Point.\n */\nfunction readPointGeometry(object) {\n  return new Point(object.coordinates);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {ol.geom.LineString} LineString.\n */\nfunction readLineStringGeometry(object) {\n  return new LineString(object.coordinates);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {ol.geom.MultiLineString} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n  return new MultiLineString(object.coordinates);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {ol.geom.MultiPoint} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n  return new MultiPoint(object.coordinates);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {ol.geom.MultiPolygon} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n  return new MultiPolygon(object.coordinates);\n}\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @return {ol.geom.Polygon} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  return new Polygon(object.coordinates);\n}\n\n\n/**\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry|GeoJSONGeometryCollection} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, opt_options) {\n  const geometryWriter = GEOMETRY_WRITERS[geometry.getType()];\n  return geometryWriter(/** @type {ol.geom.Geometry} */ (\n    transformWithOptions(geometry, true, opt_options)), opt_options);\n}\n\n\n/**\n * @param {ol.geom.Geometry} geometry Geometry.\n * @return {GeoJSONGeometryCollection} Empty GeoJSON geometry collection.\n */\nfunction writeEmptyGeometryCollectionGeometry(geometry) {\n  return /** @type {GeoJSONGeometryCollection} */ ({\n    type: 'GeometryCollection',\n    geometries: []\n  });\n}\n\n\n/**\n * @param {ol.geom.GeometryCollection} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, opt_options) {\n  const geometries = geometry.getGeometriesArray().map(function(geometry) {\n    const options = assign({}, opt_options);\n    delete options.featureProjection;\n    return writeGeometry(geometry, options);\n  });\n  return /** @type {GeoJSONGeometryCollection} */ ({\n    type: 'GeometryCollection',\n    geometries: geometries\n  });\n}\n\n\n/**\n * @param {ol.geom.LineString} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'LineString',\n    coordinates: geometry.getCoordinates()\n  });\n}\n\n\n/**\n * @param {ol.geom.MultiLineString} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates()\n  });\n}\n\n\n/**\n * @param {ol.geom.MultiPoint} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates()\n  });\n}\n\n\n/**\n * @param {ol.geom.MultiPolygon} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n  let right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right)\n  });\n}\n\n\n/**\n * @param {ol.geom.Point} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'Point',\n    coordinates: geometry.getCoordinates()\n  });\n}\n\n\n/**\n * @param {ol.geom.Polygon} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, opt_options) {\n  let right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right)\n  });\n}\n\n\n/**\n * Read a feature from a GeoJSON Feature source.  Only works for Feature or\n * geometry types.  Use {@link ol.format.GeoJSON#readFeatures} to read\n * FeatureCollection source. If feature at source has an id, it will be used\n * as Feature id by calling {@link ol.Feature#setId} internally.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.Feature} Feature.\n * @api\n */\nGeoJSON.prototype.readFeature;\n\n\n/**\n * Read all features from a GeoJSON source.  Works for all GeoJSON types.\n * If the source includes only geometries, features will be created with those\n * geometries.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {Array.<ol.Feature>} Features.\n * @api\n */\nGeoJSON.prototype.readFeatures;\n\n\n/**\n * @inheritDoc\n */\nGeoJSON.prototype.readFeatureFromObject = function(object, opt_options) {\n  /**\n   * @type {GeoJSONFeature}\n   */\n  let geoJSONFeature = null;\n  if (object.type === 'Feature') {\n    geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\n  } else {\n    geoJSONFeature = /** @type {GeoJSONFeature} */ ({\n      type: 'Feature',\n      geometry: /** @type {GeoJSONGeometry|GeoJSONGeometryCollection} */ (object)\n    });\n  }\n\n  const geometry = readGeometry(geoJSONFeature.geometry, opt_options);\n  const feature = new Feature();\n  if (this.geometryName_) {\n    feature.setGeometryName(this.geometryName_);\n  } else if (this.extractGeometryName_ && geoJSONFeature.geometry_name !== undefined) {\n    feature.setGeometryName(geoJSONFeature.geometry_name);\n  }\n  feature.setGeometry(geometry);\n  if (geoJSONFeature.id !== undefined) {\n    feature.setId(geoJSONFeature.id);\n  }\n  if (geoJSONFeature.properties) {\n    feature.setProperties(geoJSONFeature.properties);\n  }\n  return feature;\n};\n\n\n/**\n * @inheritDoc\n */\nGeoJSON.prototype.readFeaturesFromObject = function(object, opt_options) {\n  const geoJSONObject = /** @type {GeoJSONObject} */ (object);\n  /** @type {Array.<ol.Feature>} */\n  let features = null;\n  if (geoJSONObject.type === 'FeatureCollection') {\n    const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */\n        (object);\n    features = [];\n    const geoJSONFeatures = geoJSONFeatureCollection.features;\n    let i, ii;\n    for (i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n      features.push(this.readFeatureFromObject(geoJSONFeatures[i],\n        opt_options));\n    }\n  } else {\n    features = [this.readFeatureFromObject(object, opt_options)];\n  }\n  return features;\n};\n\n\n/**\n * Read a geometry from a GeoJSON source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.geom.Geometry} Geometry.\n * @api\n */\nGeoJSON.prototype.readGeometry;\n\n\n/**\n * @inheritDoc\n */\nGeoJSON.prototype.readGeometryFromObject = function(object, opt_options) {\n  return readGeometry(/** @type {GeoJSONGeometry} */ (object), opt_options);\n};\n\n\n/**\n * Read the projection from a GeoJSON source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @return {ol.proj.Projection} Projection.\n * @api\n */\nGeoJSON.prototype.readProjection;\n\n\n/**\n * @inheritDoc\n */\nGeoJSON.prototype.readProjectionFromObject = function(object) {\n  const geoJSONObject = /** @type {GeoJSONObject} */ (object);\n  const crs = geoJSONObject.crs;\n  let projection;\n  if (crs) {\n    if (crs.type == 'name') {\n      projection = getProjection(crs.properties.name);\n    } else {\n      assert(false, 36); // Unknown SRS type\n    }\n  } else {\n    projection = this.defaultDataProjection;\n  }\n  return /** @type {ol.proj.Projection} */ (projection);\n};\n\n\n/**\n * Encode a feature as a GeoJSON Feature string.\n *\n * @function\n * @param {ol.Feature} feature Feature.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {string} GeoJSON.\n * @override\n * @api\n */\nGeoJSON.prototype.writeFeature;\n\n\n/**\n * Encode a feature as a GeoJSON Feature object.\n *\n * @param {ol.Feature} feature Feature.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONFeature} Object.\n * @override\n * @api\n */\nGeoJSON.prototype.writeFeatureObject = function(feature, opt_options) {\n  opt_options = this.adaptOptions(opt_options);\n\n  const object = /** @type {GeoJSONFeature} */ ({\n    'type': 'Feature'\n  });\n  const id = feature.getId();\n  if (id !== undefined) {\n    object.id = id;\n  }\n  const geometry = feature.getGeometry();\n  if (geometry) {\n    object.geometry = writeGeometry(geometry, opt_options);\n  } else {\n    object.geometry = null;\n  }\n  const properties = feature.getProperties();\n  delete properties[feature.getGeometryName()];\n  if (!isEmpty(properties)) {\n    object.properties = properties;\n  } else {\n    object.properties = null;\n  }\n  return object;\n};\n\n\n/**\n * Encode an array of features as GeoJSON.\n *\n * @function\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {string} GeoJSON.\n * @api\n */\nGeoJSON.prototype.writeFeatures;\n\n\n/**\n * Encode an array of features as a GeoJSON object.\n *\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONFeatureCollection} GeoJSON Object.\n * @override\n * @api\n */\nGeoJSON.prototype.writeFeaturesObject = function(features, opt_options) {\n  opt_options = this.adaptOptions(opt_options);\n  const objects = [];\n  let i, ii;\n  for (i = 0, ii = features.length; i < ii; ++i) {\n    objects.push(this.writeFeatureObject(features[i], opt_options));\n  }\n  return /** @type {GeoJSONFeatureCollection} */ ({\n    type: 'FeatureCollection',\n    features: objects\n  });\n};\n\n\n/**\n * Encode a geometry as a GeoJSON string.\n *\n * @function\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {string} GeoJSON.\n * @api\n */\nGeoJSON.prototype.writeGeometry;\n\n\n/**\n * Encode a geometry as a GeoJSON object.\n *\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n * @override\n * @api\n */\nGeoJSON.prototype.writeGeometryObject = function(geometry, opt_options) {\n  return writeGeometry(geometry, this.adaptOptions(opt_options));\n};\nexport default GeoJSON;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/GeoJSON.js\n// module id = null\n// module chunks = ","/**\n * @module ol/geom/MultiPoint\n */\nimport {inherits} from '../index.js';\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY, containsXY} from '../extent.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport Point from '../geom/Point.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport _ol_geom_flat_deflate_ from '../geom/flat/deflate.js';\nimport _ol_geom_flat_inflate_ from '../geom/flat/inflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @constructor\n * @extends {ol.geom.SimpleGeometry}\n * @param {Array.<ol.Coordinate>} coordinates Coordinates.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @api\n */\nconst MultiPoint = function(coordinates, opt_layout) {\n  SimpleGeometry.call(this);\n  this.setCoordinates(coordinates, opt_layout);\n};\n\ninherits(MultiPoint, SimpleGeometry);\n\n\n/**\n * Append the passed point to this multipoint.\n * @param {ol.geom.Point} point Point.\n * @api\n */\nMultiPoint.prototype.appendPoint = function(point) {\n  if (!this.flatCoordinates) {\n    this.flatCoordinates = point.getFlatCoordinates().slice();\n  } else {\n    extend(this.flatCoordinates, point.getFlatCoordinates());\n  }\n  this.changed();\n};\n\n\n/**\n * Make a complete copy of the geometry.\n * @return {!ol.geom.MultiPoint} Clone.\n * @override\n * @api\n */\nMultiPoint.prototype.clone = function() {\n  const multiPoint = new MultiPoint(null);\n  multiPoint.setFlatCoordinates(this.layout, this.flatCoordinates.slice());\n  return multiPoint;\n};\n\n\n/**\n * @inheritDoc\n */\nMultiPoint.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {\n  if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n    return minSquaredDistance;\n  }\n  const flatCoordinates = this.flatCoordinates;\n  const stride = this.stride;\n  let i, ii, j;\n  for (i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n    const squaredDistance = squaredDx(\n      x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (j = 0; j < stride; ++j) {\n        closestPoint[j] = flatCoordinates[i + j];\n      }\n      closestPoint.length = stride;\n    }\n  }\n  return minSquaredDistance;\n};\n\n\n/**\n * Return the coordinates of the multipoint.\n * @return {Array.<ol.Coordinate>} Coordinates.\n * @override\n * @api\n */\nMultiPoint.prototype.getCoordinates = function() {\n  return _ol_geom_flat_inflate_.coordinates(\n    this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n};\n\n\n/**\n * Return the point at the specified index.\n * @param {number} index Index.\n * @return {ol.geom.Point} Point.\n * @api\n */\nMultiPoint.prototype.getPoint = function(index) {\n  const n = !this.flatCoordinates ?\n    0 : this.flatCoordinates.length / this.stride;\n  if (index < 0 || n <= index) {\n    return null;\n  }\n  const point = new Point(null);\n  point.setFlatCoordinates(this.layout, this.flatCoordinates.slice(\n    index * this.stride, (index + 1) * this.stride));\n  return point;\n};\n\n\n/**\n * Return the points of this multipoint.\n * @return {Array.<ol.geom.Point>} Points.\n * @api\n */\nMultiPoint.prototype.getPoints = function() {\n  const flatCoordinates = this.flatCoordinates;\n  const layout = this.layout;\n  const stride = this.stride;\n  /** @type {Array.<ol.geom.Point>} */\n  const points = [];\n  let i, ii;\n  for (i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n    const point = new Point(null);\n    point.setFlatCoordinates(layout, flatCoordinates.slice(i, i + stride));\n    points.push(point);\n  }\n  return points;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nMultiPoint.prototype.getType = function() {\n  return GeometryType.MULTI_POINT;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nMultiPoint.prototype.intersectsExtent = function(extent) {\n  const flatCoordinates = this.flatCoordinates;\n  const stride = this.stride;\n  let i, ii, x, y;\n  for (i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n    x = flatCoordinates[i];\n    y = flatCoordinates[i + 1];\n    if (containsXY(extent, x, y)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * Set the coordinates of the multipoint.\n * @param {Array.<ol.Coordinate>} coordinates Coordinates.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @override\n * @api\n */\nMultiPoint.prototype.setCoordinates = function(coordinates, opt_layout) {\n  if (!coordinates) {\n    this.setFlatCoordinates(GeometryLayout.XY, null);\n  } else {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = _ol_geom_flat_deflate_.coordinates(\n      this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  }\n};\n\n\n/**\n * @param {ol.geom.GeometryLayout} layout Layout.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n */\nMultiPoint.prototype.setFlatCoordinates = function(layout, flatCoordinates) {\n  this.setFlatCoordinatesInternal(layout, flatCoordinates);\n  this.changed();\n};\nexport default MultiPoint;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/geom/MultiPoint.js\n// module id = 20\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23","/**\n * @module ol/geom/MultiPolygon\n */\nimport {inherits} from '../index.js';\nimport {extend} from '../array.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport Polygon from '../geom/Polygon.js';\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\nimport _ol_geom_flat_area_ from '../geom/flat/area.js';\nimport _ol_geom_flat_center_ from '../geom/flat/center.js';\nimport _ol_geom_flat_closest_ from '../geom/flat/closest.js';\nimport _ol_geom_flat_contains_ from '../geom/flat/contains.js';\nimport _ol_geom_flat_deflate_ from '../geom/flat/deflate.js';\nimport _ol_geom_flat_inflate_ from '../geom/flat/inflate.js';\nimport _ol_geom_flat_interiorpoint_ from '../geom/flat/interiorpoint.js';\nimport _ol_geom_flat_intersectsextent_ from '../geom/flat/intersectsextent.js';\nimport _ol_geom_flat_orient_ from '../geom/flat/orient.js';\nimport _ol_geom_flat_simplify_ from '../geom/flat/simplify.js';\n\n/**\n * @classdesc\n * Multi-polygon geometry.\n *\n * @constructor\n * @extends {ol.geom.SimpleGeometry}\n * @param {Array.<Array.<Array.<ol.Coordinate>>>} coordinates Coordinates.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @api\n */\nconst MultiPolygon = function(coordinates, opt_layout) {\n\n  SimpleGeometry.call(this);\n\n  /**\n   * @type {Array.<Array.<number>>}\n   * @private\n   */\n  this.endss_ = [];\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.flatInteriorPointsRevision_ = -1;\n\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n  this.flatInteriorPoints_ = null;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.maxDelta_ = -1;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.maxDeltaRevision_ = -1;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.orientedRevision_ = -1;\n\n  /**\n   * @private\n   * @type {Array.<number>}\n   */\n  this.orientedFlatCoordinates_ = null;\n\n  this.setCoordinates(coordinates, opt_layout);\n\n};\n\ninherits(MultiPolygon, SimpleGeometry);\n\n\n/**\n * Append the passed polygon to this multipolygon.\n * @param {ol.geom.Polygon} polygon Polygon.\n * @api\n */\nMultiPolygon.prototype.appendPolygon = function(polygon) {\n  /** @type {Array.<number>} */\n  let ends;\n  if (!this.flatCoordinates) {\n    this.flatCoordinates = polygon.getFlatCoordinates().slice();\n    ends = polygon.getEnds().slice();\n    this.endss_.push();\n  } else {\n    const offset = this.flatCoordinates.length;\n    extend(this.flatCoordinates, polygon.getFlatCoordinates());\n    ends = polygon.getEnds().slice();\n    let i, ii;\n    for (i = 0, ii = ends.length; i < ii; ++i) {\n      ends[i] += offset;\n    }\n  }\n  this.endss_.push(ends);\n  this.changed();\n};\n\n\n/**\n * Make a complete copy of the geometry.\n * @return {!ol.geom.MultiPolygon} Clone.\n * @override\n * @api\n */\nMultiPolygon.prototype.clone = function() {\n  const multiPolygon = new MultiPolygon(null);\n\n  const len = this.endss_.length;\n  const newEndss = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    newEndss[i] = this.endss_[i].slice();\n  }\n\n  multiPolygon.setFlatCoordinates(\n    this.layout, this.flatCoordinates.slice(), newEndss);\n  return multiPolygon;\n};\n\n\n/**\n * @inheritDoc\n */\nMultiPolygon.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {\n  if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n    return minSquaredDistance;\n  }\n  if (this.maxDeltaRevision_ != this.getRevision()) {\n    this.maxDelta_ = Math.sqrt(_ol_geom_flat_closest_.getssMaxSquaredDelta(\n      this.flatCoordinates, 0, this.endss_, this.stride, 0));\n    this.maxDeltaRevision_ = this.getRevision();\n  }\n  return _ol_geom_flat_closest_.getssClosestPoint(\n    this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride,\n    this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n};\n\n\n/**\n * @inheritDoc\n */\nMultiPolygon.prototype.containsXY = function(x, y) {\n  return _ol_geom_flat_contains_.linearRingssContainsXY(\n    this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, x, y);\n};\n\n\n/**\n * Return the area of the multipolygon on projected plane.\n * @return {number} Area (on projected plane).\n * @api\n */\nMultiPolygon.prototype.getArea = function() {\n  return _ol_geom_flat_area_.linearRingss(\n    this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);\n};\n\n\n/**\n * Get the coordinate array for this geometry.  This array has the structure\n * of a GeoJSON coordinate array for multi-polygons.\n *\n * @param {boolean=} opt_right Orient coordinates according to the right-hand\n *     rule (counter-clockwise for exterior and clockwise for interior rings).\n *     If `false`, coordinates will be oriented according to the left-hand rule\n *     (clockwise for exterior and counter-clockwise for interior rings).\n *     By default, coordinate orientation will depend on how the geometry was\n *     constructed.\n * @return {Array.<Array.<Array.<ol.Coordinate>>>} Coordinates.\n * @override\n * @api\n */\nMultiPolygon.prototype.getCoordinates = function(opt_right) {\n  let flatCoordinates;\n  if (opt_right !== undefined) {\n    flatCoordinates = this.getOrientedFlatCoordinates().slice();\n    _ol_geom_flat_orient_.orientLinearRingss(\n      flatCoordinates, 0, this.endss_, this.stride, opt_right);\n  } else {\n    flatCoordinates = this.flatCoordinates;\n  }\n\n  return _ol_geom_flat_inflate_.coordinatesss(\n    flatCoordinates, 0, this.endss_, this.stride);\n};\n\n\n/**\n * @return {Array.<Array.<number>>} Endss.\n */\nMultiPolygon.prototype.getEndss = function() {\n  return this.endss_;\n};\n\n\n/**\n * @return {Array.<number>} Flat interior points.\n */\nMultiPolygon.prototype.getFlatInteriorPoints = function() {\n  if (this.flatInteriorPointsRevision_ != this.getRevision()) {\n    const flatCenters = _ol_geom_flat_center_.linearRingss(\n      this.flatCoordinates, 0, this.endss_, this.stride);\n    this.flatInteriorPoints_ = _ol_geom_flat_interiorpoint_.linearRingss(\n      this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride,\n      flatCenters);\n    this.flatInteriorPointsRevision_ = this.getRevision();\n  }\n  return this.flatInteriorPoints_;\n};\n\n\n/**\n * Return the interior points as {@link ol.geom.MultiPoint multipoint}.\n * @return {ol.geom.MultiPoint} Interior points as XYM coordinates, where M is\n * the length of the horizontal intersection that the point belongs to.\n * @api\n */\nMultiPolygon.prototype.getInteriorPoints = function() {\n  const interiorPoints = new MultiPoint(null);\n  interiorPoints.setFlatCoordinates(GeometryLayout.XYM,\n    this.getFlatInteriorPoints().slice());\n  return interiorPoints;\n};\n\n\n/**\n * @return {Array.<number>} Oriented flat coordinates.\n */\nMultiPolygon.prototype.getOrientedFlatCoordinates = function() {\n  if (this.orientedRevision_ != this.getRevision()) {\n    const flatCoordinates = this.flatCoordinates;\n    if (_ol_geom_flat_orient_.linearRingssAreOriented(\n      flatCoordinates, 0, this.endss_, this.stride)) {\n      this.orientedFlatCoordinates_ = flatCoordinates;\n    } else {\n      this.orientedFlatCoordinates_ = flatCoordinates.slice();\n      this.orientedFlatCoordinates_.length =\n          _ol_geom_flat_orient_.orientLinearRingss(\n            this.orientedFlatCoordinates_, 0, this.endss_, this.stride);\n    }\n    this.orientedRevision_ = this.getRevision();\n  }\n  return this.orientedFlatCoordinates_;\n};\n\n\n/**\n * @inheritDoc\n */\nMultiPolygon.prototype.getSimplifiedGeometryInternal = function(squaredTolerance) {\n  const simplifiedFlatCoordinates = [];\n  const simplifiedEndss = [];\n  simplifiedFlatCoordinates.length = _ol_geom_flat_simplify_.quantizess(\n    this.flatCoordinates, 0, this.endss_, this.stride,\n    Math.sqrt(squaredTolerance),\n    simplifiedFlatCoordinates, 0, simplifiedEndss);\n  const simplifiedMultiPolygon = new MultiPolygon(null);\n  simplifiedMultiPolygon.setFlatCoordinates(\n    GeometryLayout.XY, simplifiedFlatCoordinates, simplifiedEndss);\n  return simplifiedMultiPolygon;\n};\n\n\n/**\n * Return the polygon at the specified index.\n * @param {number} index Index.\n * @return {ol.geom.Polygon} Polygon.\n * @api\n */\nMultiPolygon.prototype.getPolygon = function(index) {\n  if (index < 0 || this.endss_.length <= index) {\n    return null;\n  }\n  let offset;\n  if (index === 0) {\n    offset = 0;\n  } else {\n    const prevEnds = this.endss_[index - 1];\n    offset = prevEnds[prevEnds.length - 1];\n  }\n  const ends = this.endss_[index].slice();\n  const end = ends[ends.length - 1];\n  if (offset !== 0) {\n    let i, ii;\n    for (i = 0, ii = ends.length; i < ii; ++i) {\n      ends[i] -= offset;\n    }\n  }\n  const polygon = new Polygon(null);\n  polygon.setFlatCoordinates(\n    this.layout, this.flatCoordinates.slice(offset, end), ends);\n  return polygon;\n};\n\n\n/**\n * Return the polygons of this multipolygon.\n * @return {Array.<ol.geom.Polygon>} Polygons.\n * @api\n */\nMultiPolygon.prototype.getPolygons = function() {\n  const layout = this.layout;\n  const flatCoordinates = this.flatCoordinates;\n  const endss = this.endss_;\n  const polygons = [];\n  let offset = 0;\n  let i, ii, j, jj;\n  for (i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i].slice();\n    const end = ends[ends.length - 1];\n    if (offset !== 0) {\n      for (j = 0, jj = ends.length; j < jj; ++j) {\n        ends[j] -= offset;\n      }\n    }\n    const polygon = new Polygon(null);\n    polygon.setFlatCoordinates(\n      layout, flatCoordinates.slice(offset, end), ends);\n    polygons.push(polygon);\n    offset = end;\n  }\n  return polygons;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nMultiPolygon.prototype.getType = function() {\n  return GeometryType.MULTI_POLYGON;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nMultiPolygon.prototype.intersectsExtent = function(extent) {\n  return _ol_geom_flat_intersectsextent_.linearRingss(\n    this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, extent);\n};\n\n\n/**\n * Set the coordinates of the multipolygon.\n * @param {Array.<Array.<Array.<ol.Coordinate>>>} coordinates Coordinates.\n * @param {ol.geom.GeometryLayout=} opt_layout Layout.\n * @override\n * @api\n */\nMultiPolygon.prototype.setCoordinates = function(coordinates, opt_layout) {\n  if (!coordinates) {\n    this.setFlatCoordinates(GeometryLayout.XY, null, this.endss_);\n  } else {\n    this.setLayout(opt_layout, coordinates, 3);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const endss = _ol_geom_flat_deflate_.coordinatesss(\n      this.flatCoordinates, 0, coordinates, this.stride, this.endss_);\n    if (endss.length === 0) {\n      this.flatCoordinates.length = 0;\n    } else {\n      const lastEnds = endss[endss.length - 1];\n      this.flatCoordinates.length = lastEnds.length === 0 ?\n        0 : lastEnds[lastEnds.length - 1];\n    }\n    this.changed();\n  }\n};\n\n\n/**\n * @param {ol.geom.GeometryLayout} layout Layout.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {Array.<Array.<number>>} endss Endss.\n */\nMultiPolygon.prototype.setFlatCoordinates = function(layout, flatCoordinates, endss) {\n  this.setFlatCoordinatesInternal(layout, flatCoordinates);\n  this.endss_ = endss;\n  this.changed();\n};\n\n\n/**\n * @param {Array.<ol.geom.Polygon>} polygons Polygons.\n */\nMultiPolygon.prototype.setPolygons = function(polygons) {\n  let layout = this.getLayout();\n  const flatCoordinates = [];\n  const endss = [];\n  for (let i = 0, ii = polygons.length; i < ii; ++i) {\n    const polygon = polygons[i];\n    if (i === 0) {\n      layout = polygon.getLayout();\n    }\n    const offset = flatCoordinates.length;\n    const ends = polygon.getEnds();\n    for (let j = 0, jj = ends.length; j < jj; ++j) {\n      ends[j] += offset;\n    }\n    extend(flatCoordinates, polygon.getFlatCoordinates());\n    endss.push(ends);\n  }\n  this.setFlatCoordinates(layout, flatCoordinates, endss);\n};\n\nexport default MultiPolygon;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/geom/MultiPolygon.js\n// module id = 21\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23","/**\n * @module ngeo.format.Attribute\n */\nconst exports = {};\nimport ngeoFormatAttributeType from 'ngeo/format/AttributeType.js';\n\n\n/**\n * Set the `type` and `geomType` properties of an attribute if the given\n * type is a geometry one.\n *\n * @param {ngeox.AttributeBase} attribute Attribute.\n * @param {string} type Type.\n * @return {boolean} Whether both attribute type and geomType were set.\n */\nexports.setGeometryType = function(attribute, type) {\n  const geomRegex =\n    /gml:((Multi)?(Point|Line|Polygon|Curve|Surface|Geometry)).*/;\n  if (geomRegex.exec(type)) {\n    attribute.type = ngeoFormatAttributeType.GEOMETRY;\n    if (/^gml:Point/.exec(type)) {\n      attribute.geomType = 'Point';\n    } else if (/^gml:LineString|^gml:Curve/.exec(type)) {\n      attribute.geomType = 'LineString';\n    } else if (/^gml:Polygon|^gml:Surface/.exec(type)) {\n      attribute.geomType = 'Polygon';\n    } else if (/^gml:MultiPoint/.exec(type)) {\n      attribute.geomType = 'MultiPoint';\n    } else if (/^gml:MultiLineString|^gml:MultiCurve/.exec(type)) {\n      attribute.geomType = 'MultiLineString';\n    } else if (/^gml:MultiPolygon|^gml:MultiSurface/.exec(type)) {\n      attribute.geomType = 'MultiPolygon';\n    }\n  }\n  return !!attribute.type && !!attribute.geomType;\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/Attribute.js","/**\n * @module gmf.theme.Themes\n */\nimport googAsserts from 'goog/asserts.js';\nimport gmfBase from 'gmf/index.js';\nimport ngeoMapLayerHelper from 'ngeo/map/LayerHelper.js';\nimport * as olBase from 'ol/index.js';\nimport * as olArray from 'ol/array.js';\nimport olCollection from 'ol/Collection.js';\nimport olEventsEventTarget from 'ol/events/EventTarget.js';\nimport olLayerTile from 'ol/layer/Tile.js';\n\n/**\n * The Themes service. This service interacts\n * with c2cgeoportal's \"themes\" web service and exposes functions that return\n * objects in the tree returned by the \"themes\" web service.\n *\n * @constructor\n * @struct\n * @extends {ol.events.EventTarget}\n * @param {angular.$http} $http Angular http service.\n * @param {angular.$injector} $injector Main injector.\n * @param {angular.$q} $q Angular q service\n * @param {ngeo.map.LayerHelper} ngeoLayerHelper Ngeo Layer Helper.\n * @param {angularGettext.Catalog} gettextCatalog Gettext catalog.\n * @param {gmfx.ThemesOptions} gmfThemesOptions Themes options.\n * @ngInject\n * @ngdoc service\n * @ngname gmfThemes\n */\nconst exports = function($http, $injector, $q, ngeoLayerHelper, gettextCatalog, gmfThemesOptions) {\n\n  olEventsEventTarget.call(this);\n\n  /**\n   * @type {boolean}\n   * @private\n   */\n  this.addBlankBackgroundLayer_ = true;\n  if (gmfThemesOptions.addBlankBackgroundLayer !== undefined) {\n    this.addBlankBackgroundLayer_ = gmfThemesOptions.addBlankBackgroundLayer;\n  }\n\n  /**\n   * @type {angular.$q}\n   * @private\n   */\n  this.$q_ = $q;\n\n  /**\n   * @type {angular.$http}\n   * @private\n   */\n  this.$http_ = $http;\n\n  /**\n   * @type {string|undefined}\n   * @private\n   */\n  this.treeUrl_ = undefined;\n  if ($injector.has('gmfTreeUrl')) {\n    this.treeUrl_ = $injector.get('gmfTreeUrl');\n  }\n\n  this.cacheVersion_ = '0';\n  if ($injector.has('cacheVersion')) {\n    this.cacheVersion_ = $injector.get('cacheVersion');\n  }\n\n  /**\n   * @type {?ngeo.statemanager.Location}\n   * @private\n   */\n  this.ngeoLocation_ = null;\n  if ($injector.has('ngeoLocation')) {\n    this.ngeoLocation_ = $injector.get('ngeoLocation');\n  }\n\n  /**\n   * @type {ngeo.map.LayerHelper}\n   * @private\n   */\n  this.layerHelper_ = ngeoLayerHelper;\n\n  /**\n   * @type {angularGettext.Catalog}\n   * @private\n   */\n  this.gettextCatalog = gettextCatalog;\n\n  /**\n   * @type {angular.$q.Deferred}\n   * @private\n   */\n  this.deferred_ = $q.defer();\n\n  /**\n   * @type {angular.$q.Promise}\n   * @private\n   */\n  this.promise_ = this.deferred_.promise;\n\n  /**\n   * @type {boolean}\n   */\n  this.loaded = false;\n\n  /**\n   * @type {angular.$q.Promise}\n   * @private\n   */\n  this.bgLayerPromise_ = null;\n};\n\nolBase.inherits(exports, olEventsEventTarget);\n\n\n/**\n * @param {Array.<gmfThemes.GmfTheme>} themes Array of \"theme\" objects.\n * @param {string} name The layer name.\n * @return {gmfThemes.GmfGroup} The group.\n */\nexports.findGroupByLayerNodeName = function(themes, name) {\n  for (let i = 0, ii = themes.length; i < ii; i++) {\n    const theme = themes[i];\n    for (let j = 0, jj = theme.children.length; j < jj; j++) {\n      const group = theme.children[j];\n      const childNodes = [];\n      exports.getFlatNodes(group, childNodes);\n      if (exports.findObjectByName(childNodes, name)) {\n        return group;\n      }\n    }\n  }\n  return null;\n};\n\n/**\n * Find a layer group object by its name. Return null if not found.\n * @param {Array.<gmfThemes.GmfTheme>} themes Array of \"theme\" objects.\n * @param {string} name The group name.\n * @return {gmfThemes.GmfGroup} The group.\n */\nexports.findGroupByName = function(themes, name) {\n  for (let i = 0, ii = themes.length; i < ii; i++) {\n    const theme = themes[i];\n    for (let j = 0, jj = theme.children.length; j < jj; j++) {\n      const group = theme.children[j];\n      const internalNodes = [];\n      exports.getFlatInternalNodes(group, internalNodes);\n      if (exports.findObjectByName(internalNodes, name)) {\n        return group;\n      }\n    }\n  }\n  return null;\n};\n\n\n/**\n * Find an object by its name. Return null if not found.\n * @param {Array.<T>} objects Array of objects with a 'name' attribute.\n * @param {string} objectName The object name.\n * @return {T} The object or null.\n * @template T\n */\nexports.findObjectByName = function(objects, objectName) {\n  return olArray.find(objects, object => object['name'] === objectName);\n};\n\n\n/**\n * Find a theme object by its name. Return null if not found.\n * @param {Array.<gmfThemes.GmfTheme>} themes Array of \"theme\" objects.\n * @param {string} themeName The theme name.\n * @return {gmfThemes.GmfTheme} The theme object or null.\n */\nexports.findThemeByName = function(themes, themeName) {\n  return exports.findObjectByName(themes, themeName);\n};\n\n\n/**\n * Fill the given \"nodes\" array with all internal nodes (non-leaf nones) in\n * the given node.\n *\n * @param {gmfThemes.GmfGroup|gmfThemes.GmfLayer} node Layertree node.\n * @param {Array.<gmfThemes.GmfGroup|gmfThemes.GmfLayer>} nodes An array.\n */\nexports.getFlatInternalNodes = function(node, nodes) {\n  const children = node.children;\n  if (children !== undefined) {\n    nodes.push(node);\n    for (let i = 0; i < children.length; i++) {\n      exports.getFlatInternalNodes(children[i], nodes);\n    }\n  }\n};\n\n\n/**\n * Fill the given \"nodes\" array with all leaf nodes in the given node.\n *\n * @param {gmfThemes.GmfGroup|gmfThemes.GmfLayer} node Layertree node.\n * @param {Array.<gmfThemes.GmfGroup|gmfThemes.GmfLayer>} nodes An array.\n */\nexports.getFlatNodes = function(node, nodes) {\n  let i;\n  const children = node.children;\n  if (children !== undefined) {\n    for (i = 0; i < children.length; i++) {\n      exports.getFlatNodes(children[i], nodes);\n    }\n  } else {\n    nodes.push(node);\n  }\n};\n\n\n/**\n * Get background layers.\n * @param {!Object.<string, string>} appDimensions Dimensions.\n * @return {!angular.$q.Promise.<!Array.<!ol.layer.Base>>} Promise.\n */\nexports.prototype.getBgLayers = function(appDimensions) {\n  const gettextCatalog = this.gettextCatalog;\n  if (this.bgLayerPromise_) {\n    return this.bgLayerPromise_;\n  }\n  const $q = this.$q_;\n  const layerHelper = this.layerHelper_;\n\n  /**\n   * @param {gmfThemes.GmfGroup|gmfThemes.GmfLayer} item A group or a leaf.\n   * @param {Array.<number>} array Array of ids;\n   */\n  const getIds = function(item, array) {\n    array.push(olBase.getUid(item));\n    const children = item.children || [];\n    children.forEach((child) => {\n      getIds(child, array);\n    });\n  };\n\n  /**\n   * @param {gmfThemes.GmfGroup|gmfThemes.GmfLayer} item The item.\n   * @param {ol.layer.Base} layer The layer.\n   * @return {ol.layer.Base} the provided layer.\n   */\n  const callback = function(item, layer) {\n    layer.set('label', item.name);\n    layer.set('metadata', item.metadata);\n    layer.set('dimensions', item.dimensions);\n    const ids = [];\n    getIds(item, ids);\n    layer.set('querySourceIds', ids);\n    return layer;\n  };\n\n  /**\n   * @param {gmfThemes.GmfOgcServers} ogcServers The ogc servers.\n   * @param {gmfThemes.GmfGroup|gmfThemes.GmfLayer} gmfLayer The item.\n   * @return {angular.$q.Promise.<ol.layer.Base>|ol.layer.Base} the created layer.\n   */\n  const layerLayerCreationFn = function(ogcServers, gmfLayer) {\n    if (gmfLayer.type === 'WMTS') {\n      const gmfLayerWMTS = /** @type gmfThemes.GmfLayerWMTS */ (gmfLayer);\n      googAsserts.assert(gmfLayerWMTS.url, 'Layer URL is required');\n      return layerHelper.createWMTSLayerFromCapabilitites(\n        gmfLayerWMTS.url,\n        gmfLayerWMTS.layer || '',\n        gmfLayer.dimensions\n      ).then(callback.bind(null, gmfLayer)).then(null, (response) => {\n        let message = `Unable to build layer \"${gmfLayerWMTS.layer}\" from WMTSCapabilities: ${gmfLayerWMTS.url}\\n`;\n        message += `OpenLayers error is \"${response['message']}`;\n        console.error(message);\n        // Continue even if some layers have failed loading.\n        return $q.resolve(undefined);\n      });\n    } else if (gmfLayer.type === 'WMS') {\n      const gmfLayerWMS = /** @type gmfThemes.GmfLayerWMS */ (gmfLayer);\n      googAsserts.assert(gmfLayerWMS.ogcServer, 'An OGC server is required');\n      const server = ogcServers[gmfLayerWMS.ogcServer];\n      googAsserts.assert(server, 'The OGC server was not found');\n      googAsserts.assert(server.url, 'The server URL is required');\n      googAsserts.assert(server.imageType, 'The server image type is required');\n      return callback(gmfLayer, layerHelper.createBasicWMSLayer(\n        server.url,\n        gmfLayerWMS.layers || '',\n        server.imageType,\n        server.type,\n        undefined, // time\n        gmfLayer.dimensions,\n        server.credential ? 'use-credentials' : 'anonymous'\n      ));\n    }\n    googAsserts.fail(`Unsupported type: ${gmfLayer.type}`);\n  };\n\n  /**\n   * @param {gmfThemes.GmfOgcServers} ogcServers The ogc servers.\n   * @param {gmfThemes.GmfGroup} item The item.\n   * @return {angular.$q.Promise.<ol.layer.Group>} the created layer.\n   */\n  const layerGroupCreationFn = function(ogcServers, item) {\n    // We assume no child is a layer group.\n    const orderedChildren = item.children.map(x => x).reverse(); // the order of insertion in OL3 is the contrary of the theme\n    const promises = orderedChildren.map(layerLayerCreationFn.bind(null, ogcServers));\n    return $q.all(promises).then((layers) => {\n      let collection;\n      if (layers) {\n        layers = layers.filter(l => l);\n        collection = new olCollection(layers);\n      }\n      const group = layerHelper.createBasicGroup(collection);\n      callback(item, group);\n      return group;\n    });\n  };\n\n  /**\n   * @param {gmfThemes.GmfThemesResponse} data The \"themes\" web service\n   *     response.\n   * @return {angular.$q.Promise.<Array.<ol.layer.Base>>} Promise.\n   */\n  const promiseSuccessFn = function(data) {\n    const promises = data.background_layers.map((item) => {\n      const itemType = item.type;\n      if (itemType === 'WMTS' || itemType === 'WMS') {\n        return layerLayerCreationFn(data.ogcServers, item);\n      } else if (item.children) {\n        // group of layers\n        return layerGroupCreationFn(data.ogcServers, item);\n      } else {\n        return undefined;\n      }\n    }, this);\n    return $q.all(promises);\n  }.bind(this);\n\n  this.bgLayerPromise_ = this.promise_.then(promiseSuccessFn).then((values) => {\n    const layers = [];\n\n    // (1) add a blank layer\n    if (this.addBlankBackgroundLayer_) {\n      // For i18n string collection\n      gettextCatalog.getString('blank');\n      layers.push(new olLayerTile({\n        'label': 'blank',\n        'metadata': {'thumbnail': ''}\n      }));\n    }\n\n    // (2) add layers that were returned\n    values.forEach((layer) => {\n      if (layer) {\n        layers.push(layer);\n      }\n    });\n    return layers;\n  });\n\n  return this.bgLayerPromise_;\n};\n\n\n/**\n * Get a theme object by its name.\n * @param {string} themeName Theme name.\n * @return {angular.$q.Promise.<gmfThemes.GmfTheme>} Promise.\n * @export\n */\nexports.prototype.getThemeObject = function(themeName) {\n  return this.promise_.then(\n    /**\n       * @param {gmfThemes.GmfThemesResponse} data The \"themes\" web service\n       *     response.\n       * @return {gmfThemes.GmfTheme?} The theme object for themeName, or null\n       *     if not found.\n       */\n    data => exports.findThemeByName(data.themes, themeName));\n};\n\n\n/**\n * Get an array of theme objects.\n * @return {angular.$q.Promise.<!Array.<!gmfThemes.GmfTheme>>} Promise.\n * @export\n */\nexports.prototype.getThemesObject = function() {\n  return this.promise_.then(\n    /**\n       * @param {!gmfThemes.GmfThemesResponse} data The \"themes\" web service\n       *     response.\n       * @return {!Array.<!gmfThemes.GmfTheme>} The themes object.\n       */\n    data => data.themes);\n};\n\n\n/**\n * Get an array of background layer objects.\n * @return {angular.$q.Promise.<!Array.<!gmfThemes.GmfLayer>>} Promise.\n */\nexports.prototype.getBackgroundLayersObject = function() {\n  googAsserts.assert(this.promise_ !== null);\n  return this.promise_.then(\n    /**\n       * @param {!gmfThemes.GmfThemesResponse} data The \"themes\" web service\n       *     response.\n       * @return {!Array.<!gmfThemes.GmfLayer>} The background layers object.\n       */\n    data => data.background_layers\n  );\n};\n\n\n/**\n * Get the `ogcServers` object.\n * @return {angular.$q.Promise.<!gmfThemes.GmfOgcServers>} Promise.\n * @export\n */\nexports.prototype.getOgcServersObject = function() {\n  googAsserts.assert(this.promise_ !== null);\n  return this.promise_.then(\n    /**\n       * @param {gmfThemes.GmfThemesResponse} data The \"themes\" web service\n       *     response.\n       * @return {gmfThemes.GmfOgcServers} The `ogcServers` object.\n       */\n    data => data.ogcServers);\n};\n\n\n/**\n * Returns a promise to check if one of the layers in the themes is editable.\n * @return {angular.$q.Promise.<boolean>} Promise.\n */\nexports.prototype.hasEditableLayers = function() {\n  googAsserts.assert(this.promise_ !== null);\n  return this.promise_.then(this.hasEditableLayers_.bind(this));\n};\n\n\n/**\n * Returns if one of the layers in the themes is editable.\n * @param {gmfThemes.GmfThemesResponse} data The \"themes\" web service response.\n * @return {boolean} Editable layers?\n */\nexports.prototype.hasEditableLayers_ = function(data) {\n  return data.themes.some((theme) => {\n    const hasEditableLayers = theme.children.some(this.hasNodeEditableLayers_.bind(this));\n    return hasEditableLayers;\n  });\n};\n\n\n/**\n * @param {gmfThemes.GmfGroup|gmfThemes.GmfLayer} node Theme node\n * @return {boolean} Editable layers?\n */\nexports.prototype.hasNodeEditableLayers_ = function(node) {\n  if (node.editable) {\n    return true;\n  }\n\n  let hasEditableLayers = false;\n  const children = node.children;\n  if (children && children.length) {\n    hasEditableLayers = children.some(this.hasNodeEditableLayers_.bind(this));\n  }\n  return hasEditableLayers;\n};\n\n\n/**\n * Get the snapping configuration object from a Layertree controller\n * @param {gmfThemes.GmfLayer} node Layer node from the theme.\n * @return {?gmfThemes.GmfSnappingConfig} Snapping configuration, if found.\n * @export\n */\nexports.getSnappingConfig = function(node) {\n  const config = (node.metadata && node.metadata.snappingConfig !== undefined) ?\n    node.metadata.snappingConfig : null;\n  return config;\n};\n\n\n/**\n * Get the maximal resolution defined for this layer. Looks in the\n *     layer itself before to look into its metadata.\n * @param {gmfThemes.GmfLayerWMS} gmfLayer the GeoMapFish Layer. WMTS layer is\n *     also allowed (the type is defined as GmfLayerWMS only to avoid some\n *     useless tests to know if a maxResolutionHint property can exist\n *     on the node).\n * @return {number|undefined} the max resolution or undefined if any.\n */\nexports.getNodeMaxResolution = function(gmfLayer) {\n  const metadata = gmfLayer.metadata;\n  let maxResolution = gmfLayer.maxResolutionHint;\n  if (maxResolution === undefined && metadata !== undefined) {\n    maxResolution = metadata.maxResolution;\n  }\n  return maxResolution;\n};\n\n\n/**\n * Get the minimal resolution defined for this layer. Looks in the\n *     layer itself before to look into its metadata.\n * @param {gmfThemes.GmfLayerWMS} gmfLayer the GeoMapFish Layer. WMTS layer is\n *     also allowed (the type is defined as GmfLayerWMS only to avoid some\n *     useless tests to know if a minResolutionHint property can exist\n *     on the node).\n * @return {number|undefined} the min resolution or undefined if any.\n */\nexports.getNodeMinResolution = function(gmfLayer) {\n  const metadata = gmfLayer.metadata;\n  let minResolution = gmfLayer.minResolutionHint;\n  if (minResolution === undefined && metadata !== undefined) {\n    minResolution = metadata.minResolution;\n  }\n  return minResolution;\n};\n\n\n/**\n * @param {number=} opt_roleId The role id to send in the request.\n * Load themes from the \"themes\" service.\n * @export\n */\nexports.prototype.loadThemes = function(opt_roleId) {\n\n  googAsserts.assert(this.treeUrl_, 'gmfTreeUrl should be defined.');\n\n  if (this.loaded) {\n    // reload the themes\n    this.deferred_ = this.$q_.defer();\n    this.promise_ = this.deferred_.promise;\n    this.bgLayerPromise_ = null;\n    this.loaded = false;\n  }\n\n  this.$http_.get(this.treeUrl_, {\n    params: opt_roleId !== undefined ? {\n      'role': opt_roleId,\n      'cache_version': this.cacheVersion_\n    } : {\n      'cache_version': this.cacheVersion_\n    },\n    cache: false,\n    withCredentials: true\n  }).then((response) => {\n    if (response.data.errors.length != 0) {\n      const message = `The themes contain some errors:\\n${\n        response.data.errors.join('\\n')}`;\n      console.error(message);\n      if (this.ngeoLocation_ !== null && this.ngeoLocation_.hasParam('debug')) {\n        window.alert(message);\n      }\n    }\n    this.deferred_.resolve(response.data);\n    this.dispatchEvent('change');\n    this.loaded = true;\n  }, (response) => {\n    this.deferred_.reject(response);\n  });\n};\n\n\n/**\n * @enum {string}\n */\nexports.NodeType = {\n  MIXED_GROUP: 'MixedGroup',\n  NOT_MIXED_GROUP: 'NotMixedGroup',\n  WMTS: 'WMTS',\n  WMS: 'WMS'\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('gmfThemes', [\n  ngeoMapLayerHelper.module.name,\n]);\nexports.module.value('gmfThemesOptions', {});\nexports.module.service('gmfThemes', exports);\nexports.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/theme/Themes.js","/**\n * @module gmf.editing.EditFeature\n */\nimport gmfBase from 'gmf/index.js';\nimport olFormatGeoJSON from 'ol/format/GeoJSON.js';\nimport * as olUri from 'ol/uri.js';\n\n/**\n * Service that provides methods to get, insert, update and delete vector\n * features with the use of a GeoMapFish Protocol as back-end.\n *\n * The GeoJSON format is used when obtaining or sending features.\n *\n * @constructor\n * @struct\n * @param {angular.$http} $http Angular http service.\n * @param {string} gmfLayersUrl Url to the GeoMapFish layers service.\n * @ngInject\n */\nconst exports = function($http, gmfLayersUrl) {\n\n  /**\n   * @type {angular.$http}\n   * @private\n   */\n  this.http_ = $http;\n\n  /**\n   * Url to the GeoMapFish layers service. Required in applications that use:\n   * - the editfeature tools\n   * - the objectediting tools\n   *\n   * @type {string}\n   * @private\n   */\n  this.baseUrl_ = gmfLayersUrl;\n\n};\n\n\n/**\n * Build a query to the MapFish protocol to fetch features from a list\n * of layer ids inside a specified extent.\n *\n * @param {Array.<number>} layerIds List of layer ids to get the features from.\n * @param {ol.Extent} extent The extent where to get the features from.\n * @return {angular.$q.Promise} Promise.\n * @export\n */\nexports.prototype.getFeaturesInExtent = function(layerIds, extent) {\n  const url = olUri.appendParams(\n    `${this.baseUrl_}/${layerIds.join(',')}`,\n    {\n      'bbox': extent.join(',')\n    }\n  );\n  return this.http_.get(url).then(this.handleGetFeatures_.bind(this));\n};\n\n\n/**\n * Build a query to the MapFish protocol to fetch features from a list\n * of layer ids and a list of comparison filters.\n *\n * This method is called in the ObjectEditing service, which is injected in\n * the permalink service, i.e. it's always called. Since we don't have to\n * define the url to the GMF Protocol (layers) a dummy promise returns an\n * empty array of features if the url is not defined.\n *\n * @param {!Array.<number>} layerIds List of layer ids to get the features from.\n * @param {!Array.<!gmfx.ComparisonFilter>} filters List of comparison filters\n * @return {angular.$q.Promise} Promise.\n */\nexports.prototype.getFeaturesWithComparisonFilters = function(\n  layerIds, filters\n) {\n  const properties = [];\n  const params = {};\n\n  for (const filter of filters) {\n    params[`${filter.property}__${filter.operator}`] = filter.value;\n    properties.push(filter.property);\n  }\n\n  params['queryable'] = properties.join(',');\n\n  const url = olUri.appendParams(`${this.baseUrl_}/${layerIds.join(',')}`, params);\n  return this.http_.get(url).then(this.handleGetFeatures_.bind(this));\n};\n\n\n/**\n * @param {angular.$http.Response} resp Ajax response.\n * @return {Array.<ol.Feature>} List of features.\n * @private\n */\nexports.prototype.handleGetFeatures_ = function(resp) {\n  return new olFormatGeoJSON().readFeatures(resp.data);\n};\n\n\n/**\n * @param {number} layerId The layer id that contains the feature.\n * @param {Array.<ol.Feature>} features List of features to insert.\n * @return {angular.$q.Promise} Promise.\n * @export\n */\nexports.prototype.insertFeatures = function(layerId, features) {\n  const url = `${this.baseUrl_}/${layerId}`;\n  const geoJSON = new olFormatGeoJSON().writeFeatures(features);\n  return this.http_.post(url, geoJSON, {\n    headers: {'Content-Type': 'application/json'},\n    withCredentials: true\n  });\n};\n\n\n/**\n * @param {number} layerId The layer id that contains the feature.\n * @param {ol.Feature} feature The feature to update.\n * @return {angular.$q.Promise} Promise.\n * @export\n */\nexports.prototype.updateFeature = function(layerId, feature) {\n  const url = `${this.baseUrl_}/${layerId.toString()}/${feature.getId()}`;\n  const geoJSON = new olFormatGeoJSON().writeFeature(feature);\n  return this.http_.put(url, geoJSON, {\n    headers: {'Content-Type': 'application/json'},\n    withCredentials: true\n  });\n};\n\n\n/**\n * @param {number} layerId The layer id that contains the feature.\n * @param {ol.Feature} feature The feature to delete.\n * @return {angular.$q.Promise} Promise.\n * @export\n */\nexports.prototype.deleteFeature = function(layerId, feature) {\n  const url = `${this.baseUrl_}/${layerId.toString()}/${feature.getId()}`;\n  return this.http_.delete(url, {\n    headers: {'Content-Type': 'application/json'},\n    withCredentials: true\n  });\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('gmfEditFeature', []);\nexports.module.service('gmfEditFeature', exports);\ngmfBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/editing/EditFeature.js","/**\n * @module ngeo.format.XSDAttribute\n */\nimport googAsserts from 'goog/asserts.js';\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoFormatAttribute from 'ngeo/format/Attribute.js';\nimport ngeoFormatAttributeType from 'ngeo/format/AttributeType.js';\nimport * as olBase from 'ol/index.js';\nimport olFormatXML from 'ol/format/XML.js';\n\n/**\n * @classdesc\n * Reads attributes that are defined in XSD format and return them as a list.\n *\n * @constructor\n * @struct\n * @extends {ol.format.XML}\n */\nconst exports = function() {\n  olFormatXML.call(this);\n};\n\nolBase.inherits(exports, olFormatXML);\n\n\n/**\n * @param {Document|Node|string} source Source.\n * @return {Array.<ngeox.Attribute>} The parsed result.\n * @override\n */\nexports.prototype.read = function(source) {\n  return (\n    /** @type {Array.<ngeox.Attribute>} */ olFormatXML.prototype.read.call(this, source)\n  );\n};\n\n\n/**\n * @param {Document} doc Document.\n * @return {Array.<ngeox.Attribute>} List of attributes.\n * @override\n */\nexports.prototype.readFromDocument = function(doc) {\n  googAsserts.assert(doc.nodeType == Node.DOCUMENT_NODE,\n    'doc.nodeType should be DOCUMENT');\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readFromNode(n);\n    }\n  }\n  return null;\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {Array.<ngeox.Attribute>} List of attributes.\n * @override\n */\nexports.prototype.readFromNode = function(node) {\n  googAsserts.assert(node.nodeType == Node.ELEMENT_NODE,\n    'node.nodeType should be ELEMENT');\n  googAsserts.assert(node.localName == 'schema',\n    'localName should be schema');\n\n  let elements = node.getElementsByTagName('element');\n  if (!elements.length) {\n    elements = node.getElementsByTagName('xsd:element');\n  }\n  const attributes = [];\n\n  let attribute;\n  for (let i = 0, ii = elements.length; i < ii; i++) {\n    attribute = this.readFromElementNode_(elements[i]);\n    if (attribute) {\n      attributes.push(attribute);\n    }\n  }\n\n  return attributes;\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {?ngeox.Attribute} An attribute object.\n * @private\n */\nexports.prototype.readFromElementNode_ = function(node) {\n\n  const name = node.getAttribute('name');\n  googAsserts.assertString(name, 'name should be defined in element node.');\n\n  const alias = node.getAttribute('alias');\n  const nillable = node.getAttribute('nillable');\n  const required = !(nillable === true || nillable === 'true');\n\n  const attribute = {\n    name,\n    alias,\n    required\n  };\n\n  const type = node.getAttribute('type');\n  if (type) {\n    if (!ngeoFormatAttribute.setGeometryType(attribute, type)) {\n      this.setAttributeByXsdType_(attribute, type);\n    }\n  } else {\n\n    // Attribute has no type defined on 'element' node.  Try:\n\n    // (1) Enumerations\n    let enumerations = node.getElementsByTagName('enumeration');\n    if (!enumerations.length) {\n      enumerations = node.getElementsByTagName('xsd:enumeration');\n    }\n    if (enumerations.length) {\n      attribute.type = ngeoFormatAttributeType.SELECT;\n      const choices = [];\n      for (let i = 0, ii = enumerations.length; i < ii; i++) {\n        choices.push(enumerations[i].getAttribute('value'));\n      }\n      attribute.choices = choices;\n    } else {\n      // (2) Other types with restrictions\n      let restrictions = node.getElementsByTagName('restriction');\n      if (!restrictions.length) {\n        restrictions = node.getElementsByTagName('xsd:restriction');\n      }\n      if (restrictions.length && restrictions[0]) {\n        const restrictionNode = restrictions[0];\n        this.setAttributeByXsdType_(\n          attribute,\n          restrictionNode.getAttribute('base')\n        );\n        // MaxLength\n        let maxLengths = node.getElementsByTagName('maxLength');\n        if (!maxLengths.length) {\n          maxLengths = node.getElementsByTagName('xsd:maxLength');\n        }\n        if (maxLengths.length && maxLengths[0]) {\n          attribute.maxLength = Number(maxLengths[0].getAttribute('value'));\n        }\n      }\n    }\n  }\n\n  if (!attribute.type) {\n    return null;\n  }\n\n  googAsserts.assert(attribute.type);\n\n  return attribute;\n};\n\n\n/**\n * Set the `type` and `numType` properties of an attribute depending on the\n * given xsdType.\n *\n * @param {ngeox.AttributeBase} attribute Attribute.\n * @param {string} type The xsd type.\n * @private\n */\nexports.prototype.setAttributeByXsdType_ = function(\n  attribute, type\n) {\n  if (type === 'xsd:boolean') {\n    attribute.type = ngeoFormatAttributeType.BOOLEAN;\n  } else if (type === 'xsd:date') {\n    attribute.type = ngeoFormatAttributeType.DATE;\n  } else if (type === 'xsd:dateTime') {\n    attribute.type = ngeoFormatAttributeType.DATETIME;\n  } else if (type === 'xsd:time') {\n    attribute.type = ngeoFormatAttributeType.TIME;\n  } else if (type === 'xsd:decimal') {\n    attribute.type = ngeoFormatAttributeType.NUMBER;\n    attribute.numType = exports.NumberType.FLOAT;\n  } else if (type === 'xsd:integer') {\n    attribute.type = ngeoFormatAttributeType.NUMBER;\n    attribute.numType = exports.NumberType.INTEGER;\n  } else if (type === 'xsd:string') {\n    attribute.type = ngeoFormatAttributeType.TEXT;\n  }\n};\n\n\n/**\n * Returns the first geometry attribute among a given list of attributes.\n * @param {Array.<ngeox.Attribute>} attributes The list of attributes.\n * @return {?ngeox.Attribute} A geometry attribute object.\n */\nexports.getGeometryAttribute = function(attributes) {\n  let geomAttribute = null;\n  for (let i = 0, ii = attributes.length; i < ii; i++) {\n    if (attributes[i].type === ngeoFormatAttributeType.GEOMETRY) {\n      geomAttribute = attributes[i];\n      break;\n    }\n  }\n  return geomAttribute;\n};\n\n\n/**\n * @enum {string}\n * @export\n */\nexports.NumberType = {\n  /**\n   * @type {string}\n   * @export\n   */\n  FLOAT: 'float',\n  /**\n   * @type {string}\n   * @export\n   */\n  INTEGER: 'integer'\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/XSDAttribute.js","/**\n * @module ol/format/XMLFeature\n */\nimport {inherits} from '../index.js';\nimport {extend} from '../array.js';\nimport FeatureFormat from '../format/Feature.js';\nimport FormatType from '../format/FormatType.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for XML feature formats.\n *\n * @constructor\n * @abstract\n * @extends {ol.format.Feature}\n */\nconst XMLFeature = function() {\n\n  /**\n   * @type {XMLSerializer}\n   * @private\n   */\n  this.xmlSerializer_ = new XMLSerializer();\n\n  FeatureFormat.call(this);\n};\n\ninherits(XMLFeature, FeatureFormat);\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.getType = function() {\n  return FormatType.XML;\n};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.readFeature = function(source, opt_options) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readFeatureFromDocument(\n      /** @type {Document} */ (source), opt_options);\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readFeatureFromNode(/** @type {Node} */ (source), opt_options);\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readFeatureFromDocument(doc, opt_options);\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * @param {Document} doc Document.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @return {ol.Feature} Feature.\n */\nXMLFeature.prototype.readFeatureFromDocument = function(\n  doc, opt_options) {\n  const features = this.readFeaturesFromDocument(doc, opt_options);\n  if (features.length > 0) {\n    return features[0];\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @return {ol.Feature} Feature.\n */\nXMLFeature.prototype.readFeatureFromNode = function(node, opt_options) {\n  return null; // not implemented\n};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.readFeatures = function(source, opt_options) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readFeaturesFromDocument(\n      /** @type {Document} */ (source), opt_options);\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readFeaturesFromNode(/** @type {Node} */ (source), opt_options);\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readFeaturesFromDocument(doc, opt_options);\n  } else {\n    return [];\n  }\n};\n\n\n/**\n * @param {Document} doc Document.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @protected\n * @return {Array.<ol.Feature>} Features.\n */\nXMLFeature.prototype.readFeaturesFromDocument = function(\n  doc, opt_options) {\n  /** @type {Array.<ol.Feature>} */\n  const features = [];\n  let n;\n  for (n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      extend(features, this.readFeaturesFromNode(n, opt_options));\n    }\n  }\n  return features;\n};\n\n\n/**\n * @abstract\n * @param {Node} node Node.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @protected\n * @return {Array.<ol.Feature>} Features.\n */\nXMLFeature.prototype.readFeaturesFromNode = function(node, opt_options) {};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.readGeometry = function(source, opt_options) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readGeometryFromDocument(\n      /** @type {Document} */ (source), opt_options);\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readGeometryFromNode(/** @type {Node} */ (source), opt_options);\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readGeometryFromDocument(doc, opt_options);\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * @param {Document} doc Document.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @protected\n * @return {ol.geom.Geometry} Geometry.\n */\nXMLFeature.prototype.readGeometryFromDocument = function(doc, opt_options) {\n  return null; // not implemented\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @protected\n * @return {ol.geom.Geometry} Geometry.\n */\nXMLFeature.prototype.readGeometryFromNode = function(node, opt_options) {\n  return null; // not implemented\n};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.readProjection = function(source) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readProjectionFromDocument(/** @type {Document} */ (source));\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readProjectionFromNode(/** @type {Node} */ (source));\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readProjectionFromDocument(doc);\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * @param {Document} doc Document.\n * @protected\n * @return {ol.proj.Projection} Projection.\n */\nXMLFeature.prototype.readProjectionFromDocument = function(doc) {\n  return this.defaultDataProjection;\n};\n\n\n/**\n * @param {Node} node Node.\n * @protected\n * @return {ol.proj.Projection} Projection.\n */\nXMLFeature.prototype.readProjectionFromNode = function(node) {\n  return this.defaultDataProjection;\n};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.writeFeature = function(feature, opt_options) {\n  const node = this.writeFeatureNode(feature, opt_options);\n  return this.xmlSerializer_.serializeToString(node);\n};\n\n\n/**\n * @param {ol.Feature} feature Feature.\n * @param {olx.format.WriteOptions=} opt_options Options.\n * @protected\n * @return {Node} Node.\n */\nXMLFeature.prototype.writeFeatureNode = function(feature, opt_options) {\n  return null; // not implemented\n};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.writeFeatures = function(features, opt_options) {\n  const node = this.writeFeaturesNode(features, opt_options);\n  return this.xmlSerializer_.serializeToString(node);\n};\n\n\n/**\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Options.\n * @return {Node} Node.\n */\nXMLFeature.prototype.writeFeaturesNode = function(features, opt_options) {\n  return null; // not implemented\n};\n\n\n/**\n * @inheritDoc\n */\nXMLFeature.prototype.writeGeometry = function(geometry, opt_options) {\n  const node = this.writeGeometryNode(geometry, opt_options);\n  return this.xmlSerializer_.serializeToString(node);\n};\n\n\n/**\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Options.\n * @return {Node} Node.\n */\nXMLFeature.prototype.writeGeometryNode = function(geometry, opt_options) {\n  return null; // not implemented\n};\nexport default XMLFeature;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/XMLFeature.js\n// module id = 29\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22","/**\n * @module gmf.editing.XSDAttributes\n */\nimport gmfBase from 'gmf/index.js';\nimport ngeoFormatXSDAttribute from 'ngeo/format/XSDAttribute.js';\n\n/**\n * An service used to fetch the XSD attribute definition of layers using their\n * id from a GeoMapFish server.\n *\n * @constructor\n * @struct\n * @param {angular.$http} $http Angular http service.\n * @param {string} gmfLayersUrl Url to the GeoMapFish layers service.\n * @ngInject\n */\nconst exports = function($http, gmfLayersUrl) {\n\n  /**\n   * @type {angular.$http}\n   * @private\n   */\n  this.http_ = $http;\n\n  /**\n   * @type {string}\n   * @private\n   */\n  this.baseUrl_ = gmfLayersUrl;\n\n  /**\n   * @type {Object.<number, !angular.$q.Promise>}\n   * @private\n   */\n  this.promises_ = {};\n\n};\n\n\n/**\n * @param {number} id Layer id.\n * @return {angular.$q.Promise} Promise.\n * @export\n */\nexports.prototype.getAttributes = function(id) {\n  if (!this.promises_[id]) {\n    const url = `${this.baseUrl_}/${id}/md.xsd`;\n    this.promises_[id] = this.http_.get(url).then(\n      this.handleGetAttributes_.bind(this));\n  }\n  return this.promises_[id];\n};\n\n/**\n * @param {angular.$http.Response} resp Ajax response.\n * @return {Array.<ngeox.Attribute>} List of attributes.\n * @export\n */\nexports.prototype.handleGetAttributes_ = function(resp) {\n  return new ngeoFormatXSDAttribute().read(resp.data);\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('gmfXSDAttributes', []);\nexports.module.service('gmfXSDAttributes', exports);\ngmfBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/editing/XSDAttributes.js","/**\n * @module gmf.objectediting.Manager\n */\nimport gmfEditingEditFeature from 'gmf/editing/EditFeature.js';\nimport ngeoStatemanagerLocation from 'ngeo/statemanager/Location.js';\nimport olFeature from 'ol/Feature.js';\n\n/**\n * A service that looks for certain parameters in the url and use them to fetch\n * a feature using the GMF protocol.\n *\n * @param {angular.$q} $q Angular $q service.\n * @param {gmf.editing.EditFeature} gmfEditFeature Gmf edit feature service.\n * @param {ngeo.statemanager.Location} ngeoLocation ngeo location service.\n * @constructor\n * @struct\n * @ngInject\n */\nconst exports = function($q, gmfEditFeature, ngeoLocation) {\n\n  /**\n   * @type {angular.$q}\n   * @private\n   */\n  this.q_ = $q;\n\n  /**\n   * @type {gmf.editing.EditFeature}\n   * @private\n   */\n  this.gmfEditFeature_ = gmfEditFeature;\n\n  /**\n   * @type {ngeo.statemanager.Location}\n   * @private\n   */\n  this.ngeoLocation_ = ngeoLocation;\n\n  /**\n   * @type {angular.$q.Deferred|null}\n   * @private\n   */\n  this.getFeatureDefered_ = null;\n\n};\n\n\n/**\n * Use the EditFeature service to fetch a single feature using parameters in\n * the url. The method returns a promise that has the feature as argument in\n * the callback method. If any parameter in the url is missing, `null` is\n * returned, otherwise the query is made. If the query returns a feature, it\n * is returned, otherwise one is created with empty geometry and with the\n * property set.\n *\n * @return {angular.$q.Promise} Promise.\n * @export\n */\nexports.prototype.getFeature = function() {\n\n  if (!this.getFeatureDefered_) {\n    this.getFeatureDefered_ = this.q_.defer();\n\n    const geomType = this.ngeoLocation_.getParam(\n      exports.Param.GEOM_TYPE);\n    const id = this.ngeoLocation_.getParam(\n      exports.Param.ID);\n    const layer = this.ngeoLocation_.getParam(\n      exports.Param.LAYER);\n    const property = this.ngeoLocation_.getParam(\n      exports.Param.PROPERTY);\n    const theme = this.ngeoLocation_.getParam(\n      exports.Param.THEME);\n\n    if (geomType && id && layer && property && theme) {\n      this.gmfEditFeature_.getFeaturesWithComparisonFilters(\n        [layer],\n        [{\n          operator: 'eq',\n          property: property,\n          value: id\n        }]\n      ).then(this.handleGetFeatures_.bind(this, property, id));\n    } else {\n      this.getFeatureDefered_.resolve(null);\n    }\n  }\n\n  return this.getFeatureDefered_.promise;\n\n};\n\n\n/**\n * @return {string|undefined} The geometry type.\n * @export\n */\nexports.prototype.getGeomType = function() {\n  return this.ngeoLocation_.getParam(\n    exports.Param.GEOM_TYPE);\n};\n\n\n/**\n * @return {number|undefined} The gmf layer node id.\n * @export\n */\nexports.prototype.getLayerNodeId = function() {\n  return this.ngeoLocation_.getParamAsInt(\n    exports.Param.LAYER);\n};\n\n\n/**\n * Called after getting features with comparison filters. Resolve the defered\n * promise with the first returned feature (if any), otherwise resolve it\n * with a feature created with an empty geometry and the property key + value\n * that was used in the attempt to fetch it.\n *\n * @param {string} key Property key.\n * @param {string} value Property value.\n * @param {Array.<ol.Feature>} features List of features.\n * @private\n */\nexports.prototype.handleGetFeatures_ = function(key, value, features) {\n  let feature;\n\n  if (features.length) {\n    feature = features[0];\n  } else {\n    const featureProperties = {};\n    featureProperties[key] = value;\n    featureProperties['geometry'] = null;\n    feature = new olFeature(featureProperties);\n  }\n\n  this.getFeatureDefered_.resolve(feature);\n};\n\n\n/**\n * @enum {string}\n * @export\n */\nexports.Param = {\n  /**\n   * @type {string}\n   * @export\n   */\n  GEOM_TYPE: 'objectediting_geomtype',\n  /**\n   * @type {string}\n   * @export\n   */\n  ID: 'objectediting_id',\n  /**\n   * @type {string}\n   * @export\n   */\n  LAYER: 'objectediting_layer',\n  /**\n   * @type {string}\n   * @export\n   */\n  PROPERTY: 'objectediting_property',\n  /**\n   * @type {string}\n   * @export\n   */\n  THEME: 'objectediting_theme'\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('gmfObjectEditingManager', [\n  gmfEditingEditFeature.module.name,\n  ngeoStatemanagerLocation.module.name,\n]);\nexports.module.service('gmfObjectEditingManager', exports);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/src/objectediting/Manager.js","/**\n * @module ngeo.format.AttributeType\n */\n/**\n * @enum {string}\n * @export\n */\nconst exports = {\n  /**\n   * @type {string}\n   */\n  BOOLEAN: 'boolean',\n  /**\n   * @type {string}\n   */\n  DATE: 'date',\n  /**\n   * @type {string}\n   */\n  DATETIME: 'datetime',\n  /**\n   * @type {string}\n   */\n  TIME: 'time',\n  /**\n   * @type {string}\n   */\n  GEOMETRY: 'geometry',\n  /**\n   * @type {string}\n   */\n  NUMBER: 'number',\n  /**\n   * @type {string}\n   */\n  SELECT: 'select',\n  /**\n   * @type {string}\n   */\n  TEXT: 'text'\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/format/AttributeType.js","/**\n * @module ol/format/GMLBase\n */\n// FIXME Envelopes should not be treated as geometries! readEnvelope_ is part\n// of GEOMETRY_PARSERS_ and methods using GEOMETRY_PARSERS_ do not expect\n// envelopes/extents, only geometries!\nimport {inherits} from '../index.js';\nimport {extend} from '../array.js';\nimport Feature from '../Feature.js';\nimport {transformWithOptions} from '../format/Feature.js';\nimport XMLFeature from '../format/XMLFeature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport LinearRing from '../geom/LinearRing.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Feature base format for reading and writing data in the GML format.\n * This class cannot be instantiated, it contains only base content that\n * is shared with versioned format classes ol.format.GML2 and\n * ol.format.GML3.\n *\n * @constructor\n * @abstract\n * @param {olx.format.GMLOptions=} opt_options\n *     Optional configuration object.\n * @extends {ol.format.XMLFeature}\n */\nconst GMLBase = function(opt_options) {\n  const options = /** @type {olx.format.GMLOptions} */\n      (opt_options ? opt_options : {});\n\n  /**\n   * @protected\n   * @type {Array.<string>|string|undefined}\n   */\n  this.featureType = options.featureType;\n\n  /**\n   * @protected\n   * @type {Object.<string, string>|string|undefined}\n   */\n  this.featureNS = options.featureNS;\n\n  /**\n   * @protected\n   * @type {string}\n   */\n  this.srsName = options.srsName;\n\n  /**\n   * @protected\n   * @type {string}\n   */\n  this.schemaLocation = '';\n\n  /**\n   * @type {Object.<string, Object.<string, Object>>}\n   */\n  this.FEATURE_COLLECTION_PARSERS = {};\n  this.FEATURE_COLLECTION_PARSERS[GMLBase.GMLNS] = {\n    'featureMember': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readFeaturesInternal),\n    'featureMembers': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readFeaturesInternal)\n  };\n\n  XMLFeature.call(this);\n};\n\ninherits(GMLBase, XMLFeature);\n\n\n/**\n * @const\n * @type {string}\n */\nGMLBase.GMLNS = 'http://www.opengis.net/gml';\n\n\n/**\n * A regular expression that matches if a string only contains whitespace\n * characters. It will e.g. match `''`, `' '`, `'\\n'` etc. The non-breaking\n * space (0xa0) is explicitly included as IE doesn't include it in its\n * definition of `\\s`.\n *\n * Information from `goog.string.isEmptyOrWhitespace`: https://github.com/google/closure-library/blob/e877b1e/closure/goog/string/string.js#L156-L160\n *\n * @const\n * @type {RegExp}\n * @private\n */\nGMLBase.ONLY_WHITESPACE_RE_ = /^[\\s\\xa0]*$/;\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Array.<ol.Feature> | undefined} Features.\n */\nGMLBase.prototype.readFeaturesInternal = function(node, objectStack) {\n  const localName = node.localName;\n  let features = null;\n  if (localName == 'FeatureCollection') {\n    if (node.namespaceURI === 'http://www.opengis.net/wfs') {\n      features = _ol_xml_.pushParseAndPop([],\n        this.FEATURE_COLLECTION_PARSERS, node,\n        objectStack, this);\n    } else {\n      features = _ol_xml_.pushParseAndPop(null,\n        this.FEATURE_COLLECTION_PARSERS, node,\n        objectStack, this);\n    }\n  } else if (localName == 'featureMembers' || localName == 'featureMember') {\n    const context = objectStack[0];\n    let featureType = context['featureType'];\n    let featureNS = context['featureNS'];\n    let i, ii;\n    const prefix = 'p';\n    const defaultPrefix = 'p0';\n    if (!featureType && node.childNodes) {\n      featureType = [], featureNS = {};\n      for (i = 0, ii = node.childNodes.length; i < ii; ++i) {\n        const child = node.childNodes[i];\n        if (child.nodeType === 1) {\n          const ft = child.nodeName.split(':').pop();\n          if (featureType.indexOf(ft) === -1) {\n            let key = '';\n            let count = 0;\n            const uri = child.namespaceURI;\n            for (const candidate in featureNS) {\n              if (featureNS[candidate] === uri) {\n                key = candidate;\n                break;\n              }\n              ++count;\n            }\n            if (!key) {\n              key = prefix + count;\n              featureNS[key] = uri;\n            }\n            featureType.push(key + ':' + ft);\n          }\n        }\n      }\n      if (localName != 'featureMember') {\n        // recheck featureType for each featureMember\n        context['featureType'] = featureType;\n        context['featureNS'] = featureNS;\n      }\n    }\n    if (typeof featureNS === 'string') {\n      const ns = featureNS;\n      featureNS = {};\n      featureNS[defaultPrefix] = ns;\n    }\n    const parsersNS = {};\n    const featureTypes = Array.isArray(featureType) ? featureType : [featureType];\n    for (const p in featureNS) {\n      const parsers = {};\n      for (i = 0, ii = featureTypes.length; i < ii; ++i) {\n        const featurePrefix = featureTypes[i].indexOf(':') === -1 ?\n          defaultPrefix : featureTypes[i].split(':')[0];\n        if (featurePrefix === p) {\n          parsers[featureTypes[i].split(':').pop()] =\n              (localName == 'featureMembers') ?\n                _ol_xml_.makeArrayPusher(this.readFeatureElement, this) :\n                _ol_xml_.makeReplacer(this.readFeatureElement, this);\n        }\n      }\n      parsersNS[featureNS[p]] = parsers;\n    }\n    if (localName == 'featureMember') {\n      features = _ol_xml_.pushParseAndPop(undefined, parsersNS, node, objectStack);\n    } else {\n      features = _ol_xml_.pushParseAndPop([], parsersNS, node, objectStack);\n    }\n  }\n  if (features === null) {\n    features = [];\n  }\n  return features;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.Geometry|undefined} Geometry.\n */\nGMLBase.prototype.readGeometryElement = function(node, objectStack) {\n  const context = /** @type {Object} */ (objectStack[0]);\n  context['srsName'] = node.firstElementChild.getAttribute('srsName');\n  context['srsDimension'] = node.firstElementChild.getAttribute('srsDimension');\n  /** @type {ol.geom.Geometry} */\n  const geometry = _ol_xml_.pushParseAndPop(null,\n    this.GEOMETRY_PARSERS_, node, objectStack, this);\n  if (geometry) {\n    return (\n      /** @type {ol.geom.Geometry} */ transformWithOptions(geometry, false, context)\n    );\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.Feature} Feature.\n */\nGMLBase.prototype.readFeatureElement = function(node, objectStack) {\n  let n;\n  const fid = node.getAttribute('fid') ||\n      _ol_xml_.getAttributeNS(node, GMLBase.GMLNS, 'id');\n  const values = {};\n  let geometryName;\n  for (n = node.firstElementChild; n; n = n.nextElementSibling) {\n    const localName = n.localName;\n    // Assume attribute elements have one child node and that the child\n    // is a text or CDATA node (to be treated as text).\n    // Otherwise assume it is a geometry node.\n    if (n.childNodes.length === 0 ||\n        (n.childNodes.length === 1 &&\n        (n.firstChild.nodeType === 3 || n.firstChild.nodeType === 4))) {\n      let value = _ol_xml_.getAllTextContent(n, false);\n      if (GMLBase.ONLY_WHITESPACE_RE_.test(value)) {\n        value = undefined;\n      }\n      values[localName] = value;\n    } else {\n      // boundedBy is an extent and must not be considered as a geometry\n      if (localName !== 'boundedBy') {\n        geometryName = localName;\n      }\n      values[localName] = this.readGeometryElement(n, objectStack);\n    }\n  }\n  const feature = new Feature(values);\n  if (geometryName) {\n    feature.setGeometryName(geometryName);\n  }\n  if (fid) {\n    feature.setId(fid);\n  }\n  return feature;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.Point|undefined} Point.\n */\nGMLBase.prototype.readPoint = function(node, objectStack) {\n  const flatCoordinates =\n      this.readFlatCoordinatesFromNode_(node, objectStack);\n  if (flatCoordinates) {\n    const point = new Point(null);\n    point.setFlatCoordinates(GeometryLayout.XYZ, flatCoordinates);\n    return point;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.MultiPoint|undefined} MultiPoint.\n */\nGMLBase.prototype.readMultiPoint = function(node, objectStack) {\n  /** @type {Array.<Array.<number>>} */\n  const coordinates = _ol_xml_.pushParseAndPop([],\n    this.MULTIPOINT_PARSERS_, node, objectStack, this);\n  if (coordinates) {\n    return new MultiPoint(coordinates);\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.MultiLineString|undefined} MultiLineString.\n */\nGMLBase.prototype.readMultiLineString = function(node, objectStack) {\n  /** @type {Array.<ol.geom.LineString>} */\n  const lineStrings = _ol_xml_.pushParseAndPop([],\n    this.MULTILINESTRING_PARSERS_, node, objectStack, this);\n  if (lineStrings) {\n    const multiLineString = new MultiLineString(null);\n    multiLineString.setLineStrings(lineStrings);\n    return multiLineString;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.MultiPolygon|undefined} MultiPolygon.\n */\nGMLBase.prototype.readMultiPolygon = function(node, objectStack) {\n  /** @type {Array.<ol.geom.Polygon>} */\n  const polygons = _ol_xml_.pushParseAndPop([],\n    this.MULTIPOLYGON_PARSERS_, node, objectStack, this);\n  if (polygons) {\n    const multiPolygon = new MultiPolygon(null);\n    multiPolygon.setPolygons(polygons);\n    return multiPolygon;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGMLBase.prototype.pointMemberParser_ = function(node, objectStack) {\n  _ol_xml_.parseNode(this.POINTMEMBER_PARSERS_,\n    node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGMLBase.prototype.lineStringMemberParser_ = function(node, objectStack) {\n  _ol_xml_.parseNode(this.LINESTRINGMEMBER_PARSERS_,\n    node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGMLBase.prototype.polygonMemberParser_ = function(node, objectStack) {\n  _ol_xml_.parseNode(this.POLYGONMEMBER_PARSERS_, node,\n    objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.LineString|undefined} LineString.\n */\nGMLBase.prototype.readLineString = function(node, objectStack) {\n  const flatCoordinates =\n      this.readFlatCoordinatesFromNode_(node, objectStack);\n  if (flatCoordinates) {\n    const lineString = new LineString(null);\n    lineString.setFlatCoordinates(GeometryLayout.XYZ, flatCoordinates);\n    return lineString;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} LinearRing flat coordinates.\n */\nGMLBase.prototype.readFlatLinearRing_ = function(node, objectStack) {\n  const ring = _ol_xml_.pushParseAndPop(null,\n    this.GEOMETRY_FLAT_COORDINATES_PARSERS_, node,\n    objectStack, this);\n  if (ring) {\n    return ring;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.LinearRing|undefined} LinearRing.\n */\nGMLBase.prototype.readLinearRing = function(node, objectStack) {\n  const flatCoordinates =\n      this.readFlatCoordinatesFromNode_(node, objectStack);\n  if (flatCoordinates) {\n    const ring = new LinearRing(null);\n    ring.setFlatCoordinates(GeometryLayout.XYZ, flatCoordinates);\n    return ring;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {ol.geom.Polygon|undefined} Polygon.\n */\nGMLBase.prototype.readPolygon = function(node, objectStack) {\n  /** @type {Array.<Array.<number>>} */\n  const flatLinearRings = _ol_xml_.pushParseAndPop([null],\n    this.FLAT_LINEAR_RINGS_PARSERS_, node, objectStack, this);\n  if (flatLinearRings && flatLinearRings[0]) {\n    const polygon = new Polygon(null);\n    const flatCoordinates = flatLinearRings[0];\n    const ends = [flatCoordinates.length];\n    let i, ii;\n    for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n      extend(flatCoordinates, flatLinearRings[i]);\n      ends.push(flatCoordinates.length);\n    }\n    polygon.setFlatCoordinates(\n      GeometryLayout.XYZ, flatCoordinates, ends);\n    return polygon;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>} Flat coordinates.\n */\nGMLBase.prototype.readFlatCoordinatesFromNode_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop(null,\n    this.GEOMETRY_FLAT_COORDINATES_PARSERS_, node,\n    objectStack, this);\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGMLBase.prototype.MULTIPOINT_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'pointMember': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.pointMemberParser_),\n    'pointMembers': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.pointMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGMLBase.prototype.MULTILINESTRING_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.lineStringMemberParser_),\n    'lineStringMembers': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.lineStringMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGMLBase.prototype.MULTIPOLYGON_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'polygonMember': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.polygonMemberParser_),\n    'polygonMembers': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.polygonMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGMLBase.prototype.POINTMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Point': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.readFlatCoordinatesFromNode_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGMLBase.prototype.LINESTRINGMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineString': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.readLineString)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGMLBase.prototype.POLYGONMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Polygon': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.readPolygon)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @protected\n */\nGMLBase.prototype.RING_PARSERS = {\n  'http://www.opengis.net/gml': {\n    'LinearRing': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readFlatLinearRing_)\n  }\n};\n\n\n/**\n * @inheritDoc\n */\nGMLBase.prototype.readGeometryFromNode = function(node, opt_options) {\n  const geometry = this.readGeometryElement(node,\n    [this.getReadOptions(node, opt_options ? opt_options : {})]);\n  return geometry ? geometry : null;\n};\n\n\n/**\n * Read all features from a GML FeatureCollection.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Options.\n * @return {Array.<ol.Feature>} Features.\n * @api\n */\nGMLBase.prototype.readFeatures;\n\n\n/**\n * @inheritDoc\n */\nGMLBase.prototype.readFeaturesFromNode = function(node, opt_options) {\n  const options = {\n    featureType: this.featureType,\n    featureNS: this.featureNS\n  };\n  if (opt_options) {\n    assign(options, this.getReadOptions(node, opt_options));\n  }\n  const features = this.readFeaturesInternal(node, [options]);\n  return features || [];\n};\n\n\n/**\n * @inheritDoc\n */\nGMLBase.prototype.readProjectionFromNode = function(node) {\n  return getProjection(this.srsName ? this.srsName :\n    node.firstElementChild.getAttribute('srsName'));\n};\nexport default GMLBase;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/GMLBase.js\n// module id = 45\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22","/**\n * @module ngeo.map.LayerHelper\n */\nimport googAsserts from 'goog/asserts.js';\nimport ngeoBase from 'ngeo/index.js';\nimport * as olArray from 'ol/array.js';\nimport olFormatWMTSCapabilities from 'ol/format/WMTSCapabilities.js';\nimport olLayerGroup from 'ol/layer/Group.js';\nimport olLayerImage from 'ol/layer/Image.js';\nimport olLayerTile from 'ol/layer/Tile.js';\nimport * as olObj from 'ol/obj.js';\nimport olSourceImageWMS from 'ol/source/ImageWMS.js';\nimport olSourceTileWMS from 'ol/source/TileWMS.js';\nimport olSourceWMTS from 'ol/source/WMTS.js';\nimport * as olUri from 'ol/uri.js';\n\n/**\n * Provides help functions that helps you to create and manage layers.\n * @param {angular.$q} $q Angular promises/deferred service.\n * @param {angular.$http} $http Angular http service.\n * @constructor\n * @struct\n * @ngdoc service\n * @ngname ngeoLayerHelper\n * @ngInject\n */\nconst exports = function($q, $http) {\n\n  /**\n   * @type {angular.$q}\n   * @private\n   */\n  this.$q_ = $q;\n\n  /**\n   * @type {angular.$http}\n   * @private\n   */\n  this.$http_ = $http;\n};\n\n\n/**\n * @const\n */\nexports.GROUP_KEY = 'groupName';\n\n\n/**\n * @const\n */\nexports.REFRESH_PARAM = 'random';\n\n\n/**\n * Create and return a basic WMS layer with only a source URL and a comma\n * separated layers names (see {@link ol.source.ImageWMS}).\n *\n * @param {string} sourceURL The source URL.\n * @param {string} sourceLayersName A comma separated names string.\n * @param {string} sourceFormat Image format, for example 'image/png'.\n * @param {string=} opt_serverType Type of the server (\"mapserver\",\n *     \"geoserver\", \"qgisserver\", …).\n * @param {string=} opt_time time parameter for layer queryable by time/periode\n * @param {Object.<string, string>=} opt_params WMS parameters.\n * @param {string=} opt_crossOrigin crossOrigin.\n * @return {ol.layer.Image} WMS Layer.\n * @export\n */\nexports.prototype.createBasicWMSLayer = function(sourceURL,\n  sourceLayersName, sourceFormat, opt_serverType, opt_time, opt_params, opt_crossOrigin) {\n\n  const params = {\n    'FORMAT': sourceFormat,\n    'LAYERS': sourceLayersName\n  };\n  let olServerType;\n  if (opt_time) {\n    params['TIME'] = opt_time;\n  }\n  if (opt_serverType) {\n    params['SERVERTYPE'] = opt_serverType;\n    // OpenLayers expects 'qgis' insteads of 'qgisserver'\n    olServerType = opt_serverType.replace('qgisserver', 'qgis');\n  }\n  const source = new olSourceImageWMS({\n    url: sourceURL,\n    params: params,\n    serverType: olServerType,\n    crossOrigin: opt_crossOrigin\n  });\n  if (opt_params) {\n    source.updateParams(opt_params);\n  }\n\n  return new olLayerImage({source});\n};\n\n\n/**\n * Create and return a basic WMS layer using an OGC data source.\n *\n * @param {ngeo.datasource.OGC} dataSource OGC data source.\n * @param {string=} opt_crossOrigin crossOrigin.\n * @return {ol.layer.Image} WMS Layer.\n * @export\n */\nexports.prototype.createBasicWMSLayerFromDataSource = function(\n  dataSource, opt_crossOrigin\n) {\n  const url = dataSource.wmsUrl;\n  googAsserts.assert(url);\n\n  const layerNames = dataSource.getOGCLayerNames().join(',');\n  const serverType = dataSource.ogcServerType;\n  const imageType = dataSource.ogcImageType;\n\n  // (1) Layer creation\n  const layer = this.createBasicWMSLayer(\n    url,\n    layerNames,\n    imageType,\n    serverType,\n    undefined,\n    undefined,\n    opt_crossOrigin\n  );\n\n  // (2) Manage visibility\n  layer.setVisible(dataSource.visible);\n\n  // (3) Reference to the data source\n  layer.set('querySourceIds', [dataSource.id]);\n\n  return layer;\n};\n\n\n/**\n * Create and return a promise that provides a WMTS layer with source on\n * success, no layer else.\n * The WMTS layer source will be configured by the capabilities that are\n * loaded from the given capabilitiesUrl.\n * The style object described in the capabilities for this layer will be added\n * as key 'capabilitiesStyles' as param of the new layer.\n * @param {string} capabilitiesURL The getCapabilities url.\n * @param {string} layerName The name of the layer.\n * @param {Object.<string, string>=} opt_dimensions WMTS dimensions.\n * @return {angular.$q.Promise.<ol.layer.Tile>} A Promise with a layer (with source) on success,\n *     no layer else.\n * @export\n */\nexports.prototype.createWMTSLayerFromCapabilitites = function(capabilitiesURL, layerName, opt_dimensions) {\n  const parser = new olFormatWMTSCapabilities();\n  const layer = new olLayerTile({\n    preload: Infinity\n  });\n  const $q = this.$q_;\n\n  return this.$http_.get(capabilitiesURL, {cache: true}).then((response) => {\n    let result;\n    if (response.data) {\n      result = parser.read(response.data);\n    }\n    if (result) {\n      const options = olSourceWMTS.optionsFromCapabilities(result, {\n        crossOrigin: 'anonymous',\n        layer: layerName\n      });\n      googAsserts.assert(options);\n      const source = new olSourceWMTS(/** @type {olx.source.WMTSOptions} */ (options));\n      if (opt_dimensions && !olObj.isEmpty(opt_dimensions)) {\n        source.updateDimensions(opt_dimensions);\n      }\n      layer.setSource(source);\n\n      // Add styles from capabilities as param of the layer\n      const layers = result['Contents']['Layer'];\n      const l = olArray.find(layers, (elt, index, array) => elt['Identifier'] == layerName);\n      layer.set('capabilitiesStyles', l['Style']);\n\n      return $q.resolve(layer);\n    }\n    return $q.reject(`Failed to get WMTS capabilities from ${capabilitiesURL}`);\n  });\n};\n\n\n/**\n * Create and return a WMTS layer using a formatted capabilities response\n * and a capability layer.\n *\n * @param {!Object} capabilities The complete capabilities object of the service\n * @param {!Object} layerCap The layer capability object\n * @param {Object.<string, string>=} opt_dimensions WMTS dimensions.\n * @return {!ol.layer.Tile} WMTS layer\n * @export\n */\nexports.prototype.createWMTSLayerFromCapabilititesObj = function(\n  capabilities, layerCap, opt_dimensions\n) {\n\n  const options = olSourceWMTS.optionsFromCapabilities(capabilities, {\n    crossOrigin: 'anonymous',\n    layer: layerCap['Identifier']\n  });\n\n  googAsserts.assert(options);\n  const source = new olSourceWMTS(\n    /** @type {olx.source.WMTSOptions} */ (options));\n\n  if (opt_dimensions && !olObj.isEmpty(opt_dimensions)) {\n    source.updateDimensions(opt_dimensions);\n  }\n\n  return new olLayerTile({\n    'capabilitiesStyles': layerCap['Style'],\n    preload: Infinity,\n    source: source\n  });\n};\n\n\n/**\n * Create and return an ol.layer.Group. You can pass a collection of layers to\n * directly add them in the returned group.\n * @param {ol.Collection.<ol.layer.Base>=} opt_layers The layer to add to the\n * returned Group.\n * @return {ol.layer.Group} Layer group.\n * @export\n */\nexports.prototype.createBasicGroup = function(opt_layers) {\n  const group = new olLayerGroup();\n  if (opt_layers) {\n    group.setLayers(opt_layers);\n  }\n  return group;\n};\n\n\n/**\n * Retrieve (or create if it doesn't exist) and return a group of layer from\n * the base array of layers of a map. The given name is used as unique\n * identifier. If the group is created, it will be automatically added to\n * the map.\n * @param {ol.Map} map A map.\n * @param {string} groupName The name of the group.\n * @return {ol.layer.Group} The group corresponding to the given name.\n * @export\n */\nexports.prototype.getGroupFromMap = function(map, groupName) {\n  const groups = map.getLayerGroup().getLayers();\n  let group;\n  groups.getArray().some((existingGroup) => {\n    if (existingGroup.get(exports.GROUP_KEY) === groupName) {\n      group = /** @type {ol.layer.Group} */ (existingGroup);\n      return true;\n    } else {\n      return false;\n    }\n  });\n  if (!group) {\n    group = this.createBasicGroup();\n    group.set(exports.GROUP_KEY, groupName);\n    map.addLayer(group);\n  }\n  return group;\n};\n\n\n/**\n * Get an array of all layers in a group. The group can contain multiple levels\n * of others groups.\n * @param {ol.layer.Base} layer The base layer, mostly a group of layers.\n * @return {Array.<ol.layer.Layer>} Layers.\n * @export\n */\nexports.prototype.getFlatLayers = function(layer) {\n  return this.getFlatLayers_(layer, []);\n};\n\n\n/**\n * Get an array of all layers in a group. The group can contain multiple levels\n * of others groups.\n * @param {ol.layer.Base} layer The base layer, mostly a group of layers.\n * @param {Array.<ol.layer.Base>} array An array to add layers.\n * @return {Array.<ol.layer.Layer>} Layers.\n * @private\n */\nexports.prototype.getFlatLayers_ = function(layer, array) {\n  if (layer instanceof olLayerGroup) {\n    const sublayers = layer.getLayers();\n    sublayers.forEach(function(l) {\n      this.getFlatLayers_(l, array);\n    }, this);\n  } else {\n    if (array.indexOf(layer) < 0) {\n      array.push(layer);\n    }\n  }\n  return array;\n};\n\n\n/**\n * Get a layer that has a `layerName` property equal to a given layer name from\n * an array of layers. If one of the layers in the array is a group, then the\n * layers contained in that group are searched as well.\n * @param {string} layerName The name of the layer we're looking for.\n * @param {Array.<ol.layer.Base>} layers Layers.\n * @return {?ol.layer.Base} Layer.\n * @export\n */\nexports.prototype.getLayerByName = function(layerName, layers) {\n  let found = null;\n  layers.some(function(layer) {\n    if (layer instanceof olLayerGroup) {\n      const sublayers = layer.getLayers().getArray();\n      found = this.getLayerByName(layerName, sublayers);\n    } else if (layer.get('layerNodeName') === layerName) {\n      found = layer;\n    }\n    return !!found;\n  }, this);\n\n  return found;\n};\n\n\n/**\n * Get the WMTS legend URL for the given layer.\n * @param {ol.layer.Tile} layer Tile layer as returned by the\n * ngeo layerHelper service.\n * @return {string|undefined} The legend URL or undefined.\n * @export\n */\nexports.prototype.getWMTSLegendURL = function(layer) {\n  // FIXME case of multiple styles ?  case of multiple legendUrl ?\n  let url;\n  const styles = layer.get('capabilitiesStyles');\n  if (styles !== undefined) {\n    const legendURL = styles[0]['legendURL'];\n    if (legendURL !== undefined) {\n      url = legendURL[0]['href'];\n    }\n  }\n  return url;\n};\n\n\n/**\n * Get the WMS legend URL for the given node.\n * @param {string|undefined} url The base url of the wms service.\n * @param {string} layerName The name of a wms layer.\n * @param {number=} opt_scale A scale.\n * @param {string=} opt_legendRule rule parameters to add to the returned URL.\n * @return {string|undefined} The legend URL or undefined.\n * @export\n */\nexports.prototype.getWMSLegendURL = function(url,\n  layerName, opt_scale, opt_legendRule) {\n  if (!url) {\n    return undefined;\n  }\n  const queryString = {\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true,\n    'SERVICE': 'WMS',\n    'VERSION': '1.1.1',\n    'REQUEST': 'GetLegendGraphic',\n    'LAYER': layerName\n  };\n  if (opt_scale !== undefined) {\n    queryString['SCALE'] = opt_scale;\n  }\n  if (opt_legendRule !== undefined) {\n    queryString['RULE'] = opt_legendRule;\n  }\n  return olUri.appendParams(url, queryString);\n};\n\n\n/**\n * Returns if this layer is visible at the current resolution.\n * @param {ol.layer.Base} layer Layer.\n * @param {ol.Map} map Map.\n * @return {boolean} Is the layer currently visible?\n */\nexports.prototype.isLayerVisible = function(layer, map) {\n  if (!layer.getVisible()) {\n    return false;\n  }\n\n  const currentResolution = map.getView().getResolution();\n  return currentResolution > layer.getMinResolution() &&\n      currentResolution < layer.getMaxResolution();\n};\n\n\n/**\n * Force a WMS layer to refresh using a random value.\n * @param {ol.layer.Image|ol.layer.Tile} layer Layer to refresh.\n */\nexports.prototype.refreshWMSLayer = function(layer) {\n  const source_ = layer.getSource();\n  googAsserts.assert(\n    source_ instanceof olSourceImageWMS ||\n    source_ instanceof olSourceTileWMS\n  );\n  const source = /** @type {ol.source.ImageWMS|ol.source.TileWMS} */ (source_);\n  const params = source.getParams();\n  params[exports.REFRESH_PARAM] = Math.random();\n  source.updateParams(params);\n};\n\n\n/**\n * Update the LAYERS parameter of the source of the given WMS layer.\n * @param {ol.layer.Image} layer The WMS layer.\n * @param {string} names The names that will be used to set\n * the LAYERS parameter.\n * @param {string=} opt_time The start\n * and optionally the end datetime (for time range selection) selected by user\n * in a ISO-8601 string datetime or time interval format\n * @export\n */\nexports.prototype.updateWMSLayerState = function(layer, names, opt_time) {\n  // Don't send layer without parameters, hide layer instead;\n  if (names.length <= 0) {\n    layer.setVisible(false);\n  } else {\n    layer.setVisible(true);\n    const source = /** @type {ol.source.ImageWMS} */ (layer.getSource());\n    if (opt_time) {\n      source.updateParams({'LAYERS': names, 'TIME': opt_time});\n    } else {\n      source.updateParams({'LAYERS': names});\n    }\n  }\n};\n\n\n/**\n * @param {ol.layer.Image} layer The WMS layer.\n * @return {Array.<number>|undefined} List of query source ids, a.k.a.\n *     the data source ids this layer is composed of.\n * @export\n */\nexports.prototype.getQuerySourceIds = function(layer) {\n  return /** @type {Array.<number>|undefined} */ (\n    layer.get('querySourceIds'));\n};\n\n\n/**\n * @type {!angular.Module}\n */\nexports.module = angular.module('ngeoLayerHelper', []);\nexports.module.service('ngeoLayerHelper', exports);\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/map/LayerHelper.js","/**\n * @module gmfapp.objecteditinghub\n */\nconst exports = {};\n\nimport './objecteditinghub.css';\nimport './common_dependencies.js';\nimport googAsserts from 'goog/asserts.js';\n\nimport gmfBase from 'gmf/index.js';\nimport gmfEditingXSDAttributes from 'gmf/editing/XSDAttributes.js';\nimport gmfObjecteditingManager from 'gmf/objectediting/Manager.js';\nimport gmfThemeThemes from 'gmf/theme/Themes.js';\nimport olFormatWFS from 'ol/format/WFS.js';\nimport ngeoFormatXSDAttribute from 'ngeo/format/XSDAttribute.js';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('gmfapp', [\n  gmfBase.module.name,\n  gmfEditingXSDAttributes.module.name,\n  gmfObjecteditingManager.module.name,\n  gmfThemeThemes.module.name,\n]);\n\n\nexports.module.value('gmfTreeUrl',\n  'https://geomapfish-demo.camptocamp.net/2.2/wsgi/themes?version=2&background=background');\n\n\nexports.module.value('gmfLayersUrl',\n  'https://geomapfish-demo.camptocamp.net/2.2/wsgi/layers/');\n\nexports.constant('defaultTheme', 'Demo');\nexports.constant('angularLocaleScript', '../build/angular-locale_{{locale}}.js');\n\n\n/**\n * @param {angular.$http} $http Angular $http service.\n * @param {angular.$q} $q Angular $q service.\n * @param {!angular.Scope} $scope Angular scope.\n * @param {gmf.theme.Themes} gmfThemes The gmf themes service.\n * @param {gmf.editing.XSDAttributes} gmfXSDAttributes The gmf XSDAttributes service.\n * @constructor\n * @ngInject\n */\nexports.MainController = function($http, $q, $scope, gmfThemes, gmfXSDAttributes) {\n\n  /**\n   * @type {angular.$http}\n   * @private\n   */\n  this.http_ = $http;\n\n  /**\n   * @type {angular.$q}\n   * @private\n   */\n  this.q_ = $q;\n\n  /**\n   * @type {gmf.theme.Themes}\n   * @private\n   */\n  this.gmfThemes_ = gmfThemes;\n\n  /**\n   * @type {gmf.editing.XSDAttributes}\n   * @private\n   */\n  this.gmfXSDAttributes_ = gmfXSDAttributes;\n\n  /**\n   * @type {Array.<string>} List of example and application urls that contain\n   *     ObjectEditing tools.\n   * @export\n   */\n  this.urls = [\n    {\n      'name': 'oeedit app. (hosted)',\n      'url': 'apps/oeedit/'\n    },\n    {\n      'name': 'oeedit app. (dev)',\n      'url': '../apps/oeedit/'\n    },\n    {\n      'name': 'example',\n      'url': 'objectediting.html'\n    }\n  ];\n\n  /**\n   * @type {string} OE viewer application base url when developping.\n   * @private\n   */\n  this.viewerUrlDev_ = '../apps/oeview/';\n\n  /**\n   * @type {string} OE viewer application base url when hosted.\n   * @private\n   */\n  this.viewerUrlHosted_ = 'apps/oeview/';\n\n  /**\n   * @type {Object.<string, string>}\n   * @export\n   */\n  this.selectedUrl = this.urls[0];\n\n  /**\n   * @type {gmfThemes.GmfOgcServers} ogcServers OGC servers.\n   * @private\n   */\n  this.gmfServers_;\n\n  /**\n   * @type {gmfThemes.GmfOgcServer} ogcServer OGC server to use.\n   * @private\n   */\n  this.gmfServer_;\n\n  /**\n   * @type {Array.<gmfThemes.GmfLayerWMS>}\n   * @export\n   */\n  this.gmfLayerNodes = [];\n\n  /**\n   * @type {?gmfThemes.GmfLayerWMS}\n   * @export\n   */\n  this.selectedGmfLayerNode = null;\n\n  /**\n   * @type {Object.<number, Array.<ol.Feature>>}\n   * @export\n   */\n  this.featuresCache_ = {};\n\n  /**\n   * @type {Array.<ol.Feature>}\n   * @export\n   */\n  this.features = null;\n\n  /**\n   * @type {?ol.Feature}\n   * @export\n   */\n  this.selectedFeature = null;\n\n  /**\n   * @type {Object.<number, string>}\n   * @private\n   */\n  this.geomTypeCache_ = {};\n\n  /**\n   * @type {string|undefined}\n   * @export\n   */\n  this.selectedGeomType = undefined;\n\n  $scope.$watch(\n    () => this.selectedGmfLayerNode,\n    (newVal, oldVal) => {\n      this.selectedFeature = null;\n\n      if (newVal) {\n        this.getFeatures_(newVal).then(\n          this.handleGetFeatures_.bind(this, newVal)\n        );\n        this.getGeometryType_(newVal).then(\n          this.handleGetGeometryType_.bind(this, newVal)\n        );\n      }\n    }\n  );\n\n  /**\n   * @type {string}\n   * @export\n   */\n  this.themeName = 'ObjectEditing';\n\n  this.gmfThemes_.loadThemes();\n\n  this.gmfThemes_.getOgcServersObject().then((ogcServers) => {\n\n    // (1) Set OGC servers\n    this.gmfServers_ = ogcServers;\n\n    this.gmfThemes_.getThemesObject().then((themes) => {\n      if (!themes) {\n        return;\n      }\n\n      let i, ii;\n\n      // (2) Find OE theme\n      let theme;\n      for (i = 0, ii = themes.length; i < ii; i++) {\n        if (themes[i].name === this.themeName) {\n          theme = themes[i];\n          break;\n        }\n      }\n\n      if (!theme) {\n        return;\n      }\n\n      // (3) Get first group node\n      const groupNode = theme.children[0];\n\n      // (4) Set OGC server, which must support WFS for this example to work\n      googAsserts.assert(groupNode.ogcServer);\n      const gmfServer = this.gmfServers_[groupNode.ogcServer];\n      if (gmfServer && gmfServer.wfsSupport === true && gmfServer.urlWfs) {\n        this.gmfServer_ = gmfServer;\n      } else {\n        return;\n      }\n\n      const gmfLayerNodes = [];\n      for (i = 0, ii = groupNode.children.length; i < ii; i++) {\n        if (groupNode.children[i].metadata.identifierAttributeField) {\n          gmfLayerNodes.push(groupNode.children[i]);\n        }\n      }\n\n      // (5) Set layer nodes\n      this.gmfLayerNodes = gmfLayerNodes;\n\n      // (6) Select 'polygon' for the purpose of simplifying the demo\n      this.selectedGmfLayerNode = this.gmfLayerNodes[1];\n\n    });\n  });\n\n};\n\n\n/**\n * @export\n */\nexports.MainController.prototype.runEditor = function() {\n\n  const geomType = this.selectedGeomType;\n  const feature = this.selectedFeature;\n  const layer = this.selectedGmfLayerNode.id;\n  const property = this.selectedGmfLayerNode.metadata.identifierAttributeField;\n  googAsserts.assert(property !== undefined);\n  const id = feature.get(property);\n\n  const params = {};\n  params[gmfObjecteditingManager.Param.GEOM_TYPE] = geomType;\n  params[gmfObjecteditingManager.Param.ID] = id;\n  params[gmfObjecteditingManager.Param.LAYER] = layer;\n  params[gmfObjecteditingManager.Param.THEME] = this.themeName;\n  params[gmfObjecteditingManager.Param.PROPERTY] = property;\n\n  const url = exports.MainController.appendParams(this.selectedUrl['url'], params);\n  window.open(url);\n};\n\n\n/**\n * @export\n */\nexports.MainController.prototype.runViewerDev = function() {\n  this.runViewer_(this.viewerUrlDev_);\n};\n\n\n/**\n * @export\n */\nexports.MainController.prototype.runViewerHosted = function() {\n  this.runViewer_(this.viewerUrlHosted_);\n};\n\n\n/**\n * @param {string} baseUrl Base url of the viewer.\n * @private\n */\nexports.MainController.prototype.runViewer_ = function(baseUrl) {\n\n  const node = this.selectedGmfLayerNode;\n  const nodeId = node.id;\n  const nodeName = node.name;\n  const nodeIdAttrFieldName = node.metadata.identifierAttributeField;\n  googAsserts.assert(nodeIdAttrFieldName !== undefined);\n  const ids = [];\n\n  const features = this.featuresCache_[nodeId];\n  for (let i = 0, ii = features.length; i < ii; i++) {\n    ids.push(\n      features[i].get(nodeIdAttrFieldName)\n    );\n  }\n\n  const params = {};\n  params['wfs_layer'] = nodeName;\n  params[`wfs_${nodeIdAttrFieldName}`] = ids.join(',');\n\n  const url = exports.MainController.appendParams(baseUrl, params);\n  window.open(url);\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @return {angular.$q.Promise} The promise attached to the deferred object.\n * @private\n */\nexports.MainController.prototype.getFeatures_ = function(gmfLayerNode) {\n\n  this.getFeaturesDeferred_ = this.q_.defer();\n\n  const features = this.getFeaturesFromCache_(gmfLayerNode);\n\n  if (features) {\n    this.getFeaturesDeferred_.resolve();\n  } else {\n    this.issueGetFeatures_(gmfLayerNode);\n  }\n\n  return this.getFeaturesDeferred_.promise;\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @private\n */\nexports.MainController.prototype.issueGetFeatures_ = function(gmfLayerNode) {\n\n  const id = gmfLayerNode.id;\n\n  const url = exports.MainController.appendParams(\n    this.gmfServer_.urlWfs,\n    {\n      'SERVICE': 'WFS',\n      'REQUEST': 'GetFeature',\n      'VERSION': '1.1.0',\n      'TYPENAME': gmfLayerNode.layers\n    }\n  );\n\n  this.http_.get(url).then((response) => {\n    const features = new olFormatWFS().readFeatures(response.data);\n    this.featuresCache_[id] = features;\n    this.getFeaturesDeferred_.resolve();\n  });\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @private\n */\nexports.MainController.prototype.handleGetFeatures_ = function(gmfLayerNode) {\n  const features = /** @type Array.<ol.Feature> */ (\n    this.getFeaturesFromCache_(gmfLayerNode));\n  this.features = features;\n  this.selectedFeature = this.features[0];\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @return {?Array.<ol.Feature>} List of features\n * @private\n */\nexports.MainController.prototype.getFeaturesFromCache_ = function(gmfLayerNode) {\n  const id = gmfLayerNode.id;\n  const features = this.featuresCache_[id] || null;\n  return features;\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @return {angular.$q.Promise} The promise attached to the deferred object.\n * @private\n */\nexports.MainController.prototype.getGeometryType_ = function(gmfLayerNode) {\n\n  this.getGeometryTypeDeferred_ = this.q_.defer();\n\n  const geomType = this.getGeometryTypeFromCache_(gmfLayerNode);\n\n  if (geomType) {\n    this.getGeometryTypeDeferred_.resolve();\n  } else {\n    this.issueGetAttributesRequest_(gmfLayerNode);\n  }\n\n  return this.getGeometryTypeDeferred_.promise;\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @private\n */\nexports.MainController.prototype.issueGetAttributesRequest_ = function(\n  gmfLayerNode\n) {\n\n  this.gmfXSDAttributes_.getAttributes(gmfLayerNode.id).then(\n    function(gmfLayerNode, attributes) {\n      // Get geom type from attributes and set\n      const geomAttr = ngeoFormatXSDAttribute.getGeometryAttribute(attributes);\n      if (geomAttr && geomAttr.geomType) {\n        this.geomTypeCache_[gmfLayerNode.id] = geomAttr.geomType;\n        this.getGeometryTypeDeferred_.resolve();\n      }\n    }.bind(this, gmfLayerNode)\n  );\n\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @private\n */\nexports.MainController.prototype.handleGetGeometryType_ = function(gmfLayerNode) {\n  const geomType = this.getGeometryTypeFromCache_(gmfLayerNode);\n  this.selectedGeomType = geomType;\n};\n\n\n/**\n * @param {gmfThemes.GmfLayerWMS} gmfLayerNode Layer node.\n * @return {string|undefined} The type of geometry.\n * @private\n */\nexports.MainController.prototype.getGeometryTypeFromCache_ = function(\n  gmfLayerNode\n) {\n  const id = gmfLayerNode.id;\n  const geomType = this.geomTypeCache_[id];\n  return geomType;\n};\n\n\n/**\n * Appends query parameters to a URI.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.\n * @return {string} The new URI.\n */\nexports.MainController.appendParams = function(uri, params) {\n  const keyParams = [];\n  // Skip any null or undefined parameter values\n  Object.keys(params).forEach((k) => {\n    if (params[k] !== null && params[k] !== undefined) {\n      keyParams.push(`${k}=${encodeURIComponent(params[k])}`);\n    }\n  });\n  const qs = keyParams.join('&');\n  // remove any trailing ? or &\n  uri = uri.replace(/[?&]$/, '');\n  // append ? or & depending on whether uri has existing parameters\n  uri = uri.indexOf('?') === -1 ? `${uri}?` : `${uri}&`;\n  return uri + qs;\n};\n\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./contribs/gmf/examples/objecteditinghub.js","/**\n * @module ol/format/XML\n */\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Generic format for reading non-feature XML data\n *\n * @constructor\n * @abstract\n * @struct\n */\nconst XML = function() {\n};\n\n\n/**\n * @param {Document|Node|string} source Source.\n * @return {Object} The parsed result.\n */\nXML.prototype.read = function(source) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readFromDocument(/** @type {Document} */ (source));\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readFromNode(/** @type {Node} */ (source));\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readFromDocument(doc);\n  } else {\n    return null;\n  }\n};\n\n\n/**\n * @abstract\n * @param {Document} doc Document.\n * @return {Object} Object\n */\nXML.prototype.readFromDocument = function(doc) {};\n\n\n/**\n * @abstract\n * @param {Node} node Node.\n * @return {Object} Object\n */\nXML.prototype.readFromNode = function(node) {};\nexport default XML;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/XML.js\n// module id = 50\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module ol/format/GML2\n */\nimport {inherits} from '../index.js';\nimport {createOrUpdate} from '../extent.js';\nimport {transformWithOptions} from '../format/Feature.js';\nimport GMLBase from '../format/GMLBase.js';\nimport XSD from '../format/XSD.js';\nimport Geometry from '../geom/Geometry.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection, transformExtent} from '../proj.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format,\n * version 2.1.2.\n *\n * @constructor\n * @param {olx.format.GMLOptions=} opt_options Optional configuration object.\n * @extends {ol.format.GMLBase}\n * @api\n */\nconst GML2 = function(opt_options) {\n  const options = /** @type {olx.format.GMLOptions} */\n      (opt_options ? opt_options : {});\n\n  GMLBase.call(this, options);\n\n  this.FEATURE_COLLECTION_PARSERS[GMLBase.GMLNS][\n    'featureMember'] =\n      _ol_xml_.makeArrayPusher(GMLBase.prototype.readFeaturesInternal);\n\n  /**\n   * @inheritDoc\n   */\n  this.schemaLocation = options.schemaLocation ?\n    options.schemaLocation : GML2.schemaLocation_;\n\n};\n\ninherits(GML2, GMLBase);\n\n\n/**\n * @const\n * @type {string}\n * @private\n */\nGML2.schemaLocation_ = GMLBase.GMLNS +\n    ' http://schemas.opengis.net/gml/2.1.2/feature.xsd';\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} Flat coordinates.\n */\nGML2.prototype.readFlatCoordinates_ = function(node, objectStack) {\n  const s = _ol_xml_.getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n  const context = /** @type {ol.XmlNodeStackItem} */ (objectStack[0]);\n  const containerSrs = context['srsName'];\n  let axisOrientation = 'enu';\n  if (containerSrs) {\n    const proj = getProjection(containerSrs);\n    if (proj) {\n      axisOrientation = proj.getAxisOrientation();\n    }\n  }\n  const coordsGroups = s.trim().split(/\\s+/);\n  let x, y, z;\n  const flatCoordinates = [];\n  for (let i = 0, ii = coordsGroups.length; i < ii; i++) {\n    const coords = coordsGroups[i].split(/,+/);\n    x = parseFloat(coords[0]);\n    y = parseFloat(coords[1]);\n    z = (coords.length === 3) ? parseFloat(coords[2]) : 0;\n    if (axisOrientation.substr(0, 2) === 'en') {\n      flatCoordinates.push(x, y, z);\n    } else {\n      flatCoordinates.push(y, x, z);\n    }\n  }\n  return flatCoordinates;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {ol.Extent|undefined} Envelope.\n */\nGML2.prototype.readBox_ = function(node, objectStack) {\n  /** @type {Array.<number>} */\n  const flatCoordinates = _ol_xml_.pushParseAndPop([null],\n    this.BOX_PARSERS_, node, objectStack, this);\n  return createOrUpdate(flatCoordinates[1][0],\n    flatCoordinates[1][1], flatCoordinates[1][3],\n    flatCoordinates[1][4]);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML2.prototype.innerBoundaryIsParser_ = function(node, objectStack) {\n  /** @type {Array.<number>|undefined} */\n  const flatLinearRing = _ol_xml_.pushParseAndPop(undefined,\n    this.RING_PARSERS, node, objectStack, this);\n  if (flatLinearRing) {\n    const flatLinearRings = /** @type {Array.<Array.<number>>} */\n        (objectStack[objectStack.length - 1]);\n    flatLinearRings.push(flatLinearRing);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML2.prototype.outerBoundaryIsParser_ = function(node, objectStack) {\n  /** @type {Array.<number>|undefined} */\n  const flatLinearRing = _ol_xml_.pushParseAndPop(undefined,\n    this.RING_PARSERS, node, objectStack, this);\n  if (flatLinearRing) {\n    const flatLinearRings = /** @type {Array.<Array.<number>>} */\n        (objectStack[objectStack.length - 1]);\n    flatLinearRings[0] = flatLinearRing;\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML2.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'coordinates': _ol_xml_.makeReplacer(\n      GML2.prototype.readFlatCoordinates_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML2.prototype.FLAT_LINEAR_RINGS_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'innerBoundaryIs': GML2.prototype.innerBoundaryIsParser_,\n    'outerBoundaryIs': GML2.prototype.outerBoundaryIsParser_\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML2.prototype.BOX_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'coordinates': _ol_xml_.makeArrayPusher(\n      GML2.prototype.readFlatCoordinates_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML2.prototype.GEOMETRY_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Point': _ol_xml_.makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readMultiPoint),\n    'LineString': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readLineString),\n    'MultiLineString': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readMultiLineString),\n    'LinearRing': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readLinearRing),\n    'Polygon': _ol_xml_.makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readMultiPolygon),\n    'Box': _ol_xml_.makeReplacer(GML2.prototype.readBox_)\n  }\n};\n\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node|undefined} Node.\n * @private\n */\nGML2.prototype.GEOMETRY_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const context = objectStack[objectStack.length - 1];\n  const multiSurface = context['multiSurface'];\n  const surface = context['surface'];\n  const multiCurve = context['multiCurve'];\n  let nodeName;\n  if (!Array.isArray(value)) {\n    nodeName = /** @type {ol.geom.Geometry} */ (value).getType();\n    if (nodeName === 'MultiPolygon' && multiSurface === true) {\n      nodeName = 'MultiSurface';\n    } else if (nodeName === 'Polygon' && surface === true) {\n      nodeName = 'Surface';\n    } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n      nodeName = 'MultiCurve';\n    }\n  } else {\n    nodeName = 'Envelope';\n  }\n  return _ol_xml_.createElementNS('http://www.opengis.net/gml',\n    nodeName);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Feature} feature Feature.\n * @param {Array.<*>} objectStack Node stack.\n */\nGML2.prototype.writeFeatureElement = function(node, feature, objectStack) {\n  const fid = feature.getId();\n  if (fid) {\n    node.setAttribute('fid', fid);\n  }\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const featureNS = context['featureNS'];\n  const geometryName = feature.getGeometryName();\n  if (!context.serializers) {\n    context.serializers = {};\n    context.serializers[featureNS] = {};\n  }\n  const properties = feature.getProperties();\n  const keys = [];\n  const values = [];\n  for (const key in properties) {\n    const value = properties[key];\n    if (value !== null) {\n      keys.push(key);\n      values.push(value);\n      if (key == geometryName || value instanceof Geometry) {\n        if (!(key in context.serializers[featureNS])) {\n          context.serializers[featureNS][key] = _ol_xml_.makeChildAppender(\n            this.writeGeometryElement, this);\n        }\n      } else {\n        if (!(key in context.serializers[featureNS])) {\n          context.serializers[featureNS][key] = _ol_xml_.makeChildAppender(\n            XSD.writeStringTextNode);\n        }\n      }\n    }\n  }\n  const item = assign({}, context);\n  item.node = node;\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    (item), context.serializers,\n    _ol_xml_.makeSimpleNodeFactory(undefined, featureNS),\n    values,\n    objectStack, keys);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Geometry|ol.Extent} geometry Geometry.\n * @param {Array.<*>} objectStack Node stack.\n */\nGML2.prototype.writeGeometryElement = function(node, geometry, objectStack) {\n  const context = /** @type {olx.format.WriteOptions} */ (objectStack[objectStack.length - 1]);\n  const item = assign({}, context);\n  item.node = node;\n  let value;\n  if (Array.isArray(geometry)) {\n    if (context.dataProjection) {\n      value = transformExtent(\n        geometry, context.featureProjection, context.dataProjection);\n    } else {\n      value = geometry;\n    }\n  } else {\n    value = transformWithOptions(/** @type {ol.geom.Geometry} */ (geometry), true, context);\n  }\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    (item), GML2.GEOMETRY_SERIALIZERS_,\n    this.GEOMETRY_NODE_FACTORY_, [value],\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString} geometry LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeCurveOrLineString_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (node.nodeName !== 'LineStringSegment' && srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (node.nodeName === 'LineString' ||\n      node.nodeName === 'LineStringSegment') {\n    const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n    node.appendChild(coordinates);\n    this.writeCoordinates_(coordinates, geometry, objectStack);\n  } else if (node.nodeName === 'Curve') {\n    const segments = _ol_xml_.createElementNS(node.namespaceURI, 'segments');\n    node.appendChild(segments);\n    this.writeCurveSegments_(segments,\n      geometry, objectStack);\n  }\n};\n\n\n/**\n * @param {string} namespaceURI XML namespace.\n * @returns {Node} coordinates node.\n * @private\n */\nGML2.prototype.createCoordinatesNode_ = function(namespaceURI) {\n  const coordinates = _ol_xml_.createElementNS(namespaceURI, 'coordinates');\n  coordinates.setAttribute('decimal', '.');\n  coordinates.setAttribute('cs', ',');\n  coordinates.setAttribute('ts', ' ');\n\n  return coordinates;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString|ol.geom.LinearRing} value Geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeCoordinates_ = function(node, value, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  // only 2d for simple features profile\n  const points = value.getCoordinates();\n  const len = points.length;\n  const parts = new Array(len);\n  let point;\n  for (let i = 0; i < len; ++i) {\n    point = points[i];\n    parts[i] = this.getCoords_(point, srsName, hasZ);\n  }\n  XSD.writeStringTextNode(node, parts.join(' '));\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString} line LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeCurveSegments_ = function(node, line, objectStack) {\n  const child = _ol_xml_.createElementNS(node.namespaceURI,\n    'LineStringSegment');\n  node.appendChild(child);\n  this.writeCurveOrLineString_(child, line, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Polygon} geometry Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeSurfaceOrPolygon_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  if (node.nodeName !== 'PolygonPatch' && srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n    const rings = geometry.getLinearRings();\n    _ol_xml_.pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName},\n      GML2.RING_SERIALIZERS_,\n      this.RING_NODE_FACTORY_,\n      rings, objectStack, undefined, this);\n  } else if (node.nodeName === 'Surface') {\n    const patches = _ol_xml_.createElementNS(node.namespaceURI, 'patches');\n    node.appendChild(patches);\n    this.writeSurfacePatches_(\n      patches, geometry, objectStack);\n  }\n};\n\n\n/**\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node} Node.\n * @private\n */\nGML2.prototype.RING_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const context = objectStack[objectStack.length - 1];\n  const parentNode = context.node;\n  const exteriorWritten = context['exteriorWritten'];\n  if (exteriorWritten === undefined) {\n    context['exteriorWritten'] = true;\n  }\n  return _ol_xml_.createElementNS(parentNode.namespaceURI,\n    exteriorWritten !== undefined ? 'innerBoundaryIs' : 'outerBoundaryIs');\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Polygon} polygon Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeSurfacePatches_ = function(node, polygon, objectStack) {\n  const child = _ol_xml_.createElementNS(node.namespaceURI, 'PolygonPatch');\n  node.appendChild(child);\n  this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LinearRing} ring LinearRing geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeRing_ = function(node, ring, objectStack) {\n  const linearRing = _ol_xml_.createElementNS(node.namespaceURI, 'LinearRing');\n  node.appendChild(linearRing);\n  this.writeLinearRing_(linearRing, ring, objectStack);\n};\n\n\n/**\n * @param {Array.<number>} point Point geometry.\n * @param {string=} opt_srsName Optional srsName\n * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.\n * @return {string} The coords string.\n * @private\n */\nGML2.prototype.getCoords_ = function(point, opt_srsName, opt_hasZ) {\n  let axisOrientation = 'enu';\n  if (opt_srsName) {\n    axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n  }\n  let coords = ((axisOrientation.substr(0, 2) === 'en') ?\n    point[0] + ',' + point[1] :\n    point[1] + ',' + point[0]);\n  if (opt_hasZ) {\n    // For newly created points, Z can be undefined.\n    const z = point[2] || 0;\n    coords += ',' + z;\n  }\n\n  return coords;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.MultiLineString} geometry MultiLineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeMultiCurveOrLineString_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  const curve = context['curve'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const lines = geometry.getLineStrings();\n  _ol_xml_.pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n    GML2.LINESTRINGORCURVEMEMBER_SERIALIZERS_,\n    this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Point} geometry Point geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writePoint_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n  node.appendChild(coordinates);\n  const point = geometry.getCoordinates();\n  const coord = this.getCoords_(point, srsName, hasZ);\n  XSD.writeStringTextNode(coordinates, coord);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.MultiPoint} geometry MultiPoint geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeMultiPoint_ = function(node, geometry,\n  objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const points = geometry.getPoints();\n  _ol_xml_.pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName},\n    GML2.POINTMEMBER_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('pointMember'), points,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Point} point Point geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writePointMember_ = function(node, point, objectStack) {\n  const child = _ol_xml_.createElementNS(node.namespaceURI, 'Point');\n  node.appendChild(child);\n  this.writePoint_(child, point, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString} line LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeLineStringOrCurveMember_ = function(node, line, objectStack) {\n  const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n  if (child) {\n    node.appendChild(child);\n    this.writeCurveOrLineString_(child, line, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LinearRing} geometry LinearRing geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeLinearRing_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const coordinates = this.createCoordinatesNode_(node.namespaceURI);\n  node.appendChild(coordinates);\n  this.writeCoordinates_(coordinates, geometry, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.MultiPolygon} geometry MultiPolygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeMultiSurfaceOrPolygon_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  const surface = context['surface'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const polygons = geometry.getPolygons();\n  _ol_xml_.pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n    GML2.SURFACEORPOLYGONMEMBER_SERIALIZERS_,\n    this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Polygon} polygon Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeSurfaceOrPolygonMember_ = function(node, polygon, objectStack) {\n  const child = this.GEOMETRY_NODE_FACTORY_(\n    polygon, objectStack);\n  if (child) {\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Extent} extent Extent.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML2.prototype.writeEnvelope = function(node, extent, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const keys = ['lowerCorner', 'upperCorner'];\n  const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    ({node: node}), GML2.ENVELOPE_SERIALIZERS_,\n    _ol_xml_.OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack, keys, this);\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML2.GEOMETRY_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'Curve': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeCurveOrLineString_),\n    'MultiCurve': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeMultiCurveOrLineString_),\n    'Point': _ol_xml_.makeChildAppender(GML2.prototype.writePoint_),\n    'MultiPoint': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeMultiPoint_),\n    'LineString': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeCurveOrLineString_),\n    'MultiLineString': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeMultiCurveOrLineString_),\n    'LinearRing': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeLinearRing_),\n    'Polygon': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygon_),\n    'MultiPolygon': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeMultiSurfaceOrPolygon_),\n    'Surface': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygon_),\n    'MultiSurface': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeMultiSurfaceOrPolygon_),\n    'Envelope': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeEnvelope)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML2.RING_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'outerBoundaryIs': _ol_xml_.makeChildAppender(GML2.prototype.writeRing_),\n    'innerBoundaryIs': _ol_xml_.makeChildAppender(GML2.prototype.writeRing_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML2.POINTMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'pointMember': _ol_xml_.makeChildAppender(\n      GML2.prototype.writePointMember_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML2.LINESTRINGORCURVEMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeLineStringOrCurveMember_),\n    'curveMember': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeLineStringOrCurveMember_)\n  }\n};\n\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node|undefined} Node.\n * @private\n */\nGML2.prototype.MULTIGEOMETRY_MEMBER_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const parentNode = objectStack[objectStack.length - 1].node;\n  return _ol_xml_.createElementNS('http://www.opengis.net/gml',\n    GML2.MULTIGEOMETRY_TO_MEMBER_NODENAME_[parentNode.nodeName]);\n};\n\n/**\n * @const\n * @type {Object.<string, string>}\n * @private\n */\nGML2.MULTIGEOMETRY_TO_MEMBER_NODENAME_ = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML2.SURFACEORPOLYGONMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygonMember_),\n    'polygonMember': _ol_xml_.makeChildAppender(\n      GML2.prototype.writeSurfaceOrPolygonMember_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML2.ENVELOPE_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': _ol_xml_.makeChildAppender(XSD.writeStringTextNode),\n    'upperCorner': _ol_xml_.makeChildAppender(XSD.writeStringTextNode)\n  }\n};\nexport default GML2;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/GML2.js\n// module id = 51\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22","/**\n * @module ngeo.utils\n */\nconst exports = {};\nimport olEventsCondition from 'ol/events/condition.js';\nimport olGeomLineString from 'ol/geom/LineString.js';\nimport olGeomMultiPoint from 'ol/geom/MultiPoint.js';\nimport olGeomMultiLineString from 'ol/geom/MultiLineString.js';\nimport olGeomMultiPolygon from 'ol/geom/MultiPolygon.js';\nimport olGeomPoint from 'ol/geom/Point.js';\nimport olGeomPolygon from 'ol/geom/Polygon.js';\n\n\n/**\n * Utility method that converts a simple geometry to its multi equivalent. If\n * the geometry itself is already multi, it is returned as-is.\n * @param {ol.geom.Geometry} geometry A geometry\n * @return {ol.geom.Geometry} A multi geometry\n */\nexports.toMulti = function(geometry) {\n  let multiGeom;\n  if (geometry instanceof olGeomPoint) {\n    multiGeom = new olGeomMultiPoint([]);\n    multiGeom.appendPoint(geometry);\n  } else if (geometry instanceof olGeomLineString) {\n    multiGeom = new olGeomMultiLineString([]);\n    multiGeom.appendLineString(geometry);\n  } else if (geometry instanceof olGeomPolygon) {\n    multiGeom = new olGeomMultiPolygon([]);\n    multiGeom.appendPolygon(geometry);\n  } else {\n    multiGeom = geometry;\n  }\n  return multiGeom;\n};\n\n/**\n * Checks if on Safari.\n * @return {boolean} True if on Safari.\n */\nexports.isSafari = function() {\n  return navigator.userAgent.indexOf('Safari') != -1 && navigator.userAgent.indexOf('Chrome') == -1;\n};\n\n/**\n * Takes a hex value and prepends a zero if it's a single digit.\n * @param {string} hex Hex value to prepend if single digit.\n * @return {string} hex value prepended with zero if it was single digit,\n *     otherwise the same value that was passed in.\n */\nexports.colorZeroPadding = function(hex) {\n  return hex.length == 1 ? `0${hex}` : hex;\n};\n\n/**\n * Converts a color from RGB to hex representation.\n * @param {!Array.<number>} rgb rgb representation of the color.\n * @return {string} hex representation of the color.\n */\nexports.rgbArrayToHex = function(rgb) {\n  const r = rgb[0];\n  const g = rgb[1];\n  const b = rgb[2];\n  if (r != (r & 255) || g != (g & 255) || b != (b & 255)) {\n    throw Error(`\"(${r},${g},${b})\" is not a valid RGB color`);\n  }\n  const hexR = exports.colorZeroPadding(r.toString(16));\n  const hexG = exports.colorZeroPadding(g.toString(16));\n  const hexB = exports.colorZeroPadding(b.toString(16));\n  return `#${hexR}${hexG}${hexB}`;\n};\n\n/**\n * Decode the encoded query string into a query data dictionary.\n * @param {string|undefined} queryString The queryString.\n * @return {!Object.<string, string>} The result.\n */\nexports.decodeQueryString = function(queryString) {\n  const queryData = {};\n  if (queryString) {\n    const pairs = queryString.substring(1).split('&');\n    for (const pair of pairs) {\n      const indexOfEquals = pair.indexOf('=');\n      if (indexOfEquals >= 0) {\n        const name = pair.substring(0, indexOfEquals);\n        const value = pair.substring(indexOfEquals + 1);\n        queryData[decodeURIComponent(name)] = decodeURIComponent(value);\n      } else {\n        queryData[pair] = '';\n      }\n    }\n  }\n  return queryData;\n};\n\n/**\n * Encode the query data dictionary into an encoded query string.\n * @param {!Object.<string, string>} queryData The queryData,\n * @return {string} The result.\n */\nexports.encodeQueryString = function(queryData) {\n  const queryItem = [];\n  for (const key in queryData) {\n    const value = queryData[key];\n    queryItem.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);\n  }\n  return queryItem.join('&');\n};\n\n\n/**\n * Delete condition passed to the modify interaction\n * @param {ol.MapBrowserEvent} event Browser event.\n * @return {boolean} The result.\n */\nexports.deleteCondition = function(event) {\n  return olEventsCondition.noModifierKeys(event) && olEventsCondition.singleClick(event);\n};\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils.js","/**\n * @module ol/format/XLink\n */\nconst XLink = {};\n\n\n/**\n * @const\n * @type {string}\n */\nconst NAMESPACE_URI = 'http://www.w3.org/1999/xlink';\n\n\n/**\n * @param {Node} node Node.\n * @return {boolean|undefined} Boolean.\n */\nXLink.readHref = function(node) {\n  return node.getAttributeNS(NAMESPACE_URI, 'href');\n};\nexport default XLink;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/XLink.js\n// module id = 60\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module ol/Image\n */\nimport {inherits} from './index.js';\nimport _ol_ImageBase_ from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport _ol_events_ from './events.js';\nimport EventType from './events/EventType.js';\nimport {getHeight} from './extent.js';\n\n/**\n * @constructor\n * @extends {ol.ImageBase}\n * @param {ol.Extent} extent Extent.\n * @param {number|undefined} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @param {string} src Image source URI.\n * @param {?string} crossOrigin Cross origin.\n * @param {ol.ImageLoadFunctionType} imageLoadFunction Image load function.\n */\nconst _ol_Image_ = function(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {\n\n  _ol_ImageBase_.call(this, extent, resolution, pixelRatio, ImageState.IDLE);\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.src_ = src;\n\n  /**\n   * @private\n   * @type {HTMLCanvasElement|Image|HTMLVideoElement}\n   */\n  this.image_ = new Image();\n  if (crossOrigin !== null) {\n    this.image_.crossOrigin = crossOrigin;\n  }\n\n  /**\n   * @private\n   * @type {Array.<ol.EventsKey>}\n   */\n  this.imageListenerKeys_ = null;\n\n  /**\n   * @protected\n   * @type {ol.ImageState}\n   */\n  this.state = ImageState.IDLE;\n\n  /**\n   * @private\n   * @type {ol.ImageLoadFunctionType}\n   */\n  this.imageLoadFunction_ = imageLoadFunction;\n\n};\n\ninherits(_ol_Image_, _ol_ImageBase_);\n\n\n/**\n * @inheritDoc\n * @api\n */\n_ol_Image_.prototype.getImage = function() {\n  return this.image_;\n};\n\n\n/**\n * Tracks loading or read errors.\n *\n * @private\n */\n_ol_Image_.prototype.handleImageError_ = function() {\n  this.state = ImageState.ERROR;\n  this.unlistenImage_();\n  this.changed();\n};\n\n\n/**\n * Tracks successful image load.\n *\n * @private\n */\n_ol_Image_.prototype.handleImageLoad_ = function() {\n  if (this.resolution === undefined) {\n    this.resolution = getHeight(this.extent) / this.image_.height;\n  }\n  this.state = ImageState.LOADED;\n  this.unlistenImage_();\n  this.changed();\n};\n\n\n/**\n * Load the image or retry if loading previously failed.\n * Loading is taken care of by the tile queue, and calling this method is\n * only needed for preloading or for reloading in case of an error.\n * @override\n * @api\n */\n_ol_Image_.prototype.load = function() {\n  if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n    this.state = ImageState.LOADING;\n    this.changed();\n    this.imageListenerKeys_ = [\n      _ol_events_.listenOnce(this.image_, EventType.ERROR,\n        this.handleImageError_, this),\n      _ol_events_.listenOnce(this.image_, EventType.LOAD,\n        this.handleImageLoad_, this)\n    ];\n    this.imageLoadFunction_(this, this.src_);\n  }\n};\n\n\n/**\n * @param {HTMLCanvasElement|Image|HTMLVideoElement} image Image.\n */\n_ol_Image_.prototype.setImage = function(image) {\n  this.image_ = image;\n};\n\n\n/**\n * Discards event handlers which listen for load completion or errors.\n *\n * @private\n */\n_ol_Image_.prototype.unlistenImage_ = function() {\n  this.imageListenerKeys_.forEach(_ol_events_.unlistenByKey);\n  this.imageListenerKeys_ = null;\n};\nexport default _ol_Image_;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/Image.js\n// module id = null\n// module chunks = ","/**\n * @module ol/source/ImageWMS\n */\n\nimport {DEFAULT_WMS_VERSION} from './common.js';\nimport {inherits} from '../index.js';\nimport _ol_Image_ from '../Image.js';\nimport {assert} from '../asserts.js';\nimport _ol_events_ from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {containsExtent, getCenter, getForViewAndSize, getHeight, getWidth} from '../extent.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection, transform} from '../proj.js';\nimport _ol_reproj_ from '../reproj.js';\nimport ImageSource from '../source/Image.js';\nimport WMSServerType from '../source/WMSServerType.js';\nimport _ol_string_ from '../string.js';\nimport {appendParams} from '../uri.js';\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @constructor\n * @fires ol.source.Image.Event\n * @extends {ol.source.Image}\n * @param {olx.source.ImageWMSOptions=} opt_options Options.\n * @api\n */\nconst ImageWMS = function(opt_options) {\n\n  const options = opt_options || {};\n\n  ImageSource.call(this, {\n    attributions: options.attributions,\n    projection: options.projection,\n    resolutions: options.resolutions\n  });\n\n  /**\n   * @private\n   * @type {?string}\n   */\n  this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n  /**\n   * @private\n   * @type {string|undefined}\n   */\n  this.url_ = options.url;\n\n  /**\n   * @private\n   * @type {ol.ImageLoadFunctionType}\n   */\n  this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?\n    options.imageLoadFunction : ImageSource.defaultImageLoadFunction;\n\n  /**\n   * @private\n   * @type {!Object}\n   */\n  this.params_ = options.params || {};\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.v13_ = true;\n  this.updateV13_();\n\n  /**\n   * @private\n   * @type {ol.source.WMSServerType|undefined}\n   */\n  this.serverType_ = /** @type {ol.source.WMSServerType|undefined} */ (options.serverType);\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n  /**\n   * @private\n   * @type {ol.Image}\n   */\n  this.image_ = null;\n\n  /**\n   * @private\n   * @type {ol.Size}\n   */\n  this.imageSize_ = [0, 0];\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.renderedRevision_ = 0;\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n\n};\n\ninherits(ImageWMS, ImageSource);\n\n\n/**\n * @const\n * @type {ol.Size}\n * @private\n */\nImageWMS.GETFEATUREINFO_IMAGE_SIZE_ = [101, 101];\n\n\n/**\n * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n * constructed.\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {number} resolution Resolution.\n * @param {ol.ProjectionLike} projection Projection.\n * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n *     in the `LAYERS` parameter will be used. `VERSION` should not be\n *     specified here.\n * @return {string|undefined} GetFeatureInfo URL.\n * @api\n */\nImageWMS.prototype.getGetFeatureInfoUrl = function(coordinate, resolution, projection, params) {\n  if (this.url_ === undefined) {\n    return undefined;\n  }\n  const projectionObj = getProjection(projection);\n  const sourceProjectionObj = this.getProjection();\n\n  if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n    resolution = _ol_reproj_.calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, resolution);\n    coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n  }\n\n  const extent = getForViewAndSize(coordinate, resolution, 0,\n    ImageWMS.GETFEATUREINFO_IMAGE_SIZE_);\n\n  const baseParams = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_WMS_VERSION,\n    'REQUEST': 'GetFeatureInfo',\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true,\n    'QUERY_LAYERS': this.params_['LAYERS']\n  };\n  assign(baseParams, this.params_, params);\n\n  const x = Math.floor((coordinate[0] - extent[0]) / resolution);\n  const y = Math.floor((extent[3] - coordinate[1]) / resolution);\n  baseParams[this.v13_ ? 'I' : 'X'] = x;\n  baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n  return this.getRequestUrl_(\n    extent, ImageWMS.GETFEATUREINFO_IMAGE_SIZE_,\n    1, sourceProjectionObj || projectionObj, baseParams);\n};\n\n\n/**\n * Get the user-provided params, i.e. those passed to the constructor through\n * the \"params\" option, and possibly updated using the updateParams method.\n * @return {Object} Params.\n * @api\n */\nImageWMS.prototype.getParams = function() {\n  return this.params_;\n};\n\n\n/**\n * @inheritDoc\n */\nImageWMS.prototype.getImageInternal = function(extent, resolution, pixelRatio, projection) {\n\n  if (this.url_ === undefined) {\n    return null;\n  }\n\n  resolution = this.findNearestResolution(resolution);\n\n  if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n    pixelRatio = 1;\n  }\n\n  const imageResolution = resolution / pixelRatio;\n\n  const center = getCenter(extent);\n  const viewWidth = Math.ceil(getWidth(extent) / imageResolution);\n  const viewHeight = Math.ceil(getHeight(extent) / imageResolution);\n  const viewExtent = getForViewAndSize(center, imageResolution, 0,\n    [viewWidth, viewHeight]);\n  const requestWidth = Math.ceil(this.ratio_ * getWidth(extent) / imageResolution);\n  const requestHeight = Math.ceil(this.ratio_ * getHeight(extent) / imageResolution);\n  const requestExtent = getForViewAndSize(center, imageResolution, 0,\n    [requestWidth, requestHeight]);\n\n  const image = this.image_;\n  if (image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), viewExtent)) {\n    return image;\n  }\n\n  const params = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_WMS_VERSION,\n    'REQUEST': 'GetMap',\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true\n  };\n  assign(params, this.params_);\n\n  this.imageSize_[0] = Math.round(getWidth(requestExtent) / imageResolution);\n  this.imageSize_[1] = Math.round(getHeight(requestExtent) / imageResolution);\n\n  const url = this.getRequestUrl_(requestExtent, this.imageSize_, pixelRatio,\n    projection, params);\n\n  this.image_ = new _ol_Image_(requestExtent, resolution, pixelRatio,\n    url, this.crossOrigin_, this.imageLoadFunction_);\n\n  this.renderedRevision_ = this.getRevision();\n\n  _ol_events_.listen(this.image_, EventType.CHANGE,\n    this.handleImageChange, this);\n\n  return this.image_;\n\n};\n\n\n/**\n * Return the image load function of the source.\n * @return {ol.ImageLoadFunctionType} The image load function.\n * @api\n */\nImageWMS.prototype.getImageLoadFunction = function() {\n  return this.imageLoadFunction_;\n};\n\n\n/**\n * @param {ol.Extent} extent Extent.\n * @param {ol.Size} size Size.\n * @param {number} pixelRatio Pixel ratio.\n * @param {ol.proj.Projection} projection Projection.\n * @param {Object} params Params.\n * @return {string} Request URL.\n * @private\n */\nImageWMS.prototype.getRequestUrl_ = function(extent, size, pixelRatio, projection, params) {\n\n  assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\n\n  params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n  if (!('STYLES' in this.params_)) {\n    params['STYLES'] = '';\n  }\n\n  if (pixelRatio != 1) {\n    switch (this.serverType_) {\n      case WMSServerType.GEOSERVER:\n        const dpi = (90 * pixelRatio + 0.5) | 0;\n        if ('FORMAT_OPTIONS' in params) {\n          params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n        } else {\n          params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n        }\n        break;\n      case WMSServerType.MAPSERVER:\n        params['MAP_RESOLUTION'] = 90 * pixelRatio;\n        break;\n      case WMSServerType.CARMENTA_SERVER:\n      case WMSServerType.QGIS:\n        params['DPI'] = 90 * pixelRatio;\n        break;\n      default:\n        assert(false, 8); // Unknown `serverType` configured\n        break;\n    }\n  }\n\n  params['WIDTH'] = size[0];\n  params['HEIGHT'] = size[1];\n\n  const axisOrientation = projection.getAxisOrientation();\n  let bbox;\n  if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n    bbox = [extent[1], extent[0], extent[3], extent[2]];\n  } else {\n    bbox = extent;\n  }\n  params['BBOX'] = bbox.join(',');\n\n  return appendParams(/** @type {string} */ (this.url_), params);\n};\n\n\n/**\n * Return the URL used for this WMS source.\n * @return {string|undefined} URL.\n * @api\n */\nImageWMS.prototype.getUrl = function() {\n  return this.url_;\n};\n\n\n/**\n * Set the image load function of the source.\n * @param {ol.ImageLoadFunctionType} imageLoadFunction Image load function.\n * @api\n */\nImageWMS.prototype.setImageLoadFunction = function(\n  imageLoadFunction) {\n  this.image_ = null;\n  this.imageLoadFunction_ = imageLoadFunction;\n  this.changed();\n};\n\n\n/**\n * Set the URL to use for requests.\n * @param {string|undefined} url URL.\n * @api\n */\nImageWMS.prototype.setUrl = function(url) {\n  if (url != this.url_) {\n    this.url_ = url;\n    this.image_ = null;\n    this.changed();\n  }\n};\n\n\n/**\n * Update the user-provided params.\n * @param {Object} params Params.\n * @api\n */\nImageWMS.prototype.updateParams = function(params) {\n  assign(this.params_, params);\n  this.updateV13_();\n  this.image_ = null;\n  this.changed();\n};\n\n\n/**\n * @private\n */\nImageWMS.prototype.updateV13_ = function() {\n  const version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n  this.v13_ = _ol_string_.compareVersions(version, '1.3') >= 0;\n};\nexport default ImageWMS;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/ImageWMS.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/WFS\n */\nimport {inherits} from '../index.js';\nimport {assert} from '../asserts.js';\nimport GML2 from '../format/GML2.js';\nimport GML3 from '../format/GML3.js';\nimport GMLBase from '../format/GMLBase.js';\nimport _ol_format_filter_ from '../format/filter.js';\nimport XMLFeature from '../format/XMLFeature.js';\nimport XSD from '../format/XSD.js';\nimport Geometry from '../geom/Geometry.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the WFS format.\n * By default, supports WFS version 1.1.0. You can pass a GML format\n * as option if you want to read a WFS that contains GML2 (WFS 1.0.0).\n * Also see {@link ol.format.GMLBase} which is used by this format.\n *\n * @constructor\n * @param {olx.format.WFSOptions=} opt_options\n *     Optional configuration object.\n * @extends {ol.format.XMLFeature}\n * @api\n */\nconst WFS = function(opt_options) {\n  const options = opt_options ? opt_options : {};\n\n  /**\n   * @private\n   * @type {Array.<string>|string|undefined}\n   */\n  this.featureType_ = options.featureType;\n\n  /**\n   * @private\n   * @type {Object.<string, string>|string|undefined}\n   */\n  this.featureNS_ = options.featureNS;\n\n  /**\n   * @private\n   * @type {ol.format.GMLBase}\n   */\n  this.gmlFormat_ = options.gmlFormat ?\n    options.gmlFormat : new GML3();\n\n  /**\n   * @private\n   * @type {string}\n   */\n  this.schemaLocation_ = options.schemaLocation ?\n    options.schemaLocation :\n    WFS.SCHEMA_LOCATIONS[WFS.DEFAULT_VERSION];\n\n  XMLFeature.call(this);\n};\n\ninherits(WFS, XMLFeature);\n\n\n/**\n * @const\n * @type {string}\n */\nWFS.FEATURE_PREFIX = 'feature';\n\n\n/**\n * @const\n * @type {string}\n */\nWFS.XMLNS = 'http://www.w3.org/2000/xmlns/';\n\n\n/**\n * @const\n * @type {string}\n */\nWFS.OGCNS = 'http://www.opengis.net/ogc';\n\n\n/**\n * @const\n * @type {string}\n */\nWFS.WFSNS = 'http://www.opengis.net/wfs';\n\n\n/**\n * @const\n * @type {string}\n */\nWFS.FESNS = 'http://www.opengis.net/fes';\n\n\n/**\n * @const\n * @type {Object.<string, string>}\n */\nWFS.SCHEMA_LOCATIONS = {\n  '1.1.0': 'http://www.opengis.net/wfs ' +\n      'http://schemas.opengis.net/wfs/1.1.0/wfs.xsd',\n  '1.0.0': 'http://www.opengis.net/wfs ' +\n      'http://schemas.opengis.net/wfs/1.0.0/wfs.xsd'\n};\n\n\n/**\n * @const\n * @type {string}\n */\nWFS.DEFAULT_VERSION = '1.1.0';\n\n\n/**\n * @return {Array.<string>|string|undefined} featureType\n */\nWFS.prototype.getFeatureType = function() {\n  return this.featureType_;\n};\n\n\n/**\n * @param {Array.<string>|string|undefined} featureType Feature type(s) to parse.\n */\nWFS.prototype.setFeatureType = function(featureType) {\n  this.featureType_ = featureType;\n};\n\n\n/**\n * Read all features from a WFS FeatureCollection.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {Array.<ol.Feature>} Features.\n * @api\n */\nWFS.prototype.readFeatures;\n\n\n/**\n * @inheritDoc\n */\nWFS.prototype.readFeaturesFromNode = function(node, opt_options) {\n  const context = /** @type {ol.XmlNodeStackItem} */ ({\n    'featureType': this.featureType_,\n    'featureNS': this.featureNS_\n  });\n  assign(context, this.getReadOptions(node, opt_options ? opt_options : {}));\n  const objectStack = [context];\n  this.gmlFormat_.FEATURE_COLLECTION_PARSERS[GMLBase.GMLNS][\n    'featureMember'] =\n      _ol_xml_.makeArrayPusher(GMLBase.prototype.readFeaturesInternal);\n  let features = _ol_xml_.pushParseAndPop([],\n    this.gmlFormat_.FEATURE_COLLECTION_PARSERS, node,\n    objectStack, this.gmlFormat_);\n  if (!features) {\n    features = [];\n  }\n  return features;\n};\n\n\n/**\n * Read transaction response of the source.\n *\n * @param {Document|Node|Object|string} source Source.\n * @return {ol.WFSTransactionResponse|undefined} Transaction response.\n * @api\n */\nWFS.prototype.readTransactionResponse = function(source) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readTransactionResponseFromDocument(\n      /** @type {Document} */ (source));\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readTransactionResponseFromNode(/** @type {Node} */ (source));\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readTransactionResponseFromDocument(doc);\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * Read feature collection metadata of the source.\n *\n * @param {Document|Node|Object|string} source Source.\n * @return {ol.WFSFeatureCollectionMetadata|undefined}\n *     FeatureCollection metadata.\n * @api\n */\nWFS.prototype.readFeatureCollectionMetadata = function(source) {\n  if (_ol_xml_.isDocument(source)) {\n    return this.readFeatureCollectionMetadataFromDocument(\n      /** @type {Document} */ (source));\n  } else if (_ol_xml_.isNode(source)) {\n    return this.readFeatureCollectionMetadataFromNode(\n      /** @type {Node} */ (source));\n  } else if (typeof source === 'string') {\n    const doc = _ol_xml_.parse(source);\n    return this.readFeatureCollectionMetadataFromDocument(doc);\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Document} doc Document.\n * @return {ol.WFSFeatureCollectionMetadata|undefined}\n *     FeatureCollection metadata.\n */\nWFS.prototype.readFeatureCollectionMetadataFromDocument = function(doc) {\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readFeatureCollectionMetadataFromNode(n);\n    }\n  }\n  return undefined;\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWFS.FEATURE_COLLECTION_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'boundedBy': _ol_xml_.makeObjectPropertySetter(\n      GMLBase.prototype.readGeometryElement, 'bounds')\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {ol.WFSFeatureCollectionMetadata|undefined}\n *     FeatureCollection metadata.\n */\nWFS.prototype.readFeatureCollectionMetadataFromNode = function(node) {\n  const result = {};\n  const value = XSD.readNonNegativeIntegerString(\n    node.getAttribute('numberOfFeatures'));\n  result['numberOfFeatures'] = value;\n  return _ol_xml_.pushParseAndPop(\n    /** @type {ol.WFSFeatureCollectionMetadata} */ (result),\n    WFS.FEATURE_COLLECTION_PARSERS_, node, [], this.gmlFormat_);\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWFS.TRANSACTION_SUMMARY_PARSERS_ = {\n  'http://www.opengis.net/wfs': {\n    'totalInserted': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'totalUpdated': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'totalDeleted': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger)\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Transaction Summary.\n * @private\n */\nWFS.readTransactionSummary_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop(\n    {}, WFS.TRANSACTION_SUMMARY_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWFS.OGC_FID_PARSERS_ = {\n  'http://www.opengis.net/ogc': {\n    'FeatureId': _ol_xml_.makeArrayPusher(function(node, objectStack) {\n      return node.getAttribute('fid');\n    })\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nWFS.fidParser_ = function(node, objectStack) {\n  _ol_xml_.parseNode(WFS.OGC_FID_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWFS.INSERT_RESULTS_PARSERS_ = {\n  'http://www.opengis.net/wfs': {\n    'Feature': WFS.fidParser_\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Array.<string>|undefined} Insert results.\n * @private\n */\nWFS.readInsertResults_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop(\n    [], WFS.INSERT_RESULTS_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWFS.TRANSACTION_RESPONSE_PARSERS_ = {\n  'http://www.opengis.net/wfs': {\n    'TransactionSummary': _ol_xml_.makeObjectPropertySetter(\n      WFS.readTransactionSummary_, 'transactionSummary'),\n    'InsertResults': _ol_xml_.makeObjectPropertySetter(\n      WFS.readInsertResults_, 'insertIds')\n  }\n};\n\n\n/**\n * @param {Document} doc Document.\n * @return {ol.WFSTransactionResponse|undefined} Transaction response.\n */\nWFS.prototype.readTransactionResponseFromDocument = function(doc) {\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readTransactionResponseFromNode(n);\n    }\n  }\n  return undefined;\n};\n\n\n/**\n * @param {Node} node Node.\n * @return {ol.WFSTransactionResponse|undefined} Transaction response.\n */\nWFS.prototype.readTransactionResponseFromNode = function(node) {\n  return _ol_xml_.pushParseAndPop(\n    /** @type {ol.WFSTransactionResponse} */({}),\n    WFS.TRANSACTION_RESPONSE_PARSERS_, node, []);\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nWFS.QUERY_SERIALIZERS_ = {\n  'http://www.opengis.net/wfs': {\n    'PropertyName': _ol_xml_.makeChildAppender(XSD.writeStringTextNode)\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Feature} feature Feature.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeFeature_ = function(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const featureType = context['featureType'];\n  const featureNS = context['featureNS'];\n  const gmlVersion = context['gmlVersion'];\n  const child = _ol_xml_.createElementNS(featureNS, featureType);\n  node.appendChild(child);\n  if (gmlVersion === 2) {\n    GML2.prototype.writeFeatureElement(child, feature, objectStack);\n  } else {\n    GML3.prototype.writeFeatureElement(child, feature, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {number|string} fid Feature identifier.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeOgcFidFilter_ = function(node, fid, objectStack) {\n  const filter = _ol_xml_.createElementNS(WFS.OGCNS, 'Filter');\n  const child = _ol_xml_.createElementNS(WFS.OGCNS, 'FeatureId');\n  filter.appendChild(child);\n  child.setAttribute('fid', fid);\n  node.appendChild(filter);\n};\n\n\n/**\n * @param {string|undefined} featurePrefix The prefix of the feature.\n * @param {string} featureType The type of the feature.\n * @returns {string} The value of the typeName property.\n * @private\n */\nWFS.getTypeName_ = function(featurePrefix, featureType) {\n  featurePrefix = featurePrefix ? featurePrefix :\n    WFS.FEATURE_PREFIX;\n  const prefix = featurePrefix + ':';\n  // The featureType already contains the prefix.\n  if (featureType.indexOf(prefix) === 0) {\n    return featureType;\n  } else {\n    return prefix + featureType;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Feature} feature Feature.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeDelete_ = function(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 26); // Features must have an id set\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = WFS.getTypeName_(featurePrefix, featureType);\n  node.setAttribute('typeName', typeName);\n  _ol_xml_.setAttributeNS(node, WFS.XMLNS, 'xmlns:' + featurePrefix,\n    featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    WFS.writeOgcFidFilter_(node, fid, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Feature} feature Feature.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeUpdate_ = function(node, feature, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  assert(feature.getId() !== undefined, 27); // Features must have an id set\n  const featureType = context['featureType'];\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const typeName = WFS.getTypeName_(featurePrefix, featureType);\n  const geometryName = feature.getGeometryName();\n  node.setAttribute('typeName', typeName);\n  _ol_xml_.setAttributeNS(node, WFS.XMLNS, 'xmlns:' + featurePrefix,\n    featureNS);\n  const fid = feature.getId();\n  if (fid !== undefined) {\n    const keys = feature.getKeys();\n    const values = [];\n    for (let i = 0, ii = keys.length; i < ii; i++) {\n      const value = feature.get(keys[i]);\n      if (value !== undefined) {\n        let name = keys[i];\n        if (value instanceof Geometry) {\n          name = geometryName;\n        }\n        values.push({name: name, value: value});\n      }\n    }\n    _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */ (\n      {'gmlVersion': context['gmlVersion'], node: node,\n        'hasZ': context['hasZ'], 'srsName': context['srsName']}),\n    WFS.TRANSACTION_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('Property'), values,\n    objectStack);\n    WFS.writeOgcFidFilter_(node, fid, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Object} pair Property name and value.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeProperty_ = function(node, pair, objectStack) {\n  const name = _ol_xml_.createElementNS(WFS.WFSNS, 'Name');\n  const context = objectStack[objectStack.length - 1];\n  const gmlVersion = context['gmlVersion'];\n  node.appendChild(name);\n  XSD.writeStringTextNode(name, pair.name);\n  if (pair.value !== undefined && pair.value !== null) {\n    const value = _ol_xml_.createElementNS(WFS.WFSNS, 'Value');\n    node.appendChild(value);\n    if (pair.value instanceof Geometry) {\n      if (gmlVersion === 2) {\n        GML2.prototype.writeGeometryElement(value,\n          pair.value, objectStack);\n      } else {\n        GML3.prototype.writeGeometryElement(value,\n          pair.value, objectStack);\n      }\n    } else {\n      XSD.writeStringTextNode(value, pair.value);\n    }\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {{vendorId: string, safeToIgnore: boolean, value: string}}\n *     nativeElement The native element.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeNative_ = function(node, nativeElement, objectStack) {\n  if (nativeElement.vendorId) {\n    node.setAttribute('vendorId', nativeElement.vendorId);\n  }\n  if (nativeElement.safeToIgnore !== undefined) {\n    node.setAttribute('safeToIgnore', nativeElement.safeToIgnore);\n  }\n  if (nativeElement.value !== undefined) {\n    XSD.writeStringTextNode(node, nativeElement.value);\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nWFS.TRANSACTION_SERIALIZERS_ = {\n  'http://www.opengis.net/wfs': {\n    'Insert': _ol_xml_.makeChildAppender(WFS.writeFeature_),\n    'Update': _ol_xml_.makeChildAppender(WFS.writeUpdate_),\n    'Delete': _ol_xml_.makeChildAppender(WFS.writeDelete_),\n    'Property': _ol_xml_.makeChildAppender(WFS.writeProperty_),\n    'Native': _ol_xml_.makeChildAppender(WFS.writeNative_)\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {string} featureType Feature type.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeQuery_ = function(node, featureType, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const featurePrefix = context['featurePrefix'];\n  const featureNS = context['featureNS'];\n  const propertyNames = context['propertyNames'];\n  const srsName = context['srsName'];\n  let typeName;\n  // If feature prefix is not defined, we must not use the default prefix.\n  if (featurePrefix) {\n    typeName = WFS.getTypeName_(featurePrefix, featureType);\n  } else {\n    typeName = featureType;\n  }\n  node.setAttribute('typeName', typeName);\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (featureNS) {\n    _ol_xml_.setAttributeNS(node, WFS.XMLNS, 'xmlns:' + featurePrefix,\n      featureNS);\n  }\n  const item = /** @type {ol.XmlNodeStackItem} */ (assign({}, context));\n  item.node = node;\n  _ol_xml_.pushSerializeAndPop(item,\n    WFS.QUERY_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('PropertyName'), propertyNames,\n    objectStack);\n  const filter = context['filter'];\n  if (filter) {\n    const child = _ol_xml_.createElementNS(WFS.OGCNS, 'Filter');\n    node.appendChild(child);\n    WFS.writeFilterCondition_(child, filter, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.Filter} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeFilterCondition_ = function(node, filter, objectStack) {\n  /** @type {ol.XmlNodeStackItem} */\n  const item = {node: node};\n  _ol_xml_.pushSerializeAndPop(item,\n    WFS.GETFEATURE_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory(filter.getTagName()),\n    [filter], objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.Bbox} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeBboxFilter_ = function(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  WFS.writeOgcPropertyName_(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.extent, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.Contains} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeContainsFilter_ = function(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  WFS.writeOgcPropertyName_(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.Intersects} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeIntersectsFilter_ = function(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  WFS.writeOgcPropertyName_(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.Within} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeWithinFilter_ = function(node, filter, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  context['srsName'] = filter.srsName;\n\n  WFS.writeOgcPropertyName_(node, filter.geometryName);\n  GML3.prototype.writeGeometryElement(node, filter.geometry, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.During} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeDuringFilter_ = function(node, filter, objectStack) {\n\n  const valueReference = _ol_xml_.createElementNS(WFS.FESNS, 'ValueReference');\n  XSD.writeStringTextNode(valueReference, filter.propertyName);\n  node.appendChild(valueReference);\n\n  const timePeriod = _ol_xml_.createElementNS(GMLBase.GMLNS, 'TimePeriod');\n\n  node.appendChild(timePeriod);\n\n  const begin = _ol_xml_.createElementNS(GMLBase.GMLNS, 'begin');\n  timePeriod.appendChild(begin);\n  WFS.writeTimeInstant_(begin, filter.begin);\n\n  const end = _ol_xml_.createElementNS(GMLBase.GMLNS, 'end');\n  timePeriod.appendChild(end);\n  WFS.writeTimeInstant_(end, filter.end);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.LogicalNary} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeLogicalFilter_ = function(node, filter, objectStack) {\n  /** @type {ol.XmlNodeStackItem} */\n  const item = {node: node};\n  const conditions = filter.conditions;\n  for (let i = 0, ii = conditions.length; i < ii; ++i) {\n    const condition = conditions[i];\n    _ol_xml_.pushSerializeAndPop(item,\n      WFS.GETFEATURE_SERIALIZERS_,\n      _ol_xml_.makeSimpleNodeFactory(condition.getTagName()),\n      [condition], objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.Not} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeNotFilter_ = function(node, filter, objectStack) {\n  /** @type {ol.XmlNodeStackItem} */\n  const item = {node: node};\n  const condition = filter.condition;\n  _ol_xml_.pushSerializeAndPop(item,\n    WFS.GETFEATURE_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory(condition.getTagName()),\n    [condition], objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.ComparisonBinary} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeComparisonFilter_ = function(node, filter, objectStack) {\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  WFS.writeOgcPropertyName_(node, filter.propertyName);\n  WFS.writeOgcLiteral_(node, '' + filter.expression);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.IsNull} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeIsNullFilter_ = function(node, filter, objectStack) {\n  WFS.writeOgcPropertyName_(node, filter.propertyName);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.IsBetween} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeIsBetweenFilter_ = function(node, filter, objectStack) {\n  WFS.writeOgcPropertyName_(node, filter.propertyName);\n\n  const lowerBoundary = _ol_xml_.createElementNS(WFS.OGCNS, 'LowerBoundary');\n  node.appendChild(lowerBoundary);\n  WFS.writeOgcLiteral_(lowerBoundary, '' + filter.lowerBoundary);\n\n  const upperBoundary = _ol_xml_.createElementNS(WFS.OGCNS, 'UpperBoundary');\n  node.appendChild(upperBoundary);\n  WFS.writeOgcLiteral_(upperBoundary, '' + filter.upperBoundary);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.format.filter.IsLike} filter Filter.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeIsLikeFilter_ = function(node, filter, objectStack) {\n  node.setAttribute('wildCard', filter.wildCard);\n  node.setAttribute('singleChar', filter.singleChar);\n  node.setAttribute('escapeChar', filter.escapeChar);\n  if (filter.matchCase !== undefined) {\n    node.setAttribute('matchCase', filter.matchCase.toString());\n  }\n  WFS.writeOgcPropertyName_(node, filter.propertyName);\n  WFS.writeOgcLiteral_(node, '' + filter.pattern);\n};\n\n\n/**\n * @param {string} tagName Tag name.\n * @param {Node} node Node.\n * @param {string} value Value.\n * @private\n */\nWFS.writeOgcExpression_ = function(tagName, node, value) {\n  const property = _ol_xml_.createElementNS(WFS.OGCNS, tagName);\n  XSD.writeStringTextNode(property, value);\n  node.appendChild(property);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n * @private\n */\nWFS.writeOgcPropertyName_ = function(node, value) {\n  WFS.writeOgcExpression_('PropertyName', node, value);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {string} value PropertyName value.\n * @private\n */\nWFS.writeOgcLiteral_ = function(node, value) {\n  WFS.writeOgcExpression_('Literal', node, value);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {string} time PropertyName value.\n * @private\n */\nWFS.writeTimeInstant_ = function(node, time) {\n  const timeInstant = _ol_xml_.createElementNS(GMLBase.GMLNS, 'TimeInstant');\n  node.appendChild(timeInstant);\n\n  const timePosition = _ol_xml_.createElementNS(GMLBase.GMLNS, 'timePosition');\n  timeInstant.appendChild(timePosition);\n  XSD.writeStringTextNode(timePosition, time);\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nWFS.GETFEATURE_SERIALIZERS_ = {\n  'http://www.opengis.net/wfs': {\n    'Query': _ol_xml_.makeChildAppender(WFS.writeQuery_)\n  },\n  'http://www.opengis.net/ogc': {\n    'During': _ol_xml_.makeChildAppender(WFS.writeDuringFilter_),\n    'And': _ol_xml_.makeChildAppender(WFS.writeLogicalFilter_),\n    'Or': _ol_xml_.makeChildAppender(WFS.writeLogicalFilter_),\n    'Not': _ol_xml_.makeChildAppender(WFS.writeNotFilter_),\n    'BBOX': _ol_xml_.makeChildAppender(WFS.writeBboxFilter_),\n    'Contains': _ol_xml_.makeChildAppender(WFS.writeContainsFilter_),\n    'Intersects': _ol_xml_.makeChildAppender(WFS.writeIntersectsFilter_),\n    'Within': _ol_xml_.makeChildAppender(WFS.writeWithinFilter_),\n    'PropertyIsEqualTo': _ol_xml_.makeChildAppender(WFS.writeComparisonFilter_),\n    'PropertyIsNotEqualTo': _ol_xml_.makeChildAppender(WFS.writeComparisonFilter_),\n    'PropertyIsLessThan': _ol_xml_.makeChildAppender(WFS.writeComparisonFilter_),\n    'PropertyIsLessThanOrEqualTo': _ol_xml_.makeChildAppender(WFS.writeComparisonFilter_),\n    'PropertyIsGreaterThan': _ol_xml_.makeChildAppender(WFS.writeComparisonFilter_),\n    'PropertyIsGreaterThanOrEqualTo': _ol_xml_.makeChildAppender(WFS.writeComparisonFilter_),\n    'PropertyIsNull': _ol_xml_.makeChildAppender(WFS.writeIsNullFilter_),\n    'PropertyIsBetween': _ol_xml_.makeChildAppender(WFS.writeIsBetweenFilter_),\n    'PropertyIsLike': _ol_xml_.makeChildAppender(WFS.writeIsLikeFilter_)\n  }\n};\n\n\n/**\n * Encode filter as WFS `Filter` and return the Node.\n *\n * @param {ol.format.filter.Filter} filter Filter.\n * @return {Node} Result.\n * @api\n */\nWFS.writeFilter = function(filter) {\n  const child = _ol_xml_.createElementNS(WFS.OGCNS, 'Filter');\n  WFS.writeFilterCondition_(child, filter, []);\n  return child;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<string>} featureTypes Feature types.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nWFS.writeGetFeature_ = function(node, featureTypes, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const item = /** @type {ol.XmlNodeStackItem} */ (assign({}, context));\n  item.node = node;\n  _ol_xml_.pushSerializeAndPop(item,\n    WFS.GETFEATURE_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('Query'), featureTypes,\n    objectStack);\n};\n\n\n/**\n * Encode format as WFS `GetFeature` and return the Node.\n *\n * @param {olx.format.WFSWriteGetFeatureOptions} options Options.\n * @return {Node} Result.\n * @api\n */\nWFS.prototype.writeGetFeature = function(options) {\n  const node = _ol_xml_.createElementNS(WFS.WFSNS, 'GetFeature');\n  node.setAttribute('service', 'WFS');\n  node.setAttribute('version', '1.1.0');\n  let filter;\n  if (options) {\n    if (options.handle) {\n      node.setAttribute('handle', options.handle);\n    }\n    if (options.outputFormat) {\n      node.setAttribute('outputFormat', options.outputFormat);\n    }\n    if (options.maxFeatures !== undefined) {\n      node.setAttribute('maxFeatures', options.maxFeatures);\n    }\n    if (options.resultType) {\n      node.setAttribute('resultType', options.resultType);\n    }\n    if (options.startIndex !== undefined) {\n      node.setAttribute('startIndex', options.startIndex);\n    }\n    if (options.count !== undefined) {\n      node.setAttribute('count', options.count);\n    }\n    filter = options.filter;\n    if (options.bbox) {\n      assert(options.geometryName,\n        12); // `options.geometryName` must also be provided when `options.bbox` is set\n      const bbox = _ol_format_filter_.bbox(\n        /** @type {string} */ (options.geometryName), options.bbox, options.srsName);\n      if (filter) {\n        // if bbox and filter are both set, combine the two into a single filter\n        filter = _ol_format_filter_.and(filter, bbox);\n      } else {\n        filter = bbox;\n      }\n    }\n  }\n  _ol_xml_.setAttributeNS(node, 'http://www.w3.org/2001/XMLSchema-instance',\n    'xsi:schemaLocation', this.schemaLocation_);\n  /** @type {ol.XmlNodeStackItem} */\n  const context = {\n    node: node,\n    'srsName': options.srsName,\n    'featureNS': options.featureNS ? options.featureNS : this.featureNS_,\n    'featurePrefix': options.featurePrefix,\n    'geometryName': options.geometryName,\n    'filter': filter,\n    'propertyNames': options.propertyNames ? options.propertyNames : []\n  };\n  assert(Array.isArray(options.featureTypes),\n    11); // `options.featureTypes` should be an Array\n  WFS.writeGetFeature_(node, /** @type {!Array.<string>} */ (options.featureTypes), [context]);\n  return node;\n};\n\n\n/**\n * Encode format as WFS `Transaction` and return the Node.\n *\n * @param {Array.<ol.Feature>} inserts The features to insert.\n * @param {Array.<ol.Feature>} updates The features to update.\n * @param {Array.<ol.Feature>} deletes The features to delete.\n * @param {olx.format.WFSWriteTransactionOptions} options Write options.\n * @return {Node} Result.\n * @api\n */\nWFS.prototype.writeTransaction = function(inserts, updates, deletes,\n  options) {\n  const objectStack = [];\n  const node = _ol_xml_.createElementNS(WFS.WFSNS, 'Transaction');\n  const version = options.version ?\n    options.version : WFS.DEFAULT_VERSION;\n  const gmlVersion = version === '1.0.0' ? 2 : 3;\n  node.setAttribute('service', 'WFS');\n  node.setAttribute('version', version);\n  let baseObj;\n  /** @type {ol.XmlNodeStackItem} */\n  let obj;\n  if (options) {\n    baseObj = options.gmlOptions ? options.gmlOptions : {};\n    if (options.handle) {\n      node.setAttribute('handle', options.handle);\n    }\n  }\n  const schemaLocation = WFS.SCHEMA_LOCATIONS[version];\n  _ol_xml_.setAttributeNS(node, 'http://www.w3.org/2001/XMLSchema-instance',\n    'xsi:schemaLocation', schemaLocation);\n  const featurePrefix = options.featurePrefix ? options.featurePrefix : WFS.FEATURE_PREFIX;\n  if (inserts) {\n    obj = {node: node, 'featureNS': options.featureNS,\n      'featureType': options.featureType, 'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion, 'hasZ': options.hasZ, 'srsName': options.srsName};\n    assign(obj, baseObj);\n    _ol_xml_.pushSerializeAndPop(obj,\n      WFS.TRANSACTION_SERIALIZERS_,\n      _ol_xml_.makeSimpleNodeFactory('Insert'), inserts,\n      objectStack);\n  }\n  if (updates) {\n    obj = {node: node, 'featureNS': options.featureNS,\n      'featureType': options.featureType, 'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion, 'hasZ': options.hasZ, 'srsName': options.srsName};\n    assign(obj, baseObj);\n    _ol_xml_.pushSerializeAndPop(obj,\n      WFS.TRANSACTION_SERIALIZERS_,\n      _ol_xml_.makeSimpleNodeFactory('Update'), updates,\n      objectStack);\n  }\n  if (deletes) {\n    _ol_xml_.pushSerializeAndPop({node: node, 'featureNS': options.featureNS,\n      'featureType': options.featureType, 'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion, 'srsName': options.srsName},\n    WFS.TRANSACTION_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('Delete'), deletes,\n    objectStack);\n  }\n  if (options.nativeElements) {\n    _ol_xml_.pushSerializeAndPop({node: node, 'featureNS': options.featureNS,\n      'featureType': options.featureType, 'featurePrefix': featurePrefix,\n      'gmlVersion': gmlVersion, 'srsName': options.srsName},\n    WFS.TRANSACTION_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('Native'), options.nativeElements,\n    objectStack);\n  }\n  return node;\n};\n\n\n/**\n * Read the projection from a WFS source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @return {?ol.proj.Projection} Projection.\n * @api\n */\nWFS.prototype.readProjection;\n\n\n/**\n * @inheritDoc\n */\nWFS.prototype.readProjectionFromDocument = function(doc) {\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readProjectionFromNode(n);\n    }\n  }\n  return null;\n};\n\n\n/**\n * @inheritDoc\n */\nWFS.prototype.readProjectionFromNode = function(node) {\n  if (node.firstElementChild &&\n      node.firstElementChild.firstElementChild) {\n    node = node.firstElementChild.firstElementChild;\n    for (let n = node.firstElementChild; n; n = n.nextElementSibling) {\n      if (!(n.childNodes.length === 0 ||\n          (n.childNodes.length === 1 &&\n          n.firstChild.nodeType === 3))) {\n        const objectStack = [{}];\n        this.gmlFormat_.readGeometryElement(n, objectStack);\n        return getProjection(objectStack.pop().srsName);\n      }\n    }\n  }\n\n  return null;\n};\nexport default WFS;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/WFS.js\n// module id = 62\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22","/**\n * @type {string} Default WMS version.\n */\nexport const DEFAULT_WMS_VERSION = '1.3.0';\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/common.js\n// module id = 66\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module ol/source/WMSServerType\n */\n\n/**\n * Available server types: `'carmentaserver'`, `'geoserver'`, `'mapserver'`,\n *     `'qgis'`. These are servers that have vendor parameters beyond the WMS\n *     specification that OpenLayers can make use of.\n * @enum {string}\n */\nexport default {\n  CARMENTA_SERVER: 'carmentaserver',\n  GEOSERVER: 'geoserver',\n  MAPSERVER: 'mapserver',\n  QGIS: 'qgis'\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/WMSServerType.js\n// module id = 67\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module ol/source/TileWMS\n */\n\nimport {DEFAULT_WMS_VERSION} from './common.js';\nimport {inherits} from '../index.js';\nimport {assert} from '../asserts.js';\nimport {buffer, createEmpty} from '../extent.js';\nimport {assign} from '../obj.js';\nimport {modulo} from '../math.js';\nimport {get as getProjection, transform, transformExtent} from '../proj.js';\nimport _ol_reproj_ from '../reproj.js';\nimport _ol_size_ from '../size.js';\nimport TileImage from '../source/TileImage.js';\nimport WMSServerType from '../source/WMSServerType.js';\nimport _ol_tilecoord_ from '../tilecoord.js';\nimport _ol_string_ from '../string.js';\nimport {appendParams} from '../uri.js';\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n *\n * @constructor\n * @extends {ol.source.TileImage}\n * @param {olx.source.TileWMSOptions=} opt_options Tile WMS options.\n * @api\n */\nconst TileWMS = function(opt_options) {\n\n  const options = opt_options || {};\n\n  const params = options.params || {};\n\n  const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n\n  TileImage.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: options.crossOrigin,\n    opaque: !transparent,\n    projection: options.projection,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileClass: options.tileClass,\n    tileGrid: options.tileGrid,\n    tileLoadFunction: options.tileLoadFunction,\n    url: options.url,\n    urls: options.urls,\n    wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    transition: options.transition\n  });\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n  /**\n   * @private\n   * @type {!Object}\n   */\n  this.params_ = params;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.v13_ = true;\n\n  /**\n   * @private\n   * @type {ol.source.WMSServerType|undefined}\n   */\n  this.serverType_ = /** @type {ol.source.WMSServerType|undefined} */ (options.serverType);\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n  /**\n   * @private\n   * @type {ol.Extent}\n   */\n  this.tmpExtent_ = createEmpty();\n\n  this.updateV13_();\n  this.setKey(this.getKeyForParams_());\n\n};\n\ninherits(TileWMS, TileImage);\n\n\n/**\n * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n * constructed.\n * @param {ol.Coordinate} coordinate Coordinate.\n * @param {number} resolution Resolution.\n * @param {ol.ProjectionLike} projection Projection.\n * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n *     in the `LAYERS` parameter will be used. `VERSION` should not be\n *     specified here.\n * @return {string|undefined} GetFeatureInfo URL.\n * @api\n */\nTileWMS.prototype.getGetFeatureInfoUrl = function(coordinate, resolution, projection, params) {\n  const projectionObj = getProjection(projection);\n  const sourceProjectionObj = this.getProjection();\n\n  let tileGrid = this.getTileGrid();\n  if (!tileGrid) {\n    tileGrid = this.getTileGridForProjection(projectionObj);\n  }\n\n  const tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, resolution);\n\n  if (tileGrid.getResolutions().length <= tileCoord[0]) {\n    return undefined;\n  }\n\n  let tileResolution = tileGrid.getResolution(tileCoord[0]);\n  let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n  let tileSize = _ol_size_.toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n\n  const gutter = this.gutter_;\n  if (gutter !== 0) {\n    tileSize = _ol_size_.buffer(tileSize, gutter, this.tmpSize);\n    tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n  }\n\n  if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n    tileResolution = _ol_reproj_.calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, tileResolution);\n    tileExtent = transformExtent(tileExtent, projectionObj, sourceProjectionObj);\n    coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n  }\n\n  const baseParams = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_WMS_VERSION,\n    'REQUEST': 'GetFeatureInfo',\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true,\n    'QUERY_LAYERS': this.params_['LAYERS']\n  };\n  assign(baseParams, this.params_, params);\n\n  const x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\n  const y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\n\n  baseParams[this.v13_ ? 'I' : 'X'] = x;\n  baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n  return this.getRequestUrl_(tileCoord, tileSize, tileExtent,\n    1, sourceProjectionObj || projectionObj, baseParams);\n};\n\n\n/**\n * @inheritDoc\n */\nTileWMS.prototype.getGutterInternal = function() {\n  return this.gutter_;\n};\n\n\n/**\n * Get the user-provided params, i.e. those passed to the constructor through\n * the \"params\" option, and possibly updated using the updateParams method.\n * @return {Object} Params.\n * @api\n */\nTileWMS.prototype.getParams = function() {\n  return this.params_;\n};\n\n\n/**\n * @param {ol.TileCoord} tileCoord Tile coordinate.\n * @param {ol.Size} tileSize Tile size.\n * @param {ol.Extent} tileExtent Tile extent.\n * @param {number} pixelRatio Pixel ratio.\n * @param {ol.proj.Projection} projection Projection.\n * @param {Object} params Params.\n * @return {string|undefined} Request URL.\n * @private\n */\nTileWMS.prototype.getRequestUrl_ = function(tileCoord, tileSize, tileExtent,\n  pixelRatio, projection, params) {\n\n  const urls = this.urls;\n  if (!urls) {\n    return undefined;\n  }\n\n  params['WIDTH'] = tileSize[0];\n  params['HEIGHT'] = tileSize[1];\n\n  params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n  if (!('STYLES' in this.params_)) {\n    params['STYLES'] = '';\n  }\n\n  if (pixelRatio != 1) {\n    switch (this.serverType_) {\n      case WMSServerType.GEOSERVER:\n        const dpi = (90 * pixelRatio + 0.5) | 0;\n        if ('FORMAT_OPTIONS' in params) {\n          params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n        } else {\n          params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n        }\n        break;\n      case WMSServerType.MAPSERVER:\n        params['MAP_RESOLUTION'] = 90 * pixelRatio;\n        break;\n      case WMSServerType.CARMENTA_SERVER:\n      case WMSServerType.QGIS:\n        params['DPI'] = 90 * pixelRatio;\n        break;\n      default:\n        assert(false, 52); // Unknown `serverType` configured\n        break;\n    }\n  }\n\n  const axisOrientation = projection.getAxisOrientation();\n  const bbox = tileExtent;\n  if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n    let tmp;\n    tmp = tileExtent[0];\n    bbox[0] = tileExtent[1];\n    bbox[1] = tmp;\n    tmp = tileExtent[2];\n    bbox[2] = tileExtent[3];\n    bbox[3] = tmp;\n  }\n  params['BBOX'] = bbox.join(',');\n\n  let url;\n  if (urls.length == 1) {\n    url = urls[0];\n  } else {\n    const index = modulo(_ol_tilecoord_.hash(tileCoord), urls.length);\n    url = urls[index];\n  }\n  return appendParams(url, params);\n};\n\n\n/**\n * @inheritDoc\n */\nTileWMS.prototype.getTilePixelRatio = function(pixelRatio) {\n  return (!this.hidpi_ || this.serverType_ === undefined) ? 1 :\n  /** @type {number} */ (pixelRatio);\n};\n\n\n/**\n * @private\n * @return {string} The key for the current params.\n */\nTileWMS.prototype.getKeyForParams_ = function() {\n  let i = 0;\n  const res = [];\n  for (const key in this.params_) {\n    res[i++] = key + '-' + this.params_[key];\n  }\n  return res.join('/');\n};\n\n\n/**\n * @inheritDoc\n */\nTileWMS.prototype.fixedTileUrlFunction = function(tileCoord, pixelRatio, projection) {\n\n  let tileGrid = this.getTileGrid();\n  if (!tileGrid) {\n    tileGrid = this.getTileGridForProjection(projection);\n  }\n\n  if (tileGrid.getResolutions().length <= tileCoord[0]) {\n    return undefined;\n  }\n\n  if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n    pixelRatio = 1;\n  }\n\n  const tileResolution = tileGrid.getResolution(tileCoord[0]);\n  let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n  let tileSize = _ol_size_.toSize(\n    tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n  const gutter = this.gutter_;\n  if (gutter !== 0) {\n    tileSize = _ol_size_.buffer(tileSize, gutter, this.tmpSize);\n    tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n  }\n\n  if (pixelRatio != 1) {\n    tileSize = _ol_size_.scale(tileSize, pixelRatio, this.tmpSize);\n  }\n\n  const baseParams = {\n    'SERVICE': 'WMS',\n    'VERSION': DEFAULT_WMS_VERSION,\n    'REQUEST': 'GetMap',\n    'FORMAT': 'image/png',\n    'TRANSPARENT': true\n  };\n  assign(baseParams, this.params_);\n\n  return this.getRequestUrl_(tileCoord, tileSize, tileExtent,\n    pixelRatio, projection, baseParams);\n};\n\n/**\n * Update the user-provided params.\n * @param {Object} params Params.\n * @api\n */\nTileWMS.prototype.updateParams = function(params) {\n  assign(this.params_, params);\n  this.updateV13_();\n  this.setKey(this.getKeyForParams_());\n};\n\n\n/**\n * @private\n */\nTileWMS.prototype.updateV13_ = function() {\n  const version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n  this.v13_ = _ol_string_.compareVersions(version, '1.3') >= 0;\n};\nexport default TileWMS;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/TileWMS.js\n// module id = 69\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24","/**\n * @module ngeo.statemanager.Location\n */\nimport googAsserts from 'goog/asserts.js';\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoUtils from 'ngeo/utils.js';\n\n/**\n * Provides a service for interacting with the URL in the\n * browser address bar.\n *\n * WARNING: because of a bug in Angular this service is not compatible with\n * the $location service. This further means that service is not compatible\n * with the $anchorScroll and $route services, and with the ng-include and\n * ng-view directives (which are based on the $anchorScroll and $route\n * services). See <https://github.com/angular/angular.js/issues/1417>.\n *\n * This file also provides an ngeo.statemanager.Location.MockProvider function that you can\n * use to mock Angular's $location provider and make it possible to use both\n * ngeoLocation and ng-include.\n *\n *     app.module.config(ngeo.statemanager.Location.MockProvider);\n *\n * The ngeo Location type.\n *\n * See our live example: [../examples/permalink.html](../examples/permalink.html)\n *\n * @param {Location} location Location.\n * @param {History} history History.\n * @constructor\n * @struct\n * @ngdoc service\n * @ngname ngeoLocation\n */\nconst exports = function(location, history) {\n  /**\n   * @type {History}\n   * @private\n   */\n  this.history_ = history;\n\n  /**\n   * @type {string|undefined}\n   * @private\n   */\n  this.schema_ = location.protocol.substring(0, location.protocol.length - 1);\n\n  /**\n   * @type {string|undefined}\n   * @private\n   */\n  this.domain_ = location.hostname;\n\n  /**\n   * @type {number|undefined}\n   * @private\n   */\n  this.port_ = location.port ? parseInt(location.port, 10) : undefined;\n\n  /**\n   * @type {string|undefined}\n   * @private\n   */\n  this.path_ = location.pathname;\n\n  /**\n   * @type {!Object.<string, string>}\n   * @private\n   */\n  this.queryData_ = ngeoUtils.decodeQueryString(location.search);\n\n  /**\n   * @type {!Object.<string, string>}\n   * @private\n   */\n  this.fragment_ = ngeoUtils.decodeQueryString(location.hash);\n};\n\n\n/**\n * @param {History} history History.\n * @param {string} state State.\n */\nexports.replaceState = function(history, state) {\n  try {\n    history.replaceState(null, '', state);\n  } catch (error) {\n    // replaceState fails on some browser if the domain in the state\n    // is not the same as location.origin\n  }\n};\n\n\n/**\n * Get the location's current path.\n * @return {string|undefined} The path.\n * @export\n */\nexports.prototype.getPath = function() {\n  return this.path_;\n};\n\n\n/**\n * Get the location's URI as a string\n * @return {string} The URI.\n * @export\n */\nexports.prototype.getUriString = function() {\n  const out = [];\n\n  if (this.schema_) {\n    out.push(this.schema_, ':');\n  }\n\n  if (this.domain_ || this.schema_ === 'file') {\n    out.push('//');\n\n    out.push(this.domain_);\n\n    if (this.port_ !== undefined) {\n      out.push(':', String(this.port_));\n    }\n  }\n\n  if (this.path_) {\n    if (this.domain_ && this.path_.charAt(0) !== '/') {\n      out.push('/');\n    }\n    out.push(this.path_);\n  }\n\n  const encodedQueryData = ngeoUtils.encodeQueryString(this.queryData_);\n  if (encodedQueryData.length > 0) {\n    out.push('?', encodedQueryData);\n  }\n\n  const encodedFragment = ngeoUtils.encodeQueryString(this.fragment_);\n  if (encodedFragment.length > 0) {\n    out.push('#', encodedFragment);\n  }\n  return out.join('');\n};\n\n\n/**\n * Check if a param exists in the location's URI.\n * @param {string} key Param key.\n * @return {boolean} True if the param exists.\n * @export\n */\nexports.prototype.hasParam = function(key) {\n  return key in this.queryData_;\n};\n\n\n/**\n * Check if a param exists in the fragment of the location's URI.\n * @param {string} key Param key.\n * @return {boolean} True if the param exists.\n * @export\n */\nexports.prototype.hasFragmentParam = function(key) {\n  return key in this.fragment_;\n};\n\n\n/**\n * Get a param in the location's URI.\n * @param {string} key Param key.\n * @return {string|undefined} Param value.\n * @export\n */\nexports.prototype.getParam = function(key) {\n  return this.queryData_[key];\n};\n\n\n/**\n * Get a param from the fragment of the location's URI.\n * @param {string} key Param key.\n * @return {string|undefined} Param value.\n * @export\n */\nexports.prototype.getFragmentParam = function(key) {\n  return this.fragment_[key];\n};\n\n\n/**\n * Get a param in the location's URI as integer. If the entry does not exist,\n * or if the value can not be parsed as integer, `undefined` is returned.\n * @param {string} key Param key.\n * @return {number|undefined} Param value.\n * @export\n */\nexports.prototype.getParamAsInt = function(key) {\n  const value = this.getParam(key);\n  if (value === undefined) {\n    return undefined;\n  }\n  googAsserts.assertString(value);\n  const valueAsInt = parseInt(value, 10);\n  return (isNaN(valueAsInt)) ? undefined : valueAsInt;\n};\n\n\n/**\n * Get a param in the location's URI as a floating point number.\n * If the entry does not exist, or if the value can not be parsed,\n * `undefined` is returned.\n * @param {string} key Param key.\n * @return {number|undefined} Param value.\n * @export\n */\nexports.prototype.getParamAsFloat = function(key) {\n  const value = this.getParam(key);\n  if (value === undefined) {\n    return undefined;\n  }\n  googAsserts.assertString(value);\n  const valueAsFloat = parseFloat(value);\n  return isNaN(valueAsFloat) ? undefined : valueAsFloat;\n};\n\n\n/**\n * Get a param from the fragment of the location's URI as integer. If the entry\n * does not exist, or if the value can not be parsed as integer, `undefined` is returned.\n * @param {string} key Param key.\n * @return {number|undefined} Param value.\n * @export\n */\nexports.prototype.getFragmentParamAsInt = function(key) {\n  const value = this.getFragmentParam(key);\n  if (value === undefined) {\n    return undefined;\n  }\n  googAsserts.assertString(value);\n  const valueAsInt = parseInt(value, 10);\n  return (isNaN(valueAsInt)) ? undefined : valueAsInt;\n};\n\n\n/**\n * Get an array with all existing param's keys in the location's URI.\n * @return {Array.<string>} Param keys.\n * @export\n */\nexports.prototype.getParamKeys = function() {\n  const keys = [];\n  for (const key in this.queryData_) {\n    keys.push(key);\n  }\n  return keys;\n};\n\n\n/**\n * Get an array with all existing param's keys from the fragment of the location's URI.\n * @return {Array.<string>} Param keys.\n * @export\n */\nexports.prototype.getFragmentParamKeys = function() {\n  const keys = [];\n  for (const key in this.fragment_) {\n    keys.push(key);\n  }\n  return keys;\n};\n\n\n/**\n * Get an array with all existing param's keys in the location's URI that start\n * with the given prefix.\n * @param {string} prefix Key prefix.\n * @return {Array.<string>} Param keys.\n * @export\n */\nexports.prototype.getParamKeysWithPrefix = function(prefix) {\n  const keys = [];\n  for (const key in this.queryData_) {\n    if (key.indexOf(prefix) == 0) {\n      keys.push(key);\n    }\n  }\n  return keys;\n};\n\n\n/**\n * Get an array with all existing param's keys from the fragment of the location's URI\n * that start with the given prefix.\n * @param {string} prefix Key prefix.\n * @return {Array.<string>} Param keys.\n * @export\n */\nexports.prototype.getFragmentParamKeysWithPrefix = function(prefix) {\n  const keys = [];\n  for (const key in this.fragment_) {\n    if (key.indexOf(prefix) == 0) {\n      keys.push(key);\n    }\n  }\n  return keys;\n};\n\n\n/**\n * Set or create a param in the location's URI.\n * @param {!Object.<string, string>} params Parameters.\n * @export\n */\nexports.prototype.updateParams = function(params) {\n  for (const key in params) {\n    this.queryData_[key] = params[key];\n  }\n};\n\n\n/**\n * Set or create a param in the fragment of the location's URI.\n * @param {!Object.<string, string>} params Parameters.\n * @export\n */\nexports.prototype.updateFragmentParams = function(params) {\n  for (const key in params) {\n    this.fragment_[key] = params[key];\n  }\n};\n\n\n/**\n * Delete a param in the location's URI.\n * @param {string} key Param key.\n * @export\n */\nexports.prototype.deleteParam = function(key) {\n  delete this.queryData_[key];\n};\n\n\n/**\n * Delete a param int the fragment of the location's URI.\n * @param {string} key Param key.\n * @export\n */\nexports.prototype.deleteFragmentParam = function(key) {\n  delete this.fragment_[key];\n};\n\n\n/**\n * Refresh the the location's URI.\n * @export\n */\nexports.prototype.refresh = function() {\n  exports.replaceState(this.history_, this.getUriString());\n};\n\n\n/**\n * Set a new path for this location.\n * @param {string} path Path.\n * @export\n */\nexports.prototype.setPath = function(path) {\n  this.path_ = path;\n};\n\n\n/**\n * The factory creating the ngeo Location service.\n *\n * @param {angular.Scope} $rootScope The root scope.\n * @param {angular.$window} $window Angular window service.\n * @return {ngeo.statemanager.Location} The ngeo location service.\n * @ngInject\n */\nexports.LocationFactory = function($rootScope, $window) {\n  const history = $window.history;\n  const service = new exports($window.location, $window.history);\n\n  let lastUri = service.getUriString();\n  $rootScope.$watch(() => {\n    const newUri = service.getUriString();\n    if (lastUri !== newUri) {\n      $rootScope.$evalAsync(() => {\n        lastUri = newUri;\n        if (history !== undefined && history.replaceState !== undefined) {\n          exports.replaceState(history, newUri);\n        }\n        $rootScope.$broadcast('ngeoLocationChange');\n      });\n    }\n  });\n\n  return service;\n};\n\n/**\n * A function that changes Angular's $location provider to avoid problem\n * when both ngeoLocation and $location are used in an application. This\n * is how you can use that function in an application:\n *\n * app.module.config(ngeo.statemanager.Location.MockProvider);\n *\n * @param {angular.$locationProvider} $locationProvider Angular location\n *     provider.\n * @ngInject\n */\nexports.MockProvider = function($locationProvider) {\n  /**\n   * @return {angular.$location} Mock object for Angular location service.\n   */\n  $locationProvider['$get'] = function() {\n    const locationMock = /** @type {angular.$location} */ ({\n      /**\n       * @return {string} Absolute URL.\n       */\n      absUrl() {\n        return '';\n      },\n      /**\n       * @param {string=} opt_path Path.\n       * @return {string} Hash.\n       */\n      hash(opt_path) {\n        return opt_path !== undefined ? this : '';\n      },\n      /**\n       * @return {string} Host.\n       */\n      host() {\n        return '';\n      },\n      /**\n       * @param {string=} opt_path Path.\n       * @return {string} Path.\n       */\n      path(opt_path) {\n        return opt_path !== undefined ? this : '';\n      },\n      /**\n       * @return {number} Port.\n       */\n      port() {\n        return 0;\n      },\n      /**\n       * @return {string} Protocol.\n       */\n      protocol() {\n        return '';\n      },\n      replace() {\n      },\n      /**\n       * @param {string=} opt_search Search.\n       * @param {Object=} opt_paramValue Parameters.\n       * @return {Object} Search.\n       */\n      search(opt_search, opt_paramValue) {\n        return opt_search !== undefined ? this : {};\n      },\n      /**\n       * @param {string=} opt_url URL.\n       * @return {string} URL.\n       */\n      url(opt_url) {\n        return '';\n      }\n    });\n    return locationMock;\n  };\n};\n\n\n/**\n * @type {!angular.Module}\n * FIXME add utils dependencies.\n * FIXME What about Mockup provider ?\n */\nexports.module = angular.module('ngeoLocation', []);\nexports.module.factory('ngeoLocation', exports.LocationFactory);\nngeoBase.module.requires.push(exports.module.name);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./src/statemanager/Location.js","/**\n * @module ol/format/GML3\n */\nimport {inherits} from '../index.js';\nimport {extend} from '../array.js';\nimport {createOrUpdate} from '../extent.js';\nimport {transformWithOptions} from '../format/Feature.js';\nimport GMLBase from '../format/GMLBase.js';\nimport XSD from '../format/XSD.js';\nimport Geometry from '../geom/Geometry.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assign} from '../obj.js';\nimport {get as getProjection, transformExtent} from '../proj.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GML format\n * version 3.1.1.\n * Currently only supports GML 3.1.1 Simple Features profile.\n *\n * @constructor\n * @param {olx.format.GMLOptions=} opt_options\n *     Optional configuration object.\n * @extends {ol.format.GMLBase}\n * @api\n */\nconst GML3 = function(opt_options) {\n  const options = /** @type {olx.format.GMLOptions} */\n      (opt_options ? opt_options : {});\n\n  GMLBase.call(this, options);\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.surface_ = options.surface !== undefined ? options.surface : false;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.curve_ = options.curve !== undefined ? options.curve : false;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.multiCurve_ = options.multiCurve !== undefined ?\n    options.multiCurve : true;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.multiSurface_ = options.multiSurface !== undefined ?\n    options.multiSurface : true;\n\n  /**\n   * @inheritDoc\n   */\n  this.schemaLocation = options.schemaLocation ?\n    options.schemaLocation : GML3.schemaLocation_;\n\n  /**\n   * @private\n   * @type {boolean}\n   */\n  this.hasZ = options.hasZ !== undefined ?\n    options.hasZ : false;\n\n};\n\ninherits(GML3, GMLBase);\n\n\n/**\n * @const\n * @type {string}\n * @private\n */\nGML3.schemaLocation_ = GMLBase.GMLNS +\n    ' http://schemas.opengis.net/gml/3.1.1/profiles/gmlsfProfile/' +\n    '1.0.0/gmlsf.xsd';\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {ol.geom.MultiLineString|undefined} MultiLineString.\n */\nGML3.prototype.readMultiCurve_ = function(node, objectStack) {\n  /** @type {Array.<ol.geom.LineString>} */\n  const lineStrings = _ol_xml_.pushParseAndPop([],\n    this.MULTICURVE_PARSERS_, node, objectStack, this);\n  if (lineStrings) {\n    const multiLineString = new MultiLineString(null);\n    multiLineString.setLineStrings(lineStrings);\n    return multiLineString;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {ol.geom.MultiPolygon|undefined} MultiPolygon.\n */\nGML3.prototype.readMultiSurface_ = function(node, objectStack) {\n  /** @type {Array.<ol.geom.Polygon>} */\n  const polygons = _ol_xml_.pushParseAndPop([],\n    this.MULTISURFACE_PARSERS_, node, objectStack, this);\n  if (polygons) {\n    const multiPolygon = new MultiPolygon(null);\n    multiPolygon.setPolygons(polygons);\n    return multiPolygon;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML3.prototype.curveMemberParser_ = function(node, objectStack) {\n  _ol_xml_.parseNode(this.CURVEMEMBER_PARSERS_, node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML3.prototype.surfaceMemberParser_ = function(node, objectStack) {\n  _ol_xml_.parseNode(this.SURFACEMEMBER_PARSERS_,\n    node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<(Array.<number>)>|undefined} flat coordinates.\n */\nGML3.prototype.readPatch_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop([null],\n    this.PATCHES_PARSERS_, node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} flat coordinates.\n */\nGML3.prototype.readSegment_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop([null],\n    this.SEGMENTS_PARSERS_, node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<(Array.<number>)>|undefined} flat coordinates.\n */\nGML3.prototype.readPolygonPatch_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop([null],\n    this.FLAT_LINEAR_RINGS_PARSERS_, node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} flat coordinates.\n */\nGML3.prototype.readLineStringSegment_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop([null],\n    this.GEOMETRY_FLAT_COORDINATES_PARSERS_,\n    node, objectStack, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML3.prototype.interiorParser_ = function(node, objectStack) {\n  /** @type {Array.<number>|undefined} */\n  const flatLinearRing = _ol_xml_.pushParseAndPop(undefined,\n    this.RING_PARSERS, node, objectStack, this);\n  if (flatLinearRing) {\n    const flatLinearRings = /** @type {Array.<Array.<number>>} */\n        (objectStack[objectStack.length - 1]);\n    flatLinearRings.push(flatLinearRing);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n */\nGML3.prototype.exteriorParser_ = function(node, objectStack) {\n  /** @type {Array.<number>|undefined} */\n  const flatLinearRing = _ol_xml_.pushParseAndPop(undefined,\n    this.RING_PARSERS, node, objectStack, this);\n  if (flatLinearRing) {\n    const flatLinearRings = /** @type {Array.<Array.<number>>} */\n        (objectStack[objectStack.length - 1]);\n    flatLinearRings[0] = flatLinearRing;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {ol.geom.Polygon|undefined} Polygon.\n */\nGML3.prototype.readSurface_ = function(node, objectStack) {\n  /** @type {Array.<Array.<number>>} */\n  const flatLinearRings = _ol_xml_.pushParseAndPop([null],\n    this.SURFACE_PARSERS_, node, objectStack, this);\n  if (flatLinearRings && flatLinearRings[0]) {\n    const polygon = new Polygon(null);\n    const flatCoordinates = flatLinearRings[0];\n    const ends = [flatCoordinates.length];\n    let i, ii;\n    for (i = 1, ii = flatLinearRings.length; i < ii; ++i) {\n      extend(flatCoordinates, flatLinearRings[i]);\n      ends.push(flatCoordinates.length);\n    }\n    polygon.setFlatCoordinates(\n      GeometryLayout.XYZ, flatCoordinates, ends);\n    return polygon;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {ol.geom.LineString|undefined} LineString.\n */\nGML3.prototype.readCurve_ = function(node, objectStack) {\n  /** @type {Array.<number>} */\n  const flatCoordinates = _ol_xml_.pushParseAndPop([null],\n    this.CURVE_PARSERS_, node, objectStack, this);\n  if (flatCoordinates) {\n    const lineString = new LineString(null);\n    lineString.setFlatCoordinates(GeometryLayout.XYZ, flatCoordinates);\n    return lineString;\n  } else {\n    return undefined;\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {ol.Extent|undefined} Envelope.\n */\nGML3.prototype.readEnvelope_ = function(node, objectStack) {\n  /** @type {Array.<number>} */\n  const flatCoordinates = _ol_xml_.pushParseAndPop([null],\n    this.ENVELOPE_PARSERS_, node, objectStack, this);\n  return createOrUpdate(flatCoordinates[1][0],\n    flatCoordinates[1][1], flatCoordinates[2][0],\n    flatCoordinates[2][1]);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} Flat coordinates.\n */\nGML3.prototype.readFlatPos_ = function(node, objectStack) {\n  let s = _ol_xml_.getAllTextContent(node, false);\n  const re = /^\\s*([+\\-]?\\d*\\.?\\d+(?:[eE][+\\-]?\\d+)?)\\s*/;\n  /** @type {Array.<number>} */\n  const flatCoordinates = [];\n  let m;\n  while ((m = re.exec(s))) {\n    flatCoordinates.push(parseFloat(m[1]));\n    s = s.substr(m[0].length);\n  }\n  if (s !== '') {\n    return undefined;\n  }\n  const context = objectStack[0];\n  const containerSrs = context['srsName'];\n  let axisOrientation = 'enu';\n  if (containerSrs) {\n    const proj = getProjection(containerSrs);\n    axisOrientation = proj.getAxisOrientation();\n  }\n  if (axisOrientation === 'neu') {\n    let i, ii;\n    for (i = 0, ii = flatCoordinates.length; i < ii; i += 3) {\n      const y = flatCoordinates[i];\n      const x = flatCoordinates[i + 1];\n      flatCoordinates[i] = x;\n      flatCoordinates[i + 1] = y;\n    }\n  }\n  const len = flatCoordinates.length;\n  if (len == 2) {\n    flatCoordinates.push(0);\n  }\n  if (len === 0) {\n    return undefined;\n  }\n  return flatCoordinates;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Array.<number>|undefined} Flat coordinates.\n */\nGML3.prototype.readFlatPosList_ = function(node, objectStack) {\n  const s = _ol_xml_.getAllTextContent(node, false).replace(/^\\s*|\\s*$/g, '');\n  const context = objectStack[0];\n  const containerSrs = context['srsName'];\n  const contextDimension = context['srsDimension'];\n  let axisOrientation = 'enu';\n  if (containerSrs) {\n    const proj = getProjection(containerSrs);\n    axisOrientation = proj.getAxisOrientation();\n  }\n  const coords = s.split(/\\s+/);\n  // The \"dimension\" attribute is from the GML 3.0.1 spec.\n  let dim = 2;\n  if (node.getAttribute('srsDimension')) {\n    dim = XSD.readNonNegativeIntegerString(\n      node.getAttribute('srsDimension'));\n  } else if (node.getAttribute('dimension')) {\n    dim = XSD.readNonNegativeIntegerString(\n      node.getAttribute('dimension'));\n  } else if (node.parentNode.getAttribute('srsDimension')) {\n    dim = XSD.readNonNegativeIntegerString(\n      node.parentNode.getAttribute('srsDimension'));\n  } else if (contextDimension) {\n    dim = XSD.readNonNegativeIntegerString(contextDimension);\n  }\n  let x, y, z;\n  const flatCoordinates = [];\n  for (let i = 0, ii = coords.length; i < ii; i += dim) {\n    x = parseFloat(coords[i]);\n    y = parseFloat(coords[i + 1]);\n    z = (dim === 3) ? parseFloat(coords[i + 2]) : 0;\n    if (axisOrientation.substr(0, 2) === 'en') {\n      flatCoordinates.push(x, y, z);\n    } else {\n      flatCoordinates.push(y, x, z);\n    }\n  }\n  return flatCoordinates;\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.GEOMETRY_FLAT_COORDINATES_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'pos': _ol_xml_.makeReplacer(GML3.prototype.readFlatPos_),\n    'posList': _ol_xml_.makeReplacer(GML3.prototype.readFlatPosList_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.FLAT_LINEAR_RINGS_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'interior': GML3.prototype.interiorParser_,\n    'exterior': GML3.prototype.exteriorParser_\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.GEOMETRY_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Point': _ol_xml_.makeReplacer(GMLBase.prototype.readPoint),\n    'MultiPoint': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readMultiPoint),\n    'LineString': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readLineString),\n    'MultiLineString': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readMultiLineString),\n    'LinearRing': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readLinearRing),\n    'Polygon': _ol_xml_.makeReplacer(GMLBase.prototype.readPolygon),\n    'MultiPolygon': _ol_xml_.makeReplacer(\n      GMLBase.prototype.readMultiPolygon),\n    'Surface': _ol_xml_.makeReplacer(GML3.prototype.readSurface_),\n    'MultiSurface': _ol_xml_.makeReplacer(\n      GML3.prototype.readMultiSurface_),\n    'Curve': _ol_xml_.makeReplacer(GML3.prototype.readCurve_),\n    'MultiCurve': _ol_xml_.makeReplacer(\n      GML3.prototype.readMultiCurve_),\n    'Envelope': _ol_xml_.makeReplacer(GML3.prototype.readEnvelope_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.MULTICURVE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'curveMember': _ol_xml_.makeArrayPusher(\n      GML3.prototype.curveMemberParser_),\n    'curveMembers': _ol_xml_.makeArrayPusher(\n      GML3.prototype.curveMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.MULTISURFACE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': _ol_xml_.makeArrayPusher(\n      GML3.prototype.surfaceMemberParser_),\n    'surfaceMembers': _ol_xml_.makeArrayPusher(\n      GML3.prototype.surfaceMemberParser_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.CURVEMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineString': _ol_xml_.makeArrayPusher(\n      GMLBase.prototype.readLineString),\n    'Curve': _ol_xml_.makeArrayPusher(GML3.prototype.readCurve_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.SURFACEMEMBER_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'Polygon': _ol_xml_.makeArrayPusher(GMLBase.prototype.readPolygon),\n    'Surface': _ol_xml_.makeArrayPusher(GML3.prototype.readSurface_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.SURFACE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'patches': _ol_xml_.makeReplacer(GML3.prototype.readPatch_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.CURVE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'segments': _ol_xml_.makeReplacer(GML3.prototype.readSegment_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.ENVELOPE_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': _ol_xml_.makeArrayPusher(\n      GML3.prototype.readFlatPosList_),\n    'upperCorner': _ol_xml_.makeArrayPusher(\n      GML3.prototype.readFlatPosList_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.PATCHES_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'PolygonPatch': _ol_xml_.makeReplacer(\n      GML3.prototype.readPolygonPatch_)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nGML3.prototype.SEGMENTS_PARSERS_ = {\n  'http://www.opengis.net/gml': {\n    'LineStringSegment': _ol_xml_.makeReplacer(\n      GML3.prototype.readLineStringSegment_)\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Point} value Point geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writePos_ = function(node, value, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsDimension = hasZ ? 3 : 2;\n  node.setAttribute('srsDimension', srsDimension);\n  const srsName = context['srsName'];\n  let axisOrientation = 'enu';\n  if (srsName) {\n    axisOrientation = getProjection(srsName).getAxisOrientation();\n  }\n  const point = value.getCoordinates();\n  let coords;\n  // only 2d for simple features profile\n  if (axisOrientation.substr(0, 2) === 'en') {\n    coords = (point[0] + ' ' + point[1]);\n  } else {\n    coords = (point[1] + ' ' + point[0]);\n  }\n  if (hasZ) {\n    // For newly created points, Z can be undefined.\n    const z = point[2] || 0;\n    coords += ' ' + z;\n  }\n  XSD.writeStringTextNode(node, coords);\n};\n\n\n/**\n * @param {Array.<number>} point Point geometry.\n * @param {string=} opt_srsName Optional srsName\n * @param {boolean=} opt_hasZ whether the geometry has a Z coordinate (is 3D) or not.\n * @return {string} The coords string.\n * @private\n */\nGML3.prototype.getCoords_ = function(point, opt_srsName, opt_hasZ) {\n  let axisOrientation = 'enu';\n  if (opt_srsName) {\n    axisOrientation = getProjection(opt_srsName).getAxisOrientation();\n  }\n  let coords = ((axisOrientation.substr(0, 2) === 'en') ?\n    point[0] + ' ' + point[1] :\n    point[1] + ' ' + point[0]);\n  if (opt_hasZ) {\n    // For newly created points, Z can be undefined.\n    const z = point[2] || 0;\n    coords += ' ' + z;\n  }\n\n  return coords;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString|ol.geom.LinearRing} value Geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writePosList_ = function(node, value, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsDimension = hasZ ? 3 : 2;\n  node.setAttribute('srsDimension', srsDimension);\n  const srsName = context['srsName'];\n  // only 2d for simple features profile\n  const points = value.getCoordinates();\n  const len = points.length;\n  const parts = new Array(len);\n  let point;\n  for (let i = 0; i < len; ++i) {\n    point = points[i];\n    parts[i] = this.getCoords_(point, srsName, hasZ);\n  }\n  XSD.writeStringTextNode(node, parts.join(' '));\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Point} geometry Point geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writePoint_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const pos = _ol_xml_.createElementNS(node.namespaceURI, 'pos');\n  node.appendChild(pos);\n  this.writePos_(pos, geometry, objectStack);\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML3.ENVELOPE_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lowerCorner': _ol_xml_.makeChildAppender(XSD.writeStringTextNode),\n    'upperCorner': _ol_xml_.makeChildAppender(XSD.writeStringTextNode)\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Extent} extent Extent.\n * @param {Array.<*>} objectStack Node stack.\n */\nGML3.prototype.writeEnvelope = function(node, extent, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const keys = ['lowerCorner', 'upperCorner'];\n  const values = [extent[0] + ' ' + extent[1], extent[2] + ' ' + extent[3]];\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    ({node: node}), GML3.ENVELOPE_SERIALIZERS_,\n    _ol_xml_.OBJECT_PROPERTY_NODE_FACTORY,\n    values,\n    objectStack, keys, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LinearRing} geometry LinearRing geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeLinearRing_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const posList = _ol_xml_.createElementNS(node.namespaceURI, 'posList');\n  node.appendChild(posList);\n  this.writePosList_(posList, geometry, objectStack);\n};\n\n\n/**\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node} Node.\n * @private\n */\nGML3.prototype.RING_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const context = objectStack[objectStack.length - 1];\n  const parentNode = context.node;\n  const exteriorWritten = context['exteriorWritten'];\n  if (exteriorWritten === undefined) {\n    context['exteriorWritten'] = true;\n  }\n  return _ol_xml_.createElementNS(parentNode.namespaceURI,\n    exteriorWritten !== undefined ? 'interior' : 'exterior');\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Polygon} geometry Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeSurfaceOrPolygon_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  if (node.nodeName !== 'PolygonPatch' && srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (node.nodeName === 'Polygon' || node.nodeName === 'PolygonPatch') {\n    const rings = geometry.getLinearRings();\n    _ol_xml_.pushSerializeAndPop(\n      {node: node, hasZ: hasZ, srsName: srsName},\n      GML3.RING_SERIALIZERS_,\n      this.RING_NODE_FACTORY_,\n      rings, objectStack, undefined, this);\n  } else if (node.nodeName === 'Surface') {\n    const patches = _ol_xml_.createElementNS(node.namespaceURI, 'patches');\n    node.appendChild(patches);\n    this.writeSurfacePatches_(\n      patches, geometry, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString} geometry LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeCurveOrLineString_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  if (node.nodeName !== 'LineStringSegment' && srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  if (node.nodeName === 'LineString' ||\n      node.nodeName === 'LineStringSegment') {\n    const posList = _ol_xml_.createElementNS(node.namespaceURI, 'posList');\n    node.appendChild(posList);\n    this.writePosList_(posList, geometry, objectStack);\n  } else if (node.nodeName === 'Curve') {\n    const segments = _ol_xml_.createElementNS(node.namespaceURI, 'segments');\n    node.appendChild(segments);\n    this.writeCurveSegments_(segments,\n      geometry, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.MultiPolygon} geometry MultiPolygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeMultiSurfaceOrPolygon_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  const surface = context['surface'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const polygons = geometry.getPolygons();\n  _ol_xml_.pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, surface: surface},\n    GML3.SURFACEORPOLYGONMEMBER_SERIALIZERS_,\n    this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, polygons,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.MultiPoint} geometry MultiPoint geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeMultiPoint_ = function(node, geometry,\n  objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const srsName = context['srsName'];\n  const hasZ = context['hasZ'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const points = geometry.getPoints();\n  _ol_xml_.pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName},\n    GML3.POINTMEMBER_SERIALIZERS_,\n    _ol_xml_.makeSimpleNodeFactory('pointMember'), points,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.MultiLineString} geometry MultiLineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeMultiCurveOrLineString_ = function(node, geometry, objectStack) {\n  const context = objectStack[objectStack.length - 1];\n  const hasZ = context['hasZ'];\n  const srsName = context['srsName'];\n  const curve = context['curve'];\n  if (srsName) {\n    node.setAttribute('srsName', srsName);\n  }\n  const lines = geometry.getLineStrings();\n  _ol_xml_.pushSerializeAndPop({node: node, hasZ: hasZ, srsName: srsName, curve: curve},\n    GML3.LINESTRINGORCURVEMEMBER_SERIALIZERS_,\n    this.MULTIGEOMETRY_MEMBER_NODE_FACTORY_, lines,\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LinearRing} ring LinearRing geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeRing_ = function(node, ring, objectStack) {\n  const linearRing = _ol_xml_.createElementNS(node.namespaceURI, 'LinearRing');\n  node.appendChild(linearRing);\n  this.writeLinearRing_(linearRing, ring, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Polygon} polygon Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeSurfaceOrPolygonMember_ = function(node, polygon, objectStack) {\n  const child = this.GEOMETRY_NODE_FACTORY_(\n    polygon, objectStack);\n  if (child) {\n    node.appendChild(child);\n    this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Point} point Point geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writePointMember_ = function(node, point, objectStack) {\n  const child = _ol_xml_.createElementNS(node.namespaceURI, 'Point');\n  node.appendChild(child);\n  this.writePoint_(child, point, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString} line LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeLineStringOrCurveMember_ = function(node, line, objectStack) {\n  const child = this.GEOMETRY_NODE_FACTORY_(line, objectStack);\n  if (child) {\n    node.appendChild(child);\n    this.writeCurveOrLineString_(child, line, objectStack);\n  }\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Polygon} polygon Polygon geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeSurfacePatches_ = function(node, polygon, objectStack) {\n  const child = _ol_xml_.createElementNS(node.namespaceURI, 'PolygonPatch');\n  node.appendChild(child);\n  this.writeSurfaceOrPolygon_(child, polygon, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.LineString} line LineString geometry.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeCurveSegments_ = function(node, line, objectStack) {\n  const child = _ol_xml_.createElementNS(node.namespaceURI,\n    'LineStringSegment');\n  node.appendChild(child);\n  this.writeCurveOrLineString_(child, line, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.geom.Geometry|ol.Extent} geometry Geometry.\n * @param {Array.<*>} objectStack Node stack.\n */\nGML3.prototype.writeGeometryElement = function(node, geometry, objectStack) {\n  const context = /** @type {olx.format.WriteOptions} */ (objectStack[objectStack.length - 1]);\n  const item = assign({}, context);\n  item.node = node;\n  let value;\n  if (Array.isArray(geometry)) {\n    if (context.dataProjection) {\n      value = transformExtent(\n        geometry, context.featureProjection, context.dataProjection);\n    } else {\n      value = geometry;\n    }\n  } else {\n    value = transformWithOptions(/** @type {ol.geom.Geometry} */ (geometry), true, context);\n  }\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    (item), GML3.GEOMETRY_SERIALIZERS_,\n    this.GEOMETRY_NODE_FACTORY_, [value],\n    objectStack, undefined, this);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {ol.Feature} feature Feature.\n * @param {Array.<*>} objectStack Node stack.\n */\nGML3.prototype.writeFeatureElement = function(node, feature, objectStack) {\n  const fid = feature.getId();\n  if (fid) {\n    node.setAttribute('fid', fid);\n  }\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const featureNS = context['featureNS'];\n  const geometryName = feature.getGeometryName();\n  if (!context.serializers) {\n    context.serializers = {};\n    context.serializers[featureNS] = {};\n  }\n  const properties = feature.getProperties();\n  const keys = [];\n  const values = [];\n  for (const key in properties) {\n    const value = properties[key];\n    if (value !== null) {\n      keys.push(key);\n      values.push(value);\n      if (key == geometryName || value instanceof Geometry) {\n        if (!(key in context.serializers[featureNS])) {\n          context.serializers[featureNS][key] = _ol_xml_.makeChildAppender(\n            this.writeGeometryElement, this);\n        }\n      } else {\n        if (!(key in context.serializers[featureNS])) {\n          context.serializers[featureNS][key] = _ol_xml_.makeChildAppender(\n            XSD.writeStringTextNode);\n        }\n      }\n    }\n  }\n  const item = assign({}, context);\n  item.node = node;\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    (item), context.serializers,\n    _ol_xml_.makeSimpleNodeFactory(undefined, featureNS),\n    values,\n    objectStack, keys);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<ol.Feature>} features Features.\n * @param {Array.<*>} objectStack Node stack.\n * @private\n */\nGML3.prototype.writeFeatureMembers_ = function(node, features, objectStack) {\n  const context = /** @type {Object} */ (objectStack[objectStack.length - 1]);\n  const featureType = context['featureType'];\n  const featureNS = context['featureNS'];\n  const serializers = {};\n  serializers[featureNS] = {};\n  serializers[featureNS][featureType] = _ol_xml_.makeChildAppender(\n    this.writeFeatureElement, this);\n  const item = assign({}, context);\n  item.node = node;\n  _ol_xml_.pushSerializeAndPop(/** @type {ol.XmlNodeStackItem} */\n    (item),\n    serializers,\n    _ol_xml_.makeSimpleNodeFactory(featureType, featureNS), features,\n    objectStack);\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML3.SURFACEORPOLYGONMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'surfaceMember': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember_),\n    'polygonMember': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygonMember_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML3.POINTMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'pointMember': _ol_xml_.makeChildAppender(\n      GML3.prototype.writePointMember_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML3.LINESTRINGORCURVEMEMBER_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'lineStringMember': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember_),\n    'curveMember': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeLineStringOrCurveMember_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML3.RING_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'exterior': _ol_xml_.makeChildAppender(GML3.prototype.writeRing_),\n    'interior': _ol_xml_.makeChildAppender(GML3.prototype.writeRing_)\n  }\n};\n\n\n/**\n * @type {Object.<string, Object.<string, ol.XmlSerializer>>}\n * @private\n */\nGML3.GEOMETRY_SERIALIZERS_ = {\n  'http://www.opengis.net/gml': {\n    'Curve': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeCurveOrLineString_),\n    'MultiCurve': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString_),\n    'Point': _ol_xml_.makeChildAppender(GML3.prototype.writePoint_),\n    'MultiPoint': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeMultiPoint_),\n    'LineString': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeCurveOrLineString_),\n    'MultiLineString': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeMultiCurveOrLineString_),\n    'LinearRing': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeLinearRing_),\n    'Polygon': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygon_),\n    'MultiPolygon': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon_),\n    'Surface': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeSurfaceOrPolygon_),\n    'MultiSurface': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeMultiSurfaceOrPolygon_),\n    'Envelope': _ol_xml_.makeChildAppender(\n      GML3.prototype.writeEnvelope)\n  }\n};\n\n\n/**\n * @const\n * @type {Object.<string, string>}\n * @private\n */\nGML3.MULTIGEOMETRY_TO_MEMBER_NODENAME_ = {\n  'MultiLineString': 'lineStringMember',\n  'MultiCurve': 'curveMember',\n  'MultiPolygon': 'polygonMember',\n  'MultiSurface': 'surfaceMember'\n};\n\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node|undefined} Node.\n * @private\n */\nGML3.prototype.MULTIGEOMETRY_MEMBER_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const parentNode = objectStack[objectStack.length - 1].node;\n  return _ol_xml_.createElementNS('http://www.opengis.net/gml',\n    GML3.MULTIGEOMETRY_TO_MEMBER_NODENAME_[parentNode.nodeName]);\n};\n\n\n/**\n * @const\n * @param {*} value Value.\n * @param {Array.<*>} objectStack Object stack.\n * @param {string=} opt_nodeName Node name.\n * @return {Node|undefined} Node.\n * @private\n */\nGML3.prototype.GEOMETRY_NODE_FACTORY_ = function(value, objectStack, opt_nodeName) {\n  const context = objectStack[objectStack.length - 1];\n  const multiSurface = context['multiSurface'];\n  const surface = context['surface'];\n  const curve = context['curve'];\n  const multiCurve = context['multiCurve'];\n  let nodeName;\n  if (!Array.isArray(value)) {\n    nodeName = /** @type {ol.geom.Geometry} */ (value).getType();\n    if (nodeName === 'MultiPolygon' && multiSurface === true) {\n      nodeName = 'MultiSurface';\n    } else if (nodeName === 'Polygon' && surface === true) {\n      nodeName = 'Surface';\n    } else if (nodeName === 'LineString' && curve === true) {\n      nodeName = 'Curve';\n    } else if (nodeName === 'MultiLineString' && multiCurve === true) {\n      nodeName = 'MultiCurve';\n    }\n  } else {\n    nodeName = 'Envelope';\n  }\n  return _ol_xml_.createElementNS('http://www.opengis.net/gml',\n    nodeName);\n};\n\n\n/**\n * Encode a geometry in GML 3.1.1 Simple Features.\n *\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Options.\n * @return {Node} Node.\n * @override\n * @api\n */\nGML3.prototype.writeGeometryNode = function(geometry, opt_options) {\n  opt_options = this.adaptOptions(opt_options);\n  const geom = _ol_xml_.createElementNS('http://www.opengis.net/gml', 'geom');\n  const context = {node: geom, hasZ: this.hasZ, srsName: this.srsName,\n    curve: this.curve_, surface: this.surface_,\n    multiSurface: this.multiSurface_, multiCurve: this.multiCurve_};\n  if (opt_options) {\n    assign(context, opt_options);\n  }\n  this.writeGeometryElement(geom, geometry, [context]);\n  return geom;\n};\n\n\n/**\n * Encode an array of features in GML 3.1.1 Simple Features.\n *\n * @function\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Options.\n * @return {string} Result.\n * @api\n */\nGML3.prototype.writeFeatures;\n\n\n/**\n * Encode an array of features in the GML 3.1.1 format as an XML node.\n *\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Options.\n * @return {Node} Node.\n * @override\n * @api\n */\nGML3.prototype.writeFeaturesNode = function(features, opt_options) {\n  opt_options = this.adaptOptions(opt_options);\n  const node = _ol_xml_.createElementNS('http://www.opengis.net/gml',\n    'featureMembers');\n  _ol_xml_.setAttributeNS(node, 'http://www.w3.org/2001/XMLSchema-instance',\n    'xsi:schemaLocation', this.schemaLocation);\n  const context = {\n    srsName: this.srsName,\n    hasZ: this.hasZ,\n    curve: this.curve_,\n    surface: this.surface_,\n    multiSurface: this.multiSurface_,\n    multiCurve: this.multiCurve_,\n    featureNS: this.featureNS,\n    featureType: this.featureType\n  };\n  if (opt_options) {\n    assign(context, opt_options);\n  }\n  this.writeFeatureMembers_(node, features, [context]);\n  return node;\n};\nexport default GML3;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/GML3.js\n// module id = 76\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22","/**\n * @module ol/geom/GeometryCollection\n */\nimport {inherits} from '../index.js';\nimport _ol_events_ from '../events.js';\nimport EventType from '../events/EventType.js';\nimport {createOrUpdateEmpty, closestSquaredDistanceXY, extend, getCenter} from '../extent.js';\nimport Geometry from '../geom/Geometry.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport {clear} from '../obj.js';\n\n/**\n * @classdesc\n * An array of {@link ol.geom.Geometry} objects.\n *\n * @constructor\n * @extends {ol.geom.Geometry}\n * @param {Array.<ol.geom.Geometry>=} opt_geometries Geometries.\n * @api\n */\nconst GeometryCollection = function(opt_geometries) {\n\n  Geometry.call(this);\n\n  /**\n   * @private\n   * @type {Array.<ol.geom.Geometry>}\n   */\n  this.geometries_ = opt_geometries ? opt_geometries : null;\n\n  this.listenGeometriesChange_();\n};\n\ninherits(GeometryCollection, Geometry);\n\n\n/**\n * @param {Array.<ol.geom.Geometry>} geometries Geometries.\n * @private\n * @return {Array.<ol.geom.Geometry>} Cloned geometries.\n */\nGeometryCollection.cloneGeometries_ = function(geometries) {\n  const clonedGeometries = [];\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    clonedGeometries.push(geometries[i].clone());\n  }\n  return clonedGeometries;\n};\n\n\n/**\n * @private\n */\nGeometryCollection.prototype.unlistenGeometriesChange_ = function() {\n  let i, ii;\n  if (!this.geometries_) {\n    return;\n  }\n  for (i = 0, ii = this.geometries_.length; i < ii; ++i) {\n    _ol_events_.unlisten(\n      this.geometries_[i], EventType.CHANGE,\n      this.changed, this);\n  }\n};\n\n\n/**\n * @private\n */\nGeometryCollection.prototype.listenGeometriesChange_ = function() {\n  let i, ii;\n  if (!this.geometries_) {\n    return;\n  }\n  for (i = 0, ii = this.geometries_.length; i < ii; ++i) {\n    _ol_events_.listen(\n      this.geometries_[i], EventType.CHANGE,\n      this.changed, this);\n  }\n};\n\n\n/**\n * Make a complete copy of the geometry.\n * @return {!ol.geom.GeometryCollection} Clone.\n * @override\n * @api\n */\nGeometryCollection.prototype.clone = function() {\n  const geometryCollection = new GeometryCollection(null);\n  geometryCollection.setGeometries(this.geometries_);\n  return geometryCollection;\n};\n\n\n/**\n * @inheritDoc\n */\nGeometryCollection.prototype.closestPointXY = function(x, y, closestPoint, minSquaredDistance) {\n  if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n    return minSquaredDistance;\n  }\n  const geometries = this.geometries_;\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    minSquaredDistance = geometries[i].closestPointXY(\n      x, y, closestPoint, minSquaredDistance);\n  }\n  return minSquaredDistance;\n};\n\n\n/**\n * @inheritDoc\n */\nGeometryCollection.prototype.containsXY = function(x, y) {\n  const geometries = this.geometries_;\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    if (geometries[i].containsXY(x, y)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * @inheritDoc\n */\nGeometryCollection.prototype.computeExtent = function(extent) {\n  createOrUpdateEmpty(extent);\n  const geometries = this.geometries_;\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    extend(extent, geometries[i].getExtent());\n  }\n  return extent;\n};\n\n\n/**\n * Return the geometries that make up this geometry collection.\n * @return {Array.<ol.geom.Geometry>} Geometries.\n * @api\n */\nGeometryCollection.prototype.getGeometries = function() {\n  return GeometryCollection.cloneGeometries_(this.geometries_);\n};\n\n\n/**\n * @return {Array.<ol.geom.Geometry>} Geometries.\n */\nGeometryCollection.prototype.getGeometriesArray = function() {\n  return this.geometries_;\n};\n\n\n/**\n * @inheritDoc\n */\nGeometryCollection.prototype.getSimplifiedGeometry = function(squaredTolerance) {\n  if (this.simplifiedGeometryRevision != this.getRevision()) {\n    clear(this.simplifiedGeometryCache);\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n    this.simplifiedGeometryRevision = this.getRevision();\n  }\n  if (squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n       squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)) {\n    return this;\n  }\n  const key = squaredTolerance.toString();\n  if (this.simplifiedGeometryCache.hasOwnProperty(key)) {\n    return this.simplifiedGeometryCache[key];\n  } else {\n    const simplifiedGeometries = [];\n    const geometries = this.geometries_;\n    let simplified = false;\n    let i, ii;\n    for (i = 0, ii = geometries.length; i < ii; ++i) {\n      const geometry = geometries[i];\n      const simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);\n      simplifiedGeometries.push(simplifiedGeometry);\n      if (simplifiedGeometry !== geometry) {\n        simplified = true;\n      }\n    }\n    if (simplified) {\n      const simplifiedGeometryCollection = new GeometryCollection(null);\n      simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n      this.simplifiedGeometryCache[key] = simplifiedGeometryCollection;\n      return simplifiedGeometryCollection;\n    } else {\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n      return this;\n    }\n  }\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nGeometryCollection.prototype.getType = function() {\n  return GeometryType.GEOMETRY_COLLECTION;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nGeometryCollection.prototype.intersectsExtent = function(extent) {\n  const geometries = this.geometries_;\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    if (geometries[i].intersectsExtent(extent)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/**\n * @return {boolean} Is empty.\n */\nGeometryCollection.prototype.isEmpty = function() {\n  return this.geometries_.length === 0;\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nGeometryCollection.prototype.rotate = function(angle, anchor) {\n  const geometries = this.geometries_;\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    geometries[i].rotate(angle, anchor);\n  }\n  this.changed();\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nGeometryCollection.prototype.scale = function(sx, opt_sy, opt_anchor) {\n  let anchor = opt_anchor;\n  if (!anchor) {\n    anchor = getCenter(this.getExtent());\n  }\n  const geometries = this.geometries_;\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    geometries[i].scale(sx, opt_sy, anchor);\n  }\n  this.changed();\n};\n\n\n/**\n * Set the geometries that make up this geometry collection.\n * @param {Array.<ol.geom.Geometry>} geometries Geometries.\n * @api\n */\nGeometryCollection.prototype.setGeometries = function(geometries) {\n  this.setGeometriesArray(\n    GeometryCollection.cloneGeometries_(geometries));\n};\n\n\n/**\n * @param {Array.<ol.geom.Geometry>} geometries Geometries.\n */\nGeometryCollection.prototype.setGeometriesArray = function(geometries) {\n  this.unlistenGeometriesChange_();\n  this.geometries_ = geometries;\n  this.listenGeometriesChange_();\n  this.changed();\n};\n\n\n/**\n * @inheritDoc\n * @api\n */\nGeometryCollection.prototype.applyTransform = function(transformFn) {\n  const geometries = this.geometries_;\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    geometries[i].applyTransform(transformFn);\n  }\n  this.changed();\n};\n\n\n/**\n * Translate the geometry.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @override\n * @api\n */\nGeometryCollection.prototype.translate = function(deltaX, deltaY) {\n  const geometries = this.geometries_;\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    geometries[i].translate(deltaX, deltaY);\n  }\n  this.changed();\n};\n\n\n/**\n * @inheritDoc\n */\nGeometryCollection.prototype.disposeInternal = function() {\n  this.unlistenGeometriesChange_();\n  Geometry.prototype.disposeInternal.call(this);\n};\nexport default GeometryCollection;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/geom/GeometryCollection.js\n// module id = 84\n// module chunks = 0 1 2 3 4 5 6 7 8 9 10 12 14 15 22","/**\n * @module ol/format/OWS\n */\nimport {inherits} from '../index.js';\nimport XLink from '../format/XLink.js';\nimport XML from '../format/XML.js';\nimport XSD from '../format/XSD.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @constructor\n * @extends {ol.format.XML}\n */\nconst OWS = function() {\n  XML.call(this);\n};\n\ninherits(OWS, XML);\n\n\n/**\n * @inheritDoc\n */\nOWS.prototype.readFromDocument = function(doc) {\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readFromNode(n);\n    }\n  }\n  return null;\n};\n\n\n/**\n * @inheritDoc\n */\nOWS.prototype.readFromNode = function(node) {\n  const owsObject = _ol_xml_.pushParseAndPop({},\n    OWS.PARSERS_, node, []);\n  return owsObject ? owsObject : null;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The address.\n */\nOWS.readAddress_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    OWS.ADDRESS_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The values.\n */\nOWS.readAllowedValues_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    OWS.ALLOWED_VALUES_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The constraint.\n */\nOWS.readConstraint_ = function(node, objectStack) {\n  const name = node.getAttribute('name');\n  if (!name) {\n    return undefined;\n  }\n  return _ol_xml_.pushParseAndPop({'name': name},\n    OWS.CONSTRAINT_PARSERS_, node,\n    objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The contact info.\n */\nOWS.readContactInfo_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    OWS.CONTACT_INFO_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The DCP.\n */\nOWS.readDcp_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    OWS.DCP_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The GET object.\n */\nOWS.readGet_ = function(node, objectStack) {\n  const href = XLink.readHref(node);\n  if (!href) {\n    return undefined;\n  }\n  return _ol_xml_.pushParseAndPop({'href': href},\n    OWS.REQUEST_METHOD_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The HTTP object.\n */\nOWS.readHttp_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({}, OWS.HTTP_PARSERS_,\n    node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The operation.\n */\nOWS.readOperation_ = function(node, objectStack) {\n  const name = node.getAttribute('name');\n  const value = _ol_xml_.pushParseAndPop({},\n    OWS.OPERATION_PARSERS_, node, objectStack);\n  if (!value) {\n    return undefined;\n  }\n  const object = /** @type {Object} */\n      (objectStack[objectStack.length - 1]);\n  object[name] = value;\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The operations metadata.\n */\nOWS.readOperationsMetadata_ = function(node,\n  objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    OWS.OPERATIONS_METADATA_PARSERS_, node,\n    objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The phone.\n */\nOWS.readPhone_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    OWS.PHONE_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The service identification.\n */\nOWS.readServiceIdentification_ = function(node,\n  objectStack) {\n  return _ol_xml_.pushParseAndPop(\n    {}, OWS.SERVICE_IDENTIFICATION_PARSERS_, node,\n    objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The service contact.\n */\nOWS.readServiceContact_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop(\n    {}, OWS.SERVICE_CONTACT_PARSERS_, node,\n    objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {Object|undefined} The service provider.\n */\nOWS.readServiceProvider_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop(\n    {}, OWS.SERVICE_PROVIDER_PARSERS_, node,\n    objectStack);\n};\n\n\n/**\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @private\n * @return {string|undefined} The value.\n */\nOWS.readValue_ = function(node, objectStack) {\n  return XSD.readString(node);\n};\n\n\n/**\n * @const\n * @type {Array.<string>}\n * @private\n */\nOWS.NAMESPACE_URIS_ = [\n  null,\n  'http://www.opengis.net/ows/1.1'\n];\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'ServiceIdentification': _ol_xml_.makeObjectPropertySetter(\n      OWS.readServiceIdentification_),\n    'ServiceProvider': _ol_xml_.makeObjectPropertySetter(\n      OWS.readServiceProvider_),\n    'OperationsMetadata': _ol_xml_.makeObjectPropertySetter(\n      OWS.readOperationsMetadata_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.ADDRESS_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'DeliveryPoint': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'City': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n    'AdministrativeArea': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'PostalCode': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n    'Country': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n    'ElectronicMailAddress': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.ALLOWED_VALUES_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'Value': _ol_xml_.makeObjectPropertyPusher(OWS.readValue_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.CONSTRAINT_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'AllowedValues': _ol_xml_.makeObjectPropertySetter(\n      OWS.readAllowedValues_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.CONTACT_INFO_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'Phone': _ol_xml_.makeObjectPropertySetter(OWS.readPhone_),\n    'Address': _ol_xml_.makeObjectPropertySetter(OWS.readAddress_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.DCP_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'HTTP': _ol_xml_.makeObjectPropertySetter(OWS.readHttp_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.HTTP_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'Get': _ol_xml_.makeObjectPropertyPusher(OWS.readGet_),\n    'Post': undefined // TODO\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.OPERATION_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'DCP': _ol_xml_.makeObjectPropertySetter(OWS.readDcp_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.OPERATIONS_METADATA_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'Operation': OWS.readOperation_\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.PHONE_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'Voice': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n    'Facsimile': _ol_xml_.makeObjectPropertySetter(XSD.readString)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.REQUEST_METHOD_PARSERS_ = _ol_xml_.makeStructureNS(\n  OWS.NAMESPACE_URIS_, {\n    'Constraint': _ol_xml_.makeObjectPropertyPusher(\n      OWS.readConstraint_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.SERVICE_CONTACT_PARSERS_ =\n    _ol_xml_.makeStructureNS(\n      OWS.NAMESPACE_URIS_, {\n        'IndividualName': _ol_xml_.makeObjectPropertySetter(\n          XSD.readString),\n        'PositionName': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n        'ContactInfo': _ol_xml_.makeObjectPropertySetter(\n          OWS.readContactInfo_)\n      });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.SERVICE_IDENTIFICATION_PARSERS_ =\n    _ol_xml_.makeStructureNS(\n      OWS.NAMESPACE_URIS_, {\n        'Abstract': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n        'AccessConstraints': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n        'Fees': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n        'Title': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n        'ServiceTypeVersion': _ol_xml_.makeObjectPropertySetter(\n          XSD.readString),\n        'ServiceType': _ol_xml_.makeObjectPropertySetter(XSD.readString)\n      });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nOWS.SERVICE_PROVIDER_PARSERS_ =\n    _ol_xml_.makeStructureNS(\n      OWS.NAMESPACE_URIS_, {\n        'ProviderName': _ol_xml_.makeObjectPropertySetter(XSD.readString),\n        'ProviderSite': _ol_xml_.makeObjectPropertySetter(XLink.readHref),\n        'ServiceContact': _ol_xml_.makeObjectPropertySetter(\n          OWS.readServiceContact_)\n      });\nexport default OWS;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/OWS.js\n// module id = null\n// module chunks = ","/**\n * @module ol/format/WMTSCapabilities\n */\nimport {inherits} from '../index.js';\nimport {boundingExtent} from '../extent.js';\nimport OWS from '../format/OWS.js';\nimport XLink from '../format/XLink.js';\nimport XML from '../format/XML.js';\nimport XSD from '../format/XSD.js';\nimport _ol_xml_ from '../xml.js';\n\n/**\n * @classdesc\n * Format for reading WMTS capabilities data.\n *\n * @constructor\n * @extends {ol.format.XML}\n * @api\n */\nconst WMTSCapabilities = function() {\n  XML.call(this);\n\n  /**\n   * @type {ol.format.OWS}\n   * @private\n   */\n  this.owsParser_ = new OWS();\n};\n\ninherits(WMTSCapabilities, XML);\n\n\n/**\n * Read a WMTS capabilities document.\n *\n * @function\n * @param {Document|Node|string} source The XML source.\n * @return {Object} An object representing the WMTS capabilities.\n * @api\n */\nWMTSCapabilities.prototype.read;\n\n\n/**\n * @inheritDoc\n */\nWMTSCapabilities.prototype.readFromDocument = function(doc) {\n  for (let n = doc.firstChild; n; n = n.nextSibling) {\n    if (n.nodeType == Node.ELEMENT_NODE) {\n      return this.readFromNode(n);\n    }\n  }\n  return null;\n};\n\n\n/**\n * @inheritDoc\n */\nWMTSCapabilities.prototype.readFromNode = function(node) {\n  const version = node.getAttribute('version').trim();\n  let WMTSCapabilityObject = this.owsParser_.readFromNode(node);\n  if (!WMTSCapabilityObject) {\n    return null;\n  }\n  WMTSCapabilityObject['version'] = version;\n  WMTSCapabilityObject = _ol_xml_.pushParseAndPop(WMTSCapabilityObject,\n    WMTSCapabilities.PARSERS_, node, []);\n  return WMTSCapabilityObject ? WMTSCapabilityObject : null;\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Attribution object.\n */\nWMTSCapabilities.readContents_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.CONTENTS_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Layers object.\n */\nWMTSCapabilities.readLayer_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.LAYER_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Tile Matrix Set object.\n */\nWMTSCapabilities.readTileMatrixSet_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.TMS_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Style object.\n */\nWMTSCapabilities.readStyle_ = function(node, objectStack) {\n  const style = _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.STYLE_PARSERS_, node, objectStack);\n  if (!style) {\n    return undefined;\n  }\n  const isDefault = node.getAttribute('isDefault') === 'true';\n  style['isDefault'] = isDefault;\n  return style;\n\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Tile Matrix Set Link object.\n */\nWMTSCapabilities.readTileMatrixSetLink_ = function(node,\n  objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.TMS_LINKS_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Dimension object.\n */\nWMTSCapabilities.readDimensions_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.DIMENSION_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Resource URL object.\n */\nWMTSCapabilities.readResourceUrl_ = function(node, objectStack) {\n  const format = node.getAttribute('format');\n  const template = node.getAttribute('template');\n  const resourceType = node.getAttribute('resourceType');\n  const resource = {};\n  if (format) {\n    resource['format'] = format;\n  }\n  if (template) {\n    resource['template'] = template;\n  }\n  if (resourceType) {\n    resource['resourceType'] = resourceType;\n  }\n  return resource;\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} WGS84 BBox object.\n */\nWMTSCapabilities.readWgs84BoundingBox_ = function(node, objectStack) {\n  const coordinates = _ol_xml_.pushParseAndPop([],\n    WMTSCapabilities.WGS84_BBOX_READERS_, node, objectStack);\n  if (coordinates.length != 2) {\n    return undefined;\n  }\n  return boundingExtent(coordinates);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Legend object.\n */\nWMTSCapabilities.readLegendUrl_ = function(node, objectStack) {\n  const legend = {};\n  legend['format'] = node.getAttribute('format');\n  legend['href'] = XLink.readHref(node);\n  return legend;\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} Coordinates object.\n */\nWMTSCapabilities.readCoordinates_ = function(node, objectStack) {\n  const coordinates = XSD.readString(node).split(' ');\n  if (!coordinates || coordinates.length != 2) {\n    return undefined;\n  }\n  const x = +coordinates[0];\n  const y = +coordinates[1];\n  if (isNaN(x) || isNaN(y)) {\n    return undefined;\n  }\n  return [x, y];\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} TileMatrix object.\n */\nWMTSCapabilities.readTileMatrix_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.TM_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} TileMatrixSetLimits Object.\n */\nWMTSCapabilities.readTileMatrixLimitsList_ = function(node,\n  objectStack) {\n  return _ol_xml_.pushParseAndPop([],\n    WMTSCapabilities.TMS_LIMITS_LIST_PARSERS_, node,\n    objectStack);\n};\n\n\n/**\n * @private\n * @param {Node} node Node.\n * @param {Array.<*>} objectStack Object stack.\n * @return {Object|undefined} TileMatrixLimits Array.\n */\nWMTSCapabilities.readTileMatrixLimits_ = function(node, objectStack) {\n  return _ol_xml_.pushParseAndPop({},\n    WMTSCapabilities.TMS_LIMITS_PARSERS_, node, objectStack);\n};\n\n\n/**\n * @const\n * @private\n * @type {Array.<string>}\n */\nWMTSCapabilities.NAMESPACE_URIS_ = [\n  null,\n  'http://www.opengis.net/wmts/1.0'\n];\n\n\n/**\n * @const\n * @private\n * @type {Array.<string>}\n */\nWMTSCapabilities.OWS_NAMESPACE_URIS_ = [\n  null,\n  'http://www.opengis.net/ows/1.1'\n];\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'Contents': _ol_xml_.makeObjectPropertySetter(\n      WMTSCapabilities.readContents_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.CONTENTS_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'Layer': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readLayer_),\n    'TileMatrixSet': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readTileMatrixSet_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.LAYER_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'Style': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readStyle_),\n    'Format': _ol_xml_.makeObjectPropertyPusher(\n      XSD.readString),\n    'TileMatrixSetLink': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readTileMatrixSetLink_),\n    'Dimension': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readDimensions_),\n    'ResourceURL': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readResourceUrl_)\n  }, _ol_xml_.makeStructureNS(WMTSCapabilities.OWS_NAMESPACE_URIS_, {\n    'Title': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'Abstract': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'WGS84BoundingBox': _ol_xml_.makeObjectPropertySetter(\n      WMTSCapabilities.readWgs84BoundingBox_),\n    'Identifier': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString)\n  }));\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.STYLE_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'LegendURL': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readLegendUrl_)\n  }, _ol_xml_.makeStructureNS(WMTSCapabilities.OWS_NAMESPACE_URIS_, {\n    'Title': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'Identifier': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString)\n  }));\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.TMS_LINKS_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'TileMatrixSet': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'TileMatrixSetLimits': _ol_xml_.makeObjectPropertySetter(\n      WMTSCapabilities.readTileMatrixLimitsList_)\n  });\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.TMS_LIMITS_LIST_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'TileMatrixLimits': _ol_xml_.makeArrayPusher(\n      WMTSCapabilities.readTileMatrixLimits_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.TMS_LIMITS_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'TileMatrix': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'MinTileRow': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'MaxTileRow': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'MinTileCol': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'MaxTileCol': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.DIMENSION_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'Default': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'Value': _ol_xml_.makeObjectPropertyPusher(\n      XSD.readString)\n  }, _ol_xml_.makeStructureNS(WMTSCapabilities.OWS_NAMESPACE_URIS_, {\n    'Identifier': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString)\n  }));\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.WGS84_BBOX_READERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.OWS_NAMESPACE_URIS_, {\n    'LowerCorner': _ol_xml_.makeArrayPusher(\n      WMTSCapabilities.readCoordinates_),\n    'UpperCorner': _ol_xml_.makeArrayPusher(\n      WMTSCapabilities.readCoordinates_)\n  });\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.TMS_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'WellKnownScaleSet': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'TileMatrix': _ol_xml_.makeObjectPropertyPusher(\n      WMTSCapabilities.readTileMatrix_)\n  }, _ol_xml_.makeStructureNS(WMTSCapabilities.OWS_NAMESPACE_URIS_, {\n    'SupportedCRS': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString),\n    'Identifier': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString)\n  }));\n\n\n/**\n * @const\n * @type {Object.<string, Object.<string, ol.XmlParser>>}\n * @private\n */\nWMTSCapabilities.TM_PARSERS_ = _ol_xml_.makeStructureNS(\n  WMTSCapabilities.NAMESPACE_URIS_, {\n    'TopLeftCorner': _ol_xml_.makeObjectPropertySetter(\n      WMTSCapabilities.readCoordinates_),\n    'ScaleDenominator': _ol_xml_.makeObjectPropertySetter(\n      XSD.readDecimal),\n    'TileWidth': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'TileHeight': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'MatrixWidth': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger),\n    'MatrixHeight': _ol_xml_.makeObjectPropertySetter(\n      XSD.readNonNegativeInteger)\n  }, _ol_xml_.makeStructureNS(WMTSCapabilities.OWS_NAMESPACE_URIS_, {\n    'Identifier': _ol_xml_.makeObjectPropertySetter(\n      XSD.readString)\n  }));\nexport default WMTSCapabilities;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/format/WMTSCapabilities.js\n// module id = null\n// module chunks = "],"sourceRoot":""}