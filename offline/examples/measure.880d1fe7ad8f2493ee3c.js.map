{"version":3,"sources":["webpack:///./node_modules/angular-sanitize/index.js","webpack:///./node_modules/angular-sanitize/angular-sanitize.js","webpack:///./examples/measure.js","webpack:///./node_modules/openlayers/src/ol/source/OSM.js","webpack:///./node_modules/openlayers/src/ol/source/XYZ.js"],"names":["__webpack_require__","module","exports","window","angular","bind","extend","forEach","isDefined","lowercase","noop","nodeContains","htmlParser","htmlSanitizeWriter","$sanitizeMinErr","$$minErr","provider","svgEnabled","this","$get","$$sanitizeUri","validElements","svgElements","html","buf","uri","isImage","test","join","enableSvg","handler","undefined","inertBodyElement","getInertBodyElement","mXSSAttempts","innerHTML","node","firstChild","nodeType","start","nodeName","toLowerCase","attrToMap","attributes","chars","textContent","nextNode","end","getNonDescendant","removeChild","uriValidator","ignoreCurrentElement","out","push","tag","attrs","blockedElements","value","key","lkey","validAttrs","uriAttrs","encodeEntities","voidElements","Node","prototype","contains","arg","compareDocumentPosition","SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","toMap","optionalEndTagBlockElements","optionalEndTagInlineElements","optionalEndTagElements","blockElements","inlineElements","htmlAttrs","svgAttrs","str","lowercaseKeys","i","obj","items","split","length","document","inertDocument","implementation","createHTMLDocument","documentElement","getDocumentElement","querySelector","body","DOMParser","parseFromString","remove","e","documentMode","stripCustomNsAttrs","encodeURI","xhr","XMLHttpRequest","responseType","open","send","response","map","ii","attr","name","replace","charCodeAt","ELEMENT_NODE","l","attrNode","attrName","lastIndexOf","removeAttributeNode","propName","call","outerHTML","outerText","info","angularVersion","filter","$sanitize","LINKY_URL_REGEXP","MAILTO_REGEXP","linkyMinErr","isFunction","isObject","isString","text","target","match","url","attributesFn","raw","index","addText","substr","addLink","substring","linkAttributes","ngeoBase","ngeoMapModule","ngeoMiscBtnComponent","ngeoMiscFilters","measuretoolsComponent","bindings","lang","controller","controllerAs","templateUrl","component","MeasuretoolsController","$scope","$compile","$sce","$filter","_this","measureStartMsg","measureLengthContinueMsg","measureAreaContinueMsg","measureAzimutContinueMsg","measureStartMsgs","en","trustAsHtml","fr","measureLengthContinueMsgs","measureAreaContinueMsgs","measureAzimutContinueMsgs","element","$watch","newVal","style","olStyleStyle","fill","olStyleFill","color","stroke","olStyleStroke","lineDash","width","image","olStyleCircle","radius","measureLength","ngeoInteractionMeasureLength","sketchStyle","startMsg","continueMsg","setActive","ngeoMiscDecorate","interaction","measureArea","ngeoInteractionMeasureArea","measureAzimut","ngeoInteractionMeasureAzimut","on","evt","getTooltipElement","$onInit","addInteraction","MainController","olMap","layers","olLayerTile","source","olSourceOSM","view","olView","center","zoom","addControl","olControlScaleLine","__WEBPACK_IMPORTED_MODULE_1__source_XYZ_js__","OSM","opt_options","options","attributions","ATTRIBUTION","crossOrigin","cacheSize","opaque","maxZoom","reprojectionErrorThreshold","tileLoadFunction","wrapX","Object","__WEBPACK_IMPORTED_MODULE_0__index_js__","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_2__tilegrid_js__","XYZ","projection","tileGrid","createXYZ","extent","extentFromProjection","minZoom","tileSize","__WEBPACK_IMPORTED_MODULE_1__source_TileImage_js__","tilePixelRatio","tileUrlFunction","urls","transition"],"mappings":"sCAAAA,EAAA,KACAC,EAAAC,QAAA,iCCIA,SAAAC,EAAAC,GAA4B,aAa5B,IACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EATAC,EAAAV,EAAAW,SAAA,aAqkBAX,EAAAH,OAAA,iBACAe,SAAA,YAjcA,WACA,IAAAC,GAAA,EAEAC,KAAAC,MAAA,yBAAAC,GAIA,OAHAH,GACAX,EAAAe,EAAAC,GAEA,SAAAC,GACA,IAAAC,KAIA,OAHAZ,EAAAW,EAAAV,EAAAW,EAAA,SAAAC,EAAAC,GACA,kBAAAC,KAAAP,EAAAK,EAAAC,OAEAF,EAAAI,KAAA,OAmCAV,KAAAW,UAAA,SAAAA,GACA,OAAArB,EAAAqB,IACAZ,EAAAY,EACAX,MAEAD,GAQAZ,EAAAD,EAAAC,KACAC,EAAAF,EAAAE,OACAC,EAAAH,EAAAG,QACAC,EAAAJ,EAAAI,UACAC,EAAAL,EAAAK,UACAC,EAAAN,EAAAM,KAEAE,EAsLA,SAAAW,EAAAO,GACA,OAAAP,QAAAQ,IAAAR,EACAA,EAAA,GACK,iBAAAA,IACLA,EAAA,GAAAA,GAGA,IAAAS,EAAAC,EAAAV,GACA,IAAAS,EAAA,SAGA,IAAAE,EAAA,EACA,GACA,OAAAA,EACA,MAAApB,EAAA,kEAEAoB,IAGAX,EAAAS,EAAAG,UACAH,EAAAC,EAAAV,SACKA,IAAAS,EAAAG,WAGL,IADA,IAAAC,EAAAJ,EAAAK,WACAD,GAAA,CACA,OAAAA,EAAAE,UACA,OACAR,EAAAS,MAAAH,EAAAI,SAAAC,cAAAC,EAAAN,EAAAO,aACA,MACA,OACAb,EAAAc,MAAAR,EAAAS,aAIA,IAAAC,EACA,MAAAA,EAAAV,EAAAC,cACA,IAAAD,EAAAE,UACAR,EAAAiB,IAAAX,EAAAI,SAAAC,eAEAK,EAAAE,EAAA,cAAAZ,KAEA,WAAAU,IACAV,EAAAY,EAAA,aAAAZ,MACAJ,GACAc,EAAAE,EAAA,cAAAZ,GACA,IAAAA,EAAAE,UACAR,EAAAiB,IAAAX,EAAAI,SAAAC,eAKAL,EAAAU,EAGA,KAAAV,EAAAJ,EAAAK,YACAL,EAAAiB,YAAAb,IA5OAvB,EA0RA,SAAAW,EAAA0B,GACA,IAAAC,GAAA,EACAC,EAAA/C,EAAAmB,IAAA6B,MACA,OACAd,MAAA,SAAAe,EAAAC,GACAD,EAAA7C,EAAA6C,IACAH,GAAAK,EAAAF,KACAH,EAAAG,GAEAH,IAAA,IAAA9B,EAAAiC,KACAF,EAAA,KACAA,EAAAE,GACA/C,EAAAgD,EAAA,SAAAE,EAAAC,GACA,IAAAC,EAAAlD,EAAAiD,GACAhC,EAAA,QAAA4B,GAAA,QAAAK,GAAA,eAAAA,GACA,IAAAC,EAAAD,KACA,IAAAE,EAAAF,KAAAT,EAAAO,EAAA/B,KACA0B,EAAA,KACAA,EAAAM,GACAN,EAAA,MACAA,EAAAU,EAAAL,IACAL,EAAA,QAGAA,EAAA,OAGAL,IAAA,SAAAO,GACAA,EAAA7C,EAAA6C,GACAH,IAAA,IAAA9B,EAAAiC,KAAA,IAAAS,EAAAT,KACAF,EAAA,MACAA,EAAAE,GACAF,EAAA,MAGAE,GAAAH,IACAA,GAAA,IAGAP,MAAA,SAAAA,GACAO,GACAC,EAAAU,EAAAlB,OAjUAjC,EAAAR,EAAA6D,KAAAC,UAAAC,UAAA,SAAAC,GAEA,YAAAjD,KAAAkD,wBAAAD,KAIA,IAAAE,EAAA,kCAEAC,EAAA,eASAP,EAAAQ,EAAA,0BAIAC,EAAAD,EAAA,kDACAE,EAAAF,EAAA,SACAG,EAAApE,KACAmE,EACAD,GAGAG,EAAArE,KAA+BkE,EAAAD,EAAA,wKAK/BK,EAAAtE,KAAgCmE,EAAAF,EAAA,8JAQhCjD,EAAAiD,EAAA,0NAKAf,EAAAe,EAAA,gBAEAlD,EAAAf,KACAyD,EACAY,EACAC,EACAF,GAGAb,EAAAU,EAAA,yDAEAM,EAAAN,EAAA,oTAQAO,EAAAP,EAAA,kuCAcA,GAEAX,EAAAtD,KACAuD,EACAiB,EACAD,GAEA,SAAAN,EAAAQ,EAAAC,GACA,IAAgBC,EAAhBC,KAAgBC,EAAAJ,EAAAK,MAAA,KAChB,IAAAH,EAAA,EAAeA,EAAAE,EAAAE,OAAkBJ,IACjCC,EAAAF,EAAAvE,EAAA0E,EAAAF,IAAAE,EAAAF,KAAA,EAEA,OAAAC,EASA,IAAAjD,EAAA,SAAA9B,EAAAmF,GACA,IAAAC,EACA,IAAAD,MAAAE,eAGA,MAAA1E,EAAA,iDAEA,IAAAkB,IAJAuD,EAAAD,EAAAE,eAAAC,mBAAA,UAIAC,iBAAAH,EAAAI,sBAAAC,cAAA,QAIA,OADA5D,EAAAG,UAAA,uDACAH,EAAA4D,cAAA,QAIA5D,EAAAG,UAAA,mEACAH,EAAA4D,cAAA,WAyBA,SAAArE,GAGAA,EAAA,oBAAAA,EACA,IACA,IAAAsE,GAAA,IAAA1F,EAAA2F,WAAAC,gBAAAxE,EAAA,aAAAsE,KAEA,OADAA,EAAAxD,WAAA2D,SACAH,EACO,MAAAI,GACP,SAIA,SAAA1E,GASA,OARAS,EAAAG,UAAAZ,EAIA+D,EAAAY,cACAC,EAAAnE,GAGAA,IAxCA,SAAAT,GAGAA,EAAA,oBAAAA,EACA,IACAA,EAAA6E,UAAA7E,GACO,MAAA0E,GACP,OAEA,IAAAI,EAAA,IAAAlG,EAAAmG,eACAD,EAAAE,aAAA,WACAF,EAAAG,KAAA,sCAAsCjF,GAAA,GACtC8E,EAAAI,KAAA,MACA,IAAAZ,EAAAQ,EAAAK,SAAAb,KAEA,OADAA,EAAAxD,WAAA2D,SACAH,GAtCA,CAiEG1F,IAAAmF,UAyEH,SAAA5C,EAAAa,GAEA,IADA,IAAAoD,KACA1B,EAAA,EAAA2B,EAAArD,EAAA8B,OAAsCJ,EAAA2B,EAAQ3B,IAAA,CAC9C,IAAA4B,EAAAtD,EAAA0B,GACA0B,EAAAE,EAAAC,MAAAD,EAAApD,MAEA,OAAAkD,EAWA,SAAA7C,EAAAL,GACA,OAAAA,EACAsD,QAAA,cACAA,QAAA1C,EAAA,SAAAZ,GAGA,kBAFAA,EAAAuD,WAAA,GAEA,QADAvD,EAAAuD,WAAA,GACA,oBAEAD,QAAAzC,EAAA,SAAAb,GACA,WAAAA,EAAAuD,WAAA,SAEAD,QAAA,aACAA,QAAA,aAoEA,SAAAZ,EAAA/D,GACA,KAAAA,GAAA,CACA,GAAAA,EAAAE,WAAAnC,EAAA6D,KAAAiD,aAEA,IADA,IAAA1D,EAAAnB,EAAAO,WACAsC,EAAA,EAAAiC,EAAA3D,EAAA8B,OAAyCJ,EAAAiC,EAAOjC,IAAA,CAChD,IAAAkC,EAAA5D,EAAA0B,GACAmC,EAAAD,EAAAL,KAAArE,cACA,cAAA2E,GAAA,IAAAA,EAAAC,YAAA,YACAjF,EAAAkF,oBAAAH,GACAlC,IACAiC,KAKA,IAAApE,EAAAV,EAAAC,WACAS,GACAqD,EAAArD,GAGAV,EAAAY,EAAA,cAAAZ,IAIA,SAAAY,EAAAuE,EAAAnF,GAEA,IAAAU,EAAAV,EAAAmF,GACA,GAAAzE,GAAAnC,EAAA6G,KAAApF,EAAAU,GACA,MAAAhC,EAAA,yEAAoGsB,EAAAqF,WAAArF,EAAAsF,WAEpG,OAAA5E,KAeA6E,MAASC,eAAA,UAiITxH,EAAAH,OAAA,cAAA4H,OAAA,8BAAAC,GACA,IAAAC,EACA,4FACAC,EAAA,YAEAC,EAAA7H,EAAAW,SAAA,SACAP,EAAAJ,EAAAI,UACA0H,EAAA9H,EAAA8H,WACAC,EAAA/H,EAAA+H,SACAC,EAAAhI,EAAAgI,SAEA,gBAAAC,EAAAC,EAAA3F,GACA,SAAA0F,GAAA,KAAAA,EAAA,OAAAA,EACA,IAAAD,EAAAC,GAAA,MAAAJ,EAAA,gDAA0FI,GAY1F,IAVA,IAKAE,EAGAC,EACAvD,EATAwD,EACAP,EAAAvF,KACAwF,EAAAxF,GAAA,WAA6D,OAAAA,GAC7D,WAA2C,UAG3C+F,EAAAL,EACA9G,KAGAgH,EAAAG,EAAAH,MAAAR,IAEAS,EAAAD,EAAA,GAEAA,EAAA,IAAAA,EAAA,KACAC,GAAAD,EAAA,wBAAAC,GAEAvD,EAAAsD,EAAAI,MACAC,EAAAF,EAAAG,OAAA,EAAA5D,IACA6D,EAAAN,EAAAD,EAAA,GAAAxB,QAAAiB,EAAA,KACAU,IAAAK,UAAA9D,EAAAsD,EAAA,GAAAlD,QAGA,OADAuD,EAAAF,GACAZ,EAAAvG,EAAAK,KAAA,KAEA,SAAAgH,EAAAP,GApLA,IAAAzF,EACApB,EAoLA6G,GAGA9G,EAAA8B,MAxLAT,EAwLAyF,EAtLAxH,EADAW,KACAd,GACAkC,SACApB,EAAAI,KAAA,MAuLA,SAAAkH,EAAAN,EAAAH,GACA,IAAA3E,EAAAsF,EAAAP,EAAAD,GAGA,IAAA9E,KAFAnC,EAAA8B,KAAA,OAEA2F,EACAzH,EAAA8B,KAAAK,EAAA,KAAAsF,EAAAtF,GAAA,OAGAlD,EAAA8H,IAAA,WAAAU,GACAzH,EAAA8B,KAAA,WACAiF,EACA,MAEA/G,EAAA8B,KAAA,SACAmF,EAAAzB,QAAA,eACA,MACA6B,EAAAP,GACA9G,EAAA8B,KAAA,aArxBA,CA2xBClD,cAAAC,uIC3xBDJ,EAAA,KACAA,EAAA,IACA,QAAAA,EAAA,UAEAA,EAAA,UACAA,EAAA,UACAA,EAAA,QACAA,EAAA,SAGAA,EAAA,UAEAA,EAAA,UACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,UACAA,EAAA,SACAA,EAAA,QACAA,EAAA,SACAA,EAAA,SACAA,EAAA,SACAA,EAAA,wDACAA,EAAA,KAzBA,IAAME,KA6BNA,EAAQD,OAASG,QAAQH,OAAO,OAC9BgJ,UAAShJ,OAAO6G,KAChBoC,UAAcpC,KACdqC,UAAqBrC,KACrBsC,UAAgBtC,KAChB,eAWF5G,EAAQmJ,uBACNC,UACE3C,IAAO,sBACP4C,KAAQ,wBAEVC,WAAY,4BACZC,aAAc,OACdC,YAAa,8BAGfxJ,EAAQD,OAAO0J,UAAU,kBAAmBzJ,EAAQmJ,uBAWpDnJ,EAAQ0J,uBAAyB,SAASC,EAAQC,EAAUC,EAC1DC,GAAS,IAAAC,EAAA/I,KAMTA,KAAKyF,IAMLzF,KAAKqI,KAMLrI,KAAKgJ,gBAAkB,KAMvBhJ,KAAKiJ,yBAA2B,KAOhCjJ,KAAKkJ,uBAAyB,KAM9BlJ,KAAKmJ,yBAA2B,KAGhC,IAAMC,GACJC,GAAMR,EAAKS,YAAY,2BACvBC,GAAMV,EAAKS,YAAY,uCAEnBE,GACJH,GAAMR,EAAKS,YAAY,6EAEvBC,GAAMV,EAAKS,YAAY,iGAGnBG,GACJJ,GAAMR,EAAKS,YAAY,iFAEvBC,GAAMV,EAAKS,YAAY,mGAGnBI,GACJL,GAAMR,EAAKS,YAAY,oBACvBC,GAAMV,EAAKS,YAAY,wBAIrBN,EAAkB9J,QAAQyK,QAC5B,qDACFX,EAAkBJ,EAASI,EAATJ,CAA0BD,GAC5C,IAAIM,EAA2B/J,QAAQyK,QACrC,8DACFV,EAA2BL,EAASK,EAATL,CAAmCD,GAC9D,IAAIO,EAAyBhK,QAAQyK,QACnC,4DACFT,EAAyBN,EAASM,EAATN,CAAiCD,GAC1D,IAAIQ,EAA2BjK,QAAQyK,QACrC,8DACFR,EAA2BP,EAASO,EAATP,CAAmCD,GAI9DA,EAAOiB,OAAO,kBAAMb,EAAKV,MAAM,SAACwB,GAC9Bd,EAAKC,gBAAkBI,EAAiBS,GACxCd,EAAKE,yBAA2BO,EAA0BK,GAC1Dd,EAAKG,uBAAyBO,EAAwBI,GACtDd,EAAKI,yBAA2BO,EAA0BG,KAG5D,IAAMC,EAAQ,IAAIC,WAChBC,KAAM,IAAIC,WACRC,MAAO,6BAETC,OAAQ,IAAIC,WACVF,MAAO,qBACPG,UAAW,GAAI,IACfC,MAAO,IAETC,MAAO,IAAIC,WACTC,OAAQ,EACRN,OAAQ,IAAIC,WACVF,MAAO,uBAETF,KAAM,IAAIC,WACRC,MAAO,iCASblK,KAAK0K,cAAgB,IAAIC,UAA6B7B,EAAQ,mBAC5D8B,YAAad,EACbe,SAAU7B,EAAgB,GAC1B8B,YAAa7B,EAAyB,KAGxCjJ,KAAK0K,cAAcK,WAAU,GAC7BC,UAAiBC,YAAYjL,KAAK0K,eAMlC1K,KAAKkL,YAAc,IAAIC,UAA2BrC,EAAQ,mBACxD8B,YAAad,EACbe,SAAU7B,EAAgB,GAC1B8B,YAAa5B,EAAuB,KAGtClJ,KAAKkL,YAAYH,WAAU,GAC3BC,UAAiBC,YAAYjL,KAAKkL,aAMlClL,KAAKoL,cAAgB,IAAIC,UACvBvC,EAAQ,kBAAmBA,EAAQ,eACjC8B,YAAad,EACbe,SAAU7B,EAAgB,GAC1B8B,YAAa3B,EAAyB,KAG1CnJ,KAAKoL,cAAcL,WAAU,GAC7BC,UAAiBC,YAAYjL,KAAKoL,eAMlCpL,KAAKoL,cAAcE,GAAG,aAAc,SAACC,GACxBA,EAAInE,OAAOoE,oBACnBvK,WAAa,yBAvJpBjC,EAAQ0J,sEA2JR1J,EAAQD,OAAOuJ,WAAW,4BAA6BtJ,EAAQ0J,wBAE/D1J,EAAQ0J,uBAAuB3F,UAAU0I,QAAU,WACjDzL,KAAKyF,IAAIiG,eAAe1L,KAAK0K,eAC7B1K,KAAKyF,IAAIiG,eAAe1L,KAAKkL,aAC7BlL,KAAKyF,IAAIiG,eAAe1L,KAAKoL,gBAO/BpM,EAAQ2M,eAAiB,WAMvB3L,KAAKqI,KAAO,KAMZrI,KAAKyF,IAAM,IAAImG,WACbC,QACE,IAAIC,WACFC,OAAQ,IAAIC,aAGhBC,KAAM,IAAIC,WACRC,QAAS,iBAAkB,mBAC3BC,KAAM,OAIVpM,KAAKyF,IAAI4G,WAAW,IAAIC,YAI1BtN,EAAQD,OAAOuJ,WAAW,iBAAkBtJ,EAAQ2M,0BAGrC3M,kHC3QfuN,EAAAzN,EAAA,GAeA,MAAA0N,EAAA,SAAAC,GAEA,MAAAC,EAAAD,MAEA,IAAAE,EAEAA,OADA9L,IAAA6L,EAAAC,aACAD,EAAAC,cAEAH,EAAAI,aAGA,MAAAC,OAAAhM,IAAA6L,EAAAG,YACAH,EAAAG,YAAA,YAEAvF,OAAAzG,IAAA6L,EAAApF,IACAoF,EAAApF,IAAA,uDAEAiF,EAAA,EAAAjG,KAAAtG,MACA2M,eACAG,UAAAJ,EAAAI,UACAD,cACAE,YAAAlM,IAAA6L,EAAAK,QAAAL,EAAAK,OACAC,aAAAnM,IAAA6L,EAAAM,QAAAN,EAAAM,QAAA,GACAC,2BAAAP,EAAAO,2BACAC,iBAAAR,EAAAQ,iBACA5F,MACA6F,MAAAT,EAAAS,SAKAC,OAAAC,EAAA,SAAAD,CAAAZ,EAAAD,EAAA,GAUAC,EAAAI,YAAA,2FAGAU,EAAA,6DC3DAC,EAAAzO,EAAA,IA6BA,MAAA0O,EAAA,SAAAf,GACA,MAAAC,EAAAD,MACAgB,OAAA5M,IAAA6L,EAAAe,WACAf,EAAAe,WAAA,YAEAC,OAAA7M,IAAA6L,EAAAgB,SAAAhB,EAAAgB,SACAH,EAAA,EAAAI,WACAC,OAAAL,EAAA,EAAAM,qBAAAJ,GACAT,QAAAN,EAAAM,QACAc,QAAApB,EAAAoB,QACAC,SAAArB,EAAAqB,WAGAC,EAAA,EAAA1H,KAAAtG,MACA2M,aAAAD,EAAAC,aACAG,UAAAJ,EAAAI,UACAD,YAAAH,EAAAG,YACAE,OAAAL,EAAAK,OACAU,aACAR,2BAAAP,EAAAO,2BACAS,WACAR,iBAAAR,EAAAQ,iBACAe,eAAAvB,EAAAuB,eACAC,gBAAAxB,EAAAwB,gBACA5G,IAAAoF,EAAApF,IACA6G,KAAAzB,EAAAyB,KACAhB,WAAAtM,IAAA6L,EAAAS,OAAAT,EAAAS,MACAiB,WAAA1B,EAAA0B,cAKAhB,OAAAC,EAAA,SAAAD,CAAAI,EAAAQ,EAAA,GACAV,EAAA","file":"measure.880d1fe7ad8f2493ee3c.js","sourcesContent":["require('./angular-sanitize');\nmodule.exports = 'ngSanitize';\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-sanitize/index.js\n// module id = 109\n// module chunks = 2 3 7 8","/**\n * @license AngularJS v1.6.9\n * (c) 2010-2018 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular) {'use strict';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *     Any commits to this file should be reviewed with security in mind.  *\n *   Changes to this file can potentially create security vulnerabilities. *\n *          An approval from 2 Core members with history of modifying      *\n *                         this file is required.                          *\n *                                                                         *\n *  Does the change somehow allow for arbitrary javascript to be executed? *\n *    Or allows for someone to change the prototype of built-in objects?   *\n *     Or gives undesired access to variables likes document or window?    *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\nvar $sanitizeMinErr = angular.$$minErr('$sanitize');\nvar bind;\nvar extend;\nvar forEach;\nvar isDefined;\nvar lowercase;\nvar noop;\nvar nodeContains;\nvar htmlParser;\nvar htmlSanitizeWriter;\n\n/**\n * @ngdoc module\n * @name ngSanitize\n * @description\n *\n * The `ngSanitize` module provides functionality to sanitize HTML.\n *\n * See {@link ngSanitize.$sanitize `$sanitize`} for usage.\n */\n\n/**\n * @ngdoc service\n * @name $sanitize\n * @kind function\n *\n * @description\n *   Sanitizes an html string by stripping all potentially dangerous tokens.\n *\n *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are\n *   then serialized back to properly escaped html string. This means that no unsafe input can make\n *   it into the returned string.\n *\n *   The whitelist for URL sanitization of attribute values is configured using the functions\n *   `aHrefSanitizationWhitelist` and `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider\n *   `$compileProvider`}.\n *\n *   The input may also contain SVG markup if this is enabled via {@link $sanitizeProvider}.\n *\n * @param {string} html HTML input.\n * @returns {string} Sanitized HTML.\n *\n * @example\n   <example module=\"sanitizeExample\" deps=\"angular-sanitize.js\" name=\"sanitize-service\">\n   <file name=\"index.html\">\n     <script>\n         angular.module('sanitizeExample', ['ngSanitize'])\n           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {\n             $scope.snippet =\n               '<p style=\"color:blue\">an html\\n' +\n               '<em onmouseover=\"this.textContent=\\'PWN3D!\\'\">click here</em>\\n' +\n               'snippet</p>';\n             $scope.deliberatelyTrustDangerousSnippet = function() {\n               return $sce.trustAsHtml($scope.snippet);\n             };\n           }]);\n     </script>\n     <div ng-controller=\"ExampleController\">\n        Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <td>Directive</td>\n           <td>How</td>\n           <td>Source</td>\n           <td>Rendered</td>\n         </tr>\n         <tr id=\"bind-html-with-sanitize\">\n           <td>ng-bind-html</td>\n           <td>Automatically uses $sanitize</td>\n           <td><pre>&lt;div ng-bind-html=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind-html=\"snippet\"></div></td>\n         </tr>\n         <tr id=\"bind-html-with-trust\">\n           <td>ng-bind-html</td>\n           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>\n           <td>\n           <pre>&lt;div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"&gt;\n&lt;/div&gt;</pre>\n           </td>\n           <td><div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"></div></td>\n         </tr>\n         <tr id=\"bind-default\">\n           <td>ng-bind</td>\n           <td>Automatically escapes</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n       </div>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     it('should sanitize the html snippet by default', function() {\n       expect(element(by.css('#bind-html-with-sanitize div')).getAttribute('innerHTML')).\n         toBe('<p>an html\\n<em>click here</em>\\nsnippet</p>');\n     });\n\n     it('should inline raw snippet if bound to a trusted value', function() {\n       expect(element(by.css('#bind-html-with-trust div')).getAttribute('innerHTML')).\n         toBe(\"<p style=\\\"color:blue\\\">an html\\n\" +\n              \"<em onmouseover=\\\"this.textContent='PWN3D!'\\\">click here</em>\\n\" +\n              \"snippet</p>\");\n     });\n\n     it('should escape snippet without any filter', function() {\n       expect(element(by.css('#bind-default div')).getAttribute('innerHTML')).\n         toBe(\"&lt;p style=\\\"color:blue\\\"&gt;an html\\n\" +\n              \"&lt;em onmouseover=\\\"this.textContent='PWN3D!'\\\"&gt;click here&lt;/em&gt;\\n\" +\n              \"snippet&lt;/p&gt;\");\n     });\n\n     it('should update', function() {\n       element(by.model('snippet')).clear();\n       element(by.model('snippet')).sendKeys('new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-html-with-sanitize div')).getAttribute('innerHTML')).\n         toBe('new <b>text</b>');\n       expect(element(by.css('#bind-html-with-trust div')).getAttribute('innerHTML')).toBe(\n         'new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-default div')).getAttribute('innerHTML')).toBe(\n         \"new &lt;b onclick=\\\"alert(1)\\\"&gt;text&lt;/b&gt;\");\n     });\n   </file>\n   </example>\n */\n\n\n/**\n * @ngdoc provider\n * @name $sanitizeProvider\n * @this\n *\n * @description\n * Creates and configures {@link $sanitize} instance.\n */\nfunction $SanitizeProvider() {\n  var svgEnabled = false;\n\n  this.$get = ['$$sanitizeUri', function($$sanitizeUri) {\n    if (svgEnabled) {\n      extend(validElements, svgElements);\n    }\n    return function(html) {\n      var buf = [];\n      htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {\n        return !/^unsafe:/.test($$sanitizeUri(uri, isImage));\n      }));\n      return buf.join('');\n    };\n  }];\n\n\n  /**\n   * @ngdoc method\n   * @name $sanitizeProvider#enableSvg\n   * @kind function\n   *\n   * @description\n   * Enables a subset of svg to be supported by the sanitizer.\n   *\n   * <div class=\"alert alert-warning\">\n   *   <p>By enabling this setting without taking other precautions, you might expose your\n   *   application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned\n   *   outside of the containing element and be rendered over other elements on the page (e.g. a login\n   *   link). Such behavior can then result in phishing incidents.</p>\n   *\n   *   <p>To protect against these, explicitly setup `overflow: hidden` css rule for all potential svg\n   *   tags within the sanitized content:</p>\n   *\n   *   <br>\n   *\n   *   <pre><code>\n   *   .rootOfTheIncludedContent svg {\n   *     overflow: hidden !important;\n   *   }\n   *   </code></pre>\n   * </div>\n   *\n   * @param {boolean=} flag Enable or disable SVG support in the sanitizer.\n   * @returns {boolean|ng.$sanitizeProvider} Returns the currently configured value if called\n   *    without an argument or self for chaining otherwise.\n   */\n  this.enableSvg = function(enableSvg) {\n    if (isDefined(enableSvg)) {\n      svgEnabled = enableSvg;\n      return this;\n    } else {\n      return svgEnabled;\n    }\n  };\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n  // Private stuff\n  //////////////////////////////////////////////////////////////////////////////////////////////////\n\n  bind = angular.bind;\n  extend = angular.extend;\n  forEach = angular.forEach;\n  isDefined = angular.isDefined;\n  lowercase = angular.lowercase;\n  noop = angular.noop;\n\n  htmlParser = htmlParserImpl;\n  htmlSanitizeWriter = htmlSanitizeWriterImpl;\n\n  nodeContains = window.Node.prototype.contains || /** @this */ function(arg) {\n    // eslint-disable-next-line no-bitwise\n    return !!(this.compareDocumentPosition(arg) & 16);\n  };\n\n  // Regular Expressions for parsing tags and attributes\n  var SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\n    // Match everything outside of normal chars and \" (quote character)\n    NON_ALPHANUMERIC_REGEXP = /([^#-~ |!])/g;\n\n\n  // Good source of info about elements and attributes\n  // http://dev.w3.org/html5/spec/Overview.html#semantics\n  // http://simon.html5.org/html-elements\n\n  // Safe Void Elements - HTML5\n  // http://dev.w3.org/html5/spec/Overview.html#void-elements\n  var voidElements = toMap('area,br,col,hr,img,wbr');\n\n  // Elements that you can, intentionally, leave open (and which close themselves)\n  // http://dev.w3.org/html5/spec/Overview.html#optional-tags\n  var optionalEndTagBlockElements = toMap('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr'),\n      optionalEndTagInlineElements = toMap('rp,rt'),\n      optionalEndTagElements = extend({},\n                                              optionalEndTagInlineElements,\n                                              optionalEndTagBlockElements);\n\n  // Safe Block Elements - HTML5\n  var blockElements = extend({}, optionalEndTagBlockElements, toMap('address,article,' +\n          'aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +\n          'h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul'));\n\n  // Inline Elements - HTML5\n  var inlineElements = extend({}, optionalEndTagInlineElements, toMap('a,abbr,acronym,b,' +\n          'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,' +\n          'samp,small,span,strike,strong,sub,sup,time,tt,u,var'));\n\n  // SVG Elements\n  // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements\n  // Note: the elements animate,animateColor,animateMotion,animateTransform,set are intentionally omitted.\n  // They can potentially allow for arbitrary javascript to be executed. See #11290\n  var svgElements = toMap('circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,' +\n          'hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,' +\n          'radialGradient,rect,stop,svg,switch,text,title,tspan');\n\n  // Blocked Elements (will be stripped)\n  var blockedElements = toMap('script,style');\n\n  var validElements = extend({},\n                                     voidElements,\n                                     blockElements,\n                                     inlineElements,\n                                     optionalEndTagElements);\n\n  //Attributes that have href and hence need to be sanitized\n  var uriAttrs = toMap('background,cite,href,longdesc,src,xlink:href,xml:base');\n\n  var htmlAttrs = toMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' +\n      'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' +\n      'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' +\n      'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' +\n      'valign,value,vspace,width');\n\n  // SVG attributes (without \"id\" and \"name\" attributes)\n  // https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes\n  var svgAttrs = toMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' +\n      'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' +\n      'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' +\n      'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' +\n      'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' +\n      'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' +\n      'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' +\n      'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' +\n      'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' +\n      'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' +\n      'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' +\n      'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' +\n      'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' +\n      'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' +\n      'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan', true);\n\n  var validAttrs = extend({},\n                                  uriAttrs,\n                                  svgAttrs,\n                                  htmlAttrs);\n\n  function toMap(str, lowercaseKeys) {\n    var obj = {}, items = str.split(','), i;\n    for (i = 0; i < items.length; i++) {\n      obj[lowercaseKeys ? lowercase(items[i]) : items[i]] = true;\n    }\n    return obj;\n  }\n\n  /**\n   * Create an inert document that contains the dirty HTML that needs sanitizing\n   * Depending upon browser support we use one of three strategies for doing this.\n   * Support: Safari 10.x -> XHR strategy\n   * Support: Firefox -> DomParser strategy\n   */\n  var getInertBodyElement /* function(html: string): HTMLBodyElement */ = (function(window, document) {\n    var inertDocument;\n    if (document && document.implementation) {\n      inertDocument = document.implementation.createHTMLDocument('inert');\n    } else {\n      throw $sanitizeMinErr('noinert', 'Can\\'t create an inert html document');\n    }\n    var inertBodyElement = (inertDocument.documentElement || inertDocument.getDocumentElement()).querySelector('body');\n\n    // Check for the Safari 10.1 bug - which allows JS to run inside the SVG G element\n    inertBodyElement.innerHTML = '<svg><g onload=\"this.parentNode.remove()\"></g></svg>';\n    if (!inertBodyElement.querySelector('svg')) {\n      return getInertBodyElement_XHR;\n    } else {\n      // Check for the Firefox bug - which prevents the inner img JS from being sanitized\n      inertBodyElement.innerHTML = '<svg><p><style><img src=\"</style><img src=x onerror=alert(1)//\">';\n      if (inertBodyElement.querySelector('svg img')) {\n        return getInertBodyElement_DOMParser;\n      } else {\n        return getInertBodyElement_InertDocument;\n      }\n    }\n\n    function getInertBodyElement_XHR(html) {\n      // We add this dummy element to ensure that the rest of the content is parsed as expected\n      // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the `<head>` tag.\n      html = '<remove></remove>' + html;\n      try {\n        html = encodeURI(html);\n      } catch (e) {\n        return undefined;\n      }\n      var xhr = new window.XMLHttpRequest();\n      xhr.responseType = 'document';\n      xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);\n      xhr.send(null);\n      var body = xhr.response.body;\n      body.firstChild.remove();\n      return body;\n    }\n\n    function getInertBodyElement_DOMParser(html) {\n      // We add this dummy element to ensure that the rest of the content is parsed as expected\n      // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the `<head>` tag.\n      html = '<remove></remove>' + html;\n      try {\n        var body = new window.DOMParser().parseFromString(html, 'text/html').body;\n        body.firstChild.remove();\n        return body;\n      } catch (e) {\n        return undefined;\n      }\n    }\n\n    function getInertBodyElement_InertDocument(html) {\n      inertBodyElement.innerHTML = html;\n\n      // Support: IE 9-11 only\n      // strip custom-namespaced attributes on IE<=11\n      if (document.documentMode) {\n        stripCustomNsAttrs(inertBodyElement);\n      }\n\n      return inertBodyElement;\n    }\n  })(window, window.document);\n\n  /**\n   * @example\n   * htmlParser(htmlString, {\n   *     start: function(tag, attrs) {},\n   *     end: function(tag) {},\n   *     chars: function(text) {},\n   *     comment: function(text) {}\n   * });\n   *\n   * @param {string} html string\n   * @param {object} handler\n   */\n  function htmlParserImpl(html, handler) {\n    if (html === null || html === undefined) {\n      html = '';\n    } else if (typeof html !== 'string') {\n      html = '' + html;\n    }\n\n    var inertBodyElement = getInertBodyElement(html);\n    if (!inertBodyElement) return '';\n\n    //mXSS protection\n    var mXSSAttempts = 5;\n    do {\n      if (mXSSAttempts === 0) {\n        throw $sanitizeMinErr('uinput', 'Failed to sanitize html because the input is unstable');\n      }\n      mXSSAttempts--;\n\n      // trigger mXSS if it is going to happen by reading and writing the innerHTML\n      html = inertBodyElement.innerHTML;\n      inertBodyElement = getInertBodyElement(html);\n    } while (html !== inertBodyElement.innerHTML);\n\n    var node = inertBodyElement.firstChild;\n    while (node) {\n      switch (node.nodeType) {\n        case 1: // ELEMENT_NODE\n          handler.start(node.nodeName.toLowerCase(), attrToMap(node.attributes));\n          break;\n        case 3: // TEXT NODE\n          handler.chars(node.textContent);\n          break;\n      }\n\n      var nextNode;\n      if (!(nextNode = node.firstChild)) {\n        if (node.nodeType === 1) {\n          handler.end(node.nodeName.toLowerCase());\n        }\n        nextNode = getNonDescendant('nextSibling', node);\n        if (!nextNode) {\n          while (nextNode == null) {\n            node = getNonDescendant('parentNode', node);\n            if (node === inertBodyElement) break;\n            nextNode = getNonDescendant('nextSibling', node);\n            if (node.nodeType === 1) {\n              handler.end(node.nodeName.toLowerCase());\n            }\n          }\n        }\n      }\n      node = nextNode;\n    }\n\n    while ((node = inertBodyElement.firstChild)) {\n      inertBodyElement.removeChild(node);\n    }\n  }\n\n  function attrToMap(attrs) {\n    var map = {};\n    for (var i = 0, ii = attrs.length; i < ii; i++) {\n      var attr = attrs[i];\n      map[attr.name] = attr.value;\n    }\n    return map;\n  }\n\n\n  /**\n   * Escapes all potentially dangerous characters, so that the\n   * resulting string can be safely inserted into attribute or\n   * element text.\n   * @param value\n   * @returns {string} escaped text\n   */\n  function encodeEntities(value) {\n    return value.\n      replace(/&/g, '&amp;').\n      replace(SURROGATE_PAIR_REGEXP, function(value) {\n        var hi = value.charCodeAt(0);\n        var low = value.charCodeAt(1);\n        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n      }).\n      replace(NON_ALPHANUMERIC_REGEXP, function(value) {\n        return '&#' + value.charCodeAt(0) + ';';\n      }).\n      replace(/</g, '&lt;').\n      replace(/>/g, '&gt;');\n  }\n\n  /**\n   * create an HTML/XML writer which writes to buffer\n   * @param {Array} buf use buf.join('') to get out sanitized html string\n   * @returns {object} in the form of {\n   *     start: function(tag, attrs) {},\n   *     end: function(tag) {},\n   *     chars: function(text) {},\n   *     comment: function(text) {}\n   * }\n   */\n  function htmlSanitizeWriterImpl(buf, uriValidator) {\n    var ignoreCurrentElement = false;\n    var out = bind(buf, buf.push);\n    return {\n      start: function(tag, attrs) {\n        tag = lowercase(tag);\n        if (!ignoreCurrentElement && blockedElements[tag]) {\n          ignoreCurrentElement = tag;\n        }\n        if (!ignoreCurrentElement && validElements[tag] === true) {\n          out('<');\n          out(tag);\n          forEach(attrs, function(value, key) {\n            var lkey = lowercase(key);\n            var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');\n            if (validAttrs[lkey] === true &&\n              (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {\n              out(' ');\n              out(key);\n              out('=\"');\n              out(encodeEntities(value));\n              out('\"');\n            }\n          });\n          out('>');\n        }\n      },\n      end: function(tag) {\n        tag = lowercase(tag);\n        if (!ignoreCurrentElement && validElements[tag] === true && voidElements[tag] !== true) {\n          out('</');\n          out(tag);\n          out('>');\n        }\n        // eslint-disable-next-line eqeqeq\n        if (tag == ignoreCurrentElement) {\n          ignoreCurrentElement = false;\n        }\n      },\n      chars: function(chars) {\n        if (!ignoreCurrentElement) {\n          out(encodeEntities(chars));\n        }\n      }\n    };\n  }\n\n\n  /**\n   * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1' attribute to declare\n   * ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo'). This is undesirable since we don't want\n   * to allow any of these custom attributes. This method strips them all.\n   *\n   * @param node Root element to process\n   */\n  function stripCustomNsAttrs(node) {\n    while (node) {\n      if (node.nodeType === window.Node.ELEMENT_NODE) {\n        var attrs = node.attributes;\n        for (var i = 0, l = attrs.length; i < l; i++) {\n          var attrNode = attrs[i];\n          var attrName = attrNode.name.toLowerCase();\n          if (attrName === 'xmlns:ns1' || attrName.lastIndexOf('ns1:', 0) === 0) {\n            node.removeAttributeNode(attrNode);\n            i--;\n            l--;\n          }\n        }\n      }\n\n      var nextNode = node.firstChild;\n      if (nextNode) {\n        stripCustomNsAttrs(nextNode);\n      }\n\n      node = getNonDescendant('nextSibling', node);\n    }\n  }\n\n  function getNonDescendant(propName, node) {\n    // An element is clobbered if its `propName` property points to one of its descendants\n    var nextNode = node[propName];\n    if (nextNode && nodeContains.call(node, nextNode)) {\n      throw $sanitizeMinErr('elclob', 'Failed to sanitize html because the element is clobbered: {0}', node.outerHTML || node.outerText);\n    }\n    return nextNode;\n  }\n}\n\nfunction sanitizeText(chars) {\n  var buf = [];\n  var writer = htmlSanitizeWriter(buf, noop);\n  writer.chars(chars);\n  return buf.join('');\n}\n\n\n// define ngSanitize module and register $sanitize service\nangular.module('ngSanitize', [])\n  .provider('$sanitize', $SanitizeProvider)\n  .info({ angularVersion: '1.6.9' });\n\n/**\n * @ngdoc filter\n * @name linky\n * @kind function\n *\n * @description\n * Finds links in text input and turns them into html links. Supports `http/https/ftp/sftp/mailto` and\n * plain email address links.\n *\n * Requires the {@link ngSanitize `ngSanitize`} module to be installed.\n *\n * @param {string} text Input text.\n * @param {string} [target] Window (`_blank|_self|_parent|_top`) or named frame to open links in.\n * @param {object|function(url)} [attributes] Add custom attributes to the link element.\n *\n *    Can be one of:\n *\n *    - `object`: A map of attributes\n *    - `function`: Takes the url as a parameter and returns a map of attributes\n *\n *    If the map of attributes contains a value for `target`, it overrides the value of\n *    the target parameter.\n *\n *\n * @returns {string} Html-linkified and {@link $sanitize sanitized} text.\n *\n * @usage\n   <span ng-bind-html=\"linky_expression | linky\"></span>\n *\n * @example\n   <example module=\"linkyExample\" deps=\"angular-sanitize.js\" name=\"linky-filter\">\n     <file name=\"index.html\">\n       <div ng-controller=\"ExampleController\">\n       Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <th>Filter</th>\n           <th>Source</th>\n           <th>Rendered</th>\n         </tr>\n         <tr id=\"linky-filter\">\n           <td>linky filter</td>\n           <td>\n             <pre>&lt;div ng-bind-html=\"snippet | linky\"&gt;<br>&lt;/div&gt;</pre>\n           </td>\n           <td>\n             <div ng-bind-html=\"snippet | linky\"></div>\n           </td>\n         </tr>\n         <tr id=\"linky-target\">\n          <td>linky target</td>\n          <td>\n            <pre>&lt;div ng-bind-html=\"snippetWithSingleURL | linky:'_blank'\"&gt;<br>&lt;/div&gt;</pre>\n          </td>\n          <td>\n            <div ng-bind-html=\"snippetWithSingleURL | linky:'_blank'\"></div>\n          </td>\n         </tr>\n         <tr id=\"linky-custom-attributes\">\n          <td>linky custom attributes</td>\n          <td>\n            <pre>&lt;div ng-bind-html=\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\"&gt;<br>&lt;/div&gt;</pre>\n          </td>\n          <td>\n            <div ng-bind-html=\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\"></div>\n          </td>\n         </tr>\n         <tr id=\"escaped-html\">\n           <td>no filter</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n     </file>\n     <file name=\"script.js\">\n       angular.module('linkyExample', ['ngSanitize'])\n         .controller('ExampleController', ['$scope', function($scope) {\n           $scope.snippet =\n             'Pretty text with some links:\\n' +\n             'http://angularjs.org/,\\n' +\n             'mailto:us@somewhere.org,\\n' +\n             'another@somewhere.org,\\n' +\n             'and one more: ftp://127.0.0.1/.';\n           $scope.snippetWithSingleURL = 'http://angularjs.org/';\n         }]);\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should linkify the snippet with urls', function() {\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);\n       });\n\n       it('should not linkify snippet without the linky filter', function() {\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);\n       });\n\n       it('should update', function() {\n         element(by.model('snippet')).clear();\n         element(by.model('snippet')).sendKeys('new http://link.');\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('new http://link.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())\n             .toBe('new http://link.');\n       });\n\n       it('should work with the target property', function() {\n        expect(element(by.id('linky-target')).\n            element(by.binding(\"snippetWithSingleURL | linky:'_blank'\")).getText()).\n            toBe('http://angularjs.org/');\n        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');\n       });\n\n       it('should optionally add custom attributes', function() {\n        expect(element(by.id('linky-custom-attributes')).\n            element(by.binding(\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\")).getText()).\n            toBe('http://angularjs.org/');\n        expect(element(by.css('#linky-custom-attributes a')).getAttribute('rel')).toEqual('nofollow');\n       });\n     </file>\n   </example>\n */\nangular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {\n  var LINKY_URL_REGEXP =\n        /((s?ftp|https?):\\/\\/|(www\\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\\S*[^\\s.;,(){}<>\"\\u201d\\u2019]/i,\n      MAILTO_REGEXP = /^mailto:/i;\n\n  var linkyMinErr = angular.$$minErr('linky');\n  var isDefined = angular.isDefined;\n  var isFunction = angular.isFunction;\n  var isObject = angular.isObject;\n  var isString = angular.isString;\n\n  return function(text, target, attributes) {\n    if (text == null || text === '') return text;\n    if (!isString(text)) throw linkyMinErr('notstring', 'Expected string but received: {0}', text);\n\n    var attributesFn =\n      isFunction(attributes) ? attributes :\n      isObject(attributes) ? function getAttributesObject() {return attributes;} :\n      function getEmptyAttributesObject() {return {};};\n\n    var match;\n    var raw = text;\n    var html = [];\n    var url;\n    var i;\n    while ((match = raw.match(LINKY_URL_REGEXP))) {\n      // We can not end in these as they are sometimes found at the end of the sentence\n      url = match[0];\n      // if we did not match ftp/http/www/mailto then assume mailto\n      if (!match[2] && !match[4]) {\n        url = (match[3] ? 'http://' : 'mailto:') + url;\n      }\n      i = match.index;\n      addText(raw.substr(0, i));\n      addLink(url, match[0].replace(MAILTO_REGEXP, ''));\n      raw = raw.substring(i + match[0].length);\n    }\n    addText(raw);\n    return $sanitize(html.join(''));\n\n    function addText(text) {\n      if (!text) {\n        return;\n      }\n      html.push(sanitizeText(text));\n    }\n\n    function addLink(url, text) {\n      var key, linkAttributes = attributesFn(url);\n      html.push('<a ');\n\n      for (key in linkAttributes) {\n        html.push(key + '=\"' + linkAttributes[key] + '\" ');\n      }\n\n      if (isDefined(target) && !('target' in linkAttributes)) {\n        html.push('target=\"',\n                  target,\n                  '\" ');\n      }\n      html.push('href=\"',\n                url.replace(/\"/g, '&quot;'),\n                '\">');\n      addText(text);\n      html.push('</a>');\n    }\n  };\n}]);\n\n\n})(window, window.angular);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/angular-sanitize/angular-sanitize.js\n// module id = 110\n// module chunks = 2 3 7 8","/**\n * @module app.measure\n */\nconst exports = {};\n\nimport './measure.css';\nimport './common_dependencies.js';\nimport ngeoInteractionMeasureArea from 'ngeo/interaction/MeasureArea.js';\n\nimport ngeoInteractionMeasureAzimut from 'ngeo/interaction/MeasureAzimut.js';\nimport ngeoInteractionMeasureLength from 'ngeo/interaction/MeasureLength.js';\nimport ngeoBase from 'ngeo/index.js';\nimport ngeoMapModule from 'ngeo/map/module.js';\n\n/** @suppress {extraRequire} */\nimport ngeoMiscBtnComponent from 'ngeo/misc/btnComponent.js';\n\nimport ngeoMiscDecorate from 'ngeo/misc/decorate.js';\nimport ngeoMiscFilters from 'ngeo/misc/filters.js';\nimport olMap from 'ol/Map.js';\nimport olView from 'ol/View.js';\nimport olControlScaleLine from 'ol/control/ScaleLine.js';\nimport olLayerTile from 'ol/layer/Tile.js';\nimport olSourceOSM from 'ol/source/OSM.js';\nimport olStyleStyle from 'ol/style/Style.js';\nimport olStyleCircle from 'ol/style/Circle.js';\nimport olStyleStroke from 'ol/style/Stroke.js';\nimport olStyleFill from 'ol/style/Fill.js';\nimport 'angular-sanitize';\n\n\n/** @type {!angular.Module} **/\nexports.module = angular.module('app', [\n  ngeoBase.module.name,\n  ngeoMapModule.name,\n  ngeoMiscBtnComponent.name,\n  ngeoMiscFilters.name,\n  'ngSanitize',\n]);\n\n\n/**\n * App-specific component wrapping the measure tools. The component's\n * controller has a property \"map\" including a reference to the OpenLayers\n * map.\n *\n * @type {!angular.Component}\n */\nexports.measuretoolsComponent = {\n  bindings: {\n    'map': '=appMeasuretoolsMap',\n    'lang': '=appMeasuretoolsLang'\n  },\n  controller: 'AppMeasuretoolsController',\n  controllerAs: 'ctrl',\n  templateUrl: 'partials/measuretools.html'\n};\n\nexports.module.component('appMeasuretools', exports.measuretoolsComponent);\n\n\n/**\n * @param {!angular.Scope} $scope Angular scope.\n * @param {angular.$compile} $compile Angular compile service.\n * @param {angular.$sce} $sce Angular sce service.\n * @param {angular.$filter} $filter Angular filter service.\n * @constructor\n * @ngInject\n */\nexports.MeasuretoolsController = function($scope, $compile, $sce,\n  $filter) {\n\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map;\n\n  /**\n   * @type {string}\n   * @export\n   */\n  this.lang;\n\n  /**\n   * @type {Object}\n   * @export\n   */\n  this.measureStartMsg = null;\n\n  /**\n   * @type {Object}\n   * @export\n   */\n  this.measureLengthContinueMsg = null;\n\n\n  /**\n   * @type {Object}\n   * @export\n   */\n  this.measureAreaContinueMsg = null;\n\n  /**\n   * @type {Object}\n   * @export\n   */\n  this.measureAzimutContinueMsg = null;\n\n  // Translations for the measure tools' tooltips.\n  const measureStartMsgs = {\n    'en': $sce.trustAsHtml('Click to start drawing.'),\n    'fr': $sce.trustAsHtml('Cliquer pour commencer à dessiner.')\n  };\n  const measureLengthContinueMsgs = {\n    'en': $sce.trustAsHtml('Click to continue drawing.<br>' +\n        'Double-click or click last point to finish.'),\n    'fr': $sce.trustAsHtml('Cliquer pour continuer le dessin.<br>' +\n        'Double-cliquer ou cliquer sur dernier point pour finir.')\n  };\n  const measureAreaContinueMsgs = {\n    'en': $sce.trustAsHtml('Click to continue drawing.<br>' +\n        'Double-click or click starting point to finish.'),\n    'fr': $sce.trustAsHtml('Cliquer pour continuer le dessin.<br>' +\n        'Double-cliquer ou cliquer sur point de départ pour finir.')\n  };\n  const measureAzimutContinueMsgs = {\n    'en': $sce.trustAsHtml('Click to finish.'),\n    'fr': $sce.trustAsHtml('Cliquer pour finir.')\n  };\n\n  // Create elements for the measure tools' tooltips.\n  let measureStartMsg = angular.element(\n    '<span ng-bind-html=\"ctrl.measureStartMsg\"></span>');\n  measureStartMsg = $compile(measureStartMsg)($scope);\n  let measureLengthContinueMsg = angular.element(\n    '<span ng-bind-html=\"ctrl.measureLengthContinueMsg\"></span>');\n  measureLengthContinueMsg = $compile(measureLengthContinueMsg)($scope);\n  let measureAreaContinueMsg = angular.element(\n    '<span ng-bind-html=\"ctrl.measureAreaContinueMsg\"></span>');\n  measureAreaContinueMsg = $compile(measureAreaContinueMsg)($scope);\n  let measureAzimutContinueMsg = angular.element(\n    '<span ng-bind-html=\"ctrl.measureAzimutContinueMsg\"></span>');\n  measureAzimutContinueMsg = $compile(measureAzimutContinueMsg)($scope);\n\n  // Watch the \"lang\" property and update the toolip messages\n  // based on the selected language.\n  $scope.$watch(() => this.lang, (newVal) => {\n    this.measureStartMsg = measureStartMsgs[newVal];\n    this.measureLengthContinueMsg = measureLengthContinueMsgs[newVal];\n    this.measureAreaContinueMsg = measureAreaContinueMsgs[newVal];\n    this.measureAzimutContinueMsg = measureAzimutContinueMsgs[newVal];\n  });\n\n  const style = new olStyleStyle({\n    fill: new olStyleFill({\n      color: 'rgba(255, 255, 255, 0.2)'\n    }),\n    stroke: new olStyleStroke({\n      color: 'rgba(0, 0, 0, 0.5)',\n      lineDash: [10, 10],\n      width: 2\n    }),\n    image: new olStyleCircle({\n      radius: 5,\n      stroke: new olStyleStroke({\n        color: 'rgba(0, 0, 0, 0.7)'\n      }),\n      fill: new olStyleFill({\n        color: 'rgba(255, 255, 255, 0.2)'\n      })\n    })\n  });\n\n  /**\n   * @type {ngeo.interaction.MeasureLength}\n   * @export\n   */\n  this.measureLength = new ngeoInteractionMeasureLength($filter('ngeoUnitPrefix'), {\n    sketchStyle: style,\n    startMsg: measureStartMsg[0],\n    continueMsg: measureLengthContinueMsg[0]\n  });\n\n  this.measureLength.setActive(false);\n  ngeoMiscDecorate.interaction(this.measureLength);\n\n  /**\n   * @type {ngeo.interaction.MeasureArea}\n   * @export\n   */\n  this.measureArea = new ngeoInteractionMeasureArea($filter('ngeoUnitPrefix'), {\n    sketchStyle: style,\n    startMsg: measureStartMsg[0],\n    continueMsg: measureAreaContinueMsg[0]\n  });\n\n  this.measureArea.setActive(false);\n  ngeoMiscDecorate.interaction(this.measureArea);\n\n  /**\n   * @type {ngeo.interaction.MeasureAzimut}\n   * @export\n   */\n  this.measureAzimut = new ngeoInteractionMeasureAzimut(\n    $filter('ngeoUnitPrefix'), $filter('ngeoNumber'), {\n      sketchStyle: style,\n      startMsg: measureStartMsg[0],\n      continueMsg: measureAzimutContinueMsg[0]\n    });\n\n  this.measureAzimut.setActive(false);\n  ngeoMiscDecorate.interaction(this.measureAzimut);\n\n\n  // the following code shows how one can add additional information to the\n  // tooltip. This can be useful to display the elevation offset from the\n  // 2 points of an azimut measurement.\n  this.measureAzimut.on('measureend', (evt) => {\n    const el = evt.target.getTooltipElement();\n    el.innerHTML += '<br>Additional info';\n  });\n};\n\nexports.module.controller('AppMeasuretoolsController', exports.MeasuretoolsController);\n\nexports.MeasuretoolsController.prototype.$onInit = function() {\n  this.map.addInteraction(this.measureLength);\n  this.map.addInteraction(this.measureArea);\n  this.map.addInteraction(this.measureAzimut);\n};\n\n/**\n * @constructor\n * @ngInject\n */\nexports.MainController = function() {\n\n  /**\n   * @type {string}\n   * @export\n   */\n  this.lang = 'en';\n\n  /**\n   * @type {ol.Map}\n   * @export\n   */\n  this.map = new olMap({\n    layers: [\n      new olLayerTile({\n        source: new olSourceOSM()\n      })\n    ],\n    view: new olView({\n      center: [692114.718759744, 5743119.914347709],\n      zoom: 15\n    })\n  });\n\n  this.map.addControl(new olControlScaleLine());\n};\n\n\nexports.module.controller('MainController', exports.MainController);\n\n\nexport default exports;\n\n\n\n// WEBPACK FOOTER //\n// ./examples/measure.js","/**\n * @module ol/source/OSM\n */\nimport {inherits} from '../index.js';\nimport XYZ from '../source/XYZ.js';\n\n/**\n * @classdesc\n * Layer source for the OpenStreetMap tile server.\n *\n * @constructor\n * @extends {ol.source.XYZ}\n * @param {olx.source.OSMOptions=} opt_options Open Street Map options.\n * @api\n */\nconst OSM = function(opt_options) {\n\n  const options = opt_options || {};\n\n  let attributions;\n  if (options.attributions !== undefined) {\n    attributions = options.attributions;\n  } else {\n    attributions = [OSM.ATTRIBUTION];\n  }\n\n  const crossOrigin = options.crossOrigin !== undefined ?\n    options.crossOrigin : 'anonymous';\n\n  const url = options.url !== undefined ?\n    options.url : 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n  XYZ.call(this, {\n    attributions: attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: crossOrigin,\n    opaque: options.opaque !== undefined ? options.opaque : true,\n    maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileLoadFunction: options.tileLoadFunction,\n    url: url,\n    wrapX: options.wrapX\n  });\n\n};\n\ninherits(OSM, XYZ);\n\n\n/**\n * The attribution containing a link to the OpenStreetMap Copyright and License\n * page.\n * @const\n * @type {string}\n * @api\n */\nOSM.ATTRIBUTION = '&copy; ' +\n      '<a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> ' +\n      'contributors.';\nexport default OSM;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/OSM.js\n// module id = 5\n// module chunks = 0 1 2 3 4 5 6 8 9 10 11 12 13 14 15 17 18 19 20 22 23 24 25 26 27 28","/**\n * @module ol/source/XYZ\n */\nimport {inherits} from '../index.js';\nimport TileImage from '../source/TileImage.js';\nimport _ol_tilegrid_ from '../tilegrid.js';\n\n/**\n * @classdesc\n * Layer source for tile data with URLs in a set XYZ format that are\n * defined in a URL template. By default, this follows the widely-used\n * Google grid where `x` 0 and `y` 0 are in the top left. Grids like\n * TMS where `x` 0 and `y` 0 are in the bottom left can be used by\n * using the `{-y}` placeholder in the URL template, so long as the\n * source does not have a custom tile grid. In this case,\n * {@link ol.source.TileImage} can be used with a `tileUrlFunction`\n * such as:\n *\n *  tileUrlFunction: function(coordinate) {\n *    return 'http://mapserver.com/' + coordinate[0] + '/' +\n *        coordinate[1] + '/' + coordinate[2] + '.png';\n *    }\n *\n *\n * @constructor\n * @extends {ol.source.TileImage}\n * @param {olx.source.XYZOptions=} opt_options XYZ options.\n * @api\n */\nconst XYZ = function(opt_options) {\n  const options = opt_options || {};\n  const projection = options.projection !== undefined ?\n    options.projection : 'EPSG:3857';\n\n  const tileGrid = options.tileGrid !== undefined ? options.tileGrid :\n    _ol_tilegrid_.createXYZ({\n      extent: _ol_tilegrid_.extentFromProjection(projection),\n      maxZoom: options.maxZoom,\n      minZoom: options.minZoom,\n      tileSize: options.tileSize\n    });\n\n  TileImage.call(this, {\n    attributions: options.attributions,\n    cacheSize: options.cacheSize,\n    crossOrigin: options.crossOrigin,\n    opaque: options.opaque,\n    projection: projection,\n    reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n    tileGrid: tileGrid,\n    tileLoadFunction: options.tileLoadFunction,\n    tilePixelRatio: options.tilePixelRatio,\n    tileUrlFunction: options.tileUrlFunction,\n    url: options.url,\n    urls: options.urls,\n    wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    transition: options.transition\n  });\n\n};\n\ninherits(XYZ, TileImage);\nexport default XYZ;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/openlayers/src/ol/source/XYZ.js\n// module id = 6\n// module chunks = 0 1 2 3 4 5 6 8 9 10 11 12 13 14 15 17 18 19 20 22 23 24 25 26 27 28"],"sourceRoot":""}